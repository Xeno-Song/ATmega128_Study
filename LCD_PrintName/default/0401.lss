
0401.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000029a  0000032e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800120  00800120  0000034e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000c5  00000000  00000000  00000ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000577  00000000  00000000  00000b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000019a  00000000  00000000  000010fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000003da  00000000  00000000  00001297  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000090  00000000  00000000  00001674  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000016e  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000bc  00000000  00000000  00001872  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  0000192e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e9       	ldi	r30, 0x9A	; 154
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 32       	cpi	r26, 0x24	; 36
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
  c6:	0c 94 4b 01 	jmp	0x296	; 0x296 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <LCD_Command>:
#define CURSOR_HOME		0x02

//Command Write
void LCD_Command(unsigned char data)
{
	LCD_STRU = 0x00;
  ce:	15 ba       	out	0x15, r1	; 21
	LCD_DATA = data;
  d0:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	00 00       	nop
	_delay_us(1);

	LCD_STRU |= ENABLE_BIT;
  d4:	aa 9a       	sbi	0x15, 2	; 21
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_Command+0xa>
  dc:	00 00       	nop
	_delay_us(10);

	LCD_STRU = 0;
  de:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	89 ef       	ldi	r24, 0xF9	; 249
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_Command+0x16>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_Command+0x1c>
  ea:	00 00       	nop
	_delay_ms(1);
}
  ec:	08 95       	ret

000000ee <LCD_Data>:

//Data Write
void LCD_Data(unsigned char data)
{
	LCD_STRU = RS_BIT;
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	95 bb       	out	0x15, r25	; 21

	LCD_DATA = data;
  f2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	00 00       	nop
	_delay_us(1);

	LCD_STRU |= ENABLE_BIT;
  f6:	aa 9a       	sbi	0x15, 2	; 21
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	8a 95       	dec	r24
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Data+0xc>
  fe:	00 00       	nop
	_delay_us(10);

	LCD_STRU = 0;
 100:	15 ba       	out	0x15, r1	; 21
 102:	80 e1       	ldi	r24, 0x10	; 16
 104:	8a 95       	dec	r24
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_Data+0x16>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCD_Data+0x1c>
	_delay_us(50);
}
 10a:	08 95       	ret

0000010c <InitLCD>:

//Init LCD
void InitLCD()
{
	LCD_DATA = 0x00;
 10c:	1b ba       	out	0x1b, r1	; 27
	LCD_STRU = 0x00;
 10e:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	87 ea       	ldi	r24, 0xA7	; 167
 112:	91 e6       	ldi	r25, 0x61	; 97
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <InitLCD+0x8>
 118:	00 c0       	rjmp	.+0      	; 0x11a <InitLCD+0xe>
 11a:	00 00       	nop
	_delay_ms(100);

	//Function set
	LCD_Command(0x3C);
 11c:	8c e3       	ldi	r24, 0x3C	; 60
 11e:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
 122:	83 ec       	ldi	r24, 0xC3	; 195
 124:	99 e0       	ldi	r25, 0x09	; 9
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <InitLCD+0x1a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <InitLCD+0x20>
 12c:	00 00       	nop

	_delay_ms(10);

	//Function set
	LCD_Command(0x3C);
 12e:	8c e3       	ldi	r24, 0x3C	; 60
 130:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	91 e2       	ldi	r25, 0x21	; 33
 136:	9a 95       	dec	r25
 138:	f1 f7       	brne	.-4      	; 0x136 <InitLCD+0x2a>
 13a:	00 00       	nop
	_delay_us(100);

	LCD_Command(0x3C);
 13c:	8c e3       	ldi	r24, 0x3C	; 60
 13e:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
 142:	81 e2       	ldi	r24, 0x21	; 33
 144:	8a 95       	dec	r24
 146:	f1 f7       	brne	.-4      	; 0x144 <InitLCD+0x38>
 148:	00 00       	nop
	_delay_us(100);

	LCD_Command(0x3C);	//Function Set
 14a:	8c e3       	ldi	r24, 0x3C	; 60
 14c:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
	LCD_Command(0x0C);	//Display Control
 150:	8c e0       	ldi	r24, 0x0C	; 12
 152:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
	LCD_Command(DISPLAY_CLEAR); //Display Clear
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
	LCD_Command(0x06);		//Set Entrymode
 15c:	86 e0       	ldi	r24, 0x06	; 6
 15e:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
}
 162:	08 95       	ret

00000164 <Set_Data_Memory_Address>:

void Set_Data_Memory_Address(char address)
{
	LCD_Command(address | 0x80);
 164:	80 68       	ori	r24, 0x80	; 128
 166:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
}
 16a:	08 95       	ret

0000016c <LCD_WriteString>:

void LCD_WriteString(char* str)
{
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	e8 2e       	mov	r14, r24
 176:	e7 01       	movw	r28, r14
 178:	7e 01       	movw	r14, r28
 17a:	f9 2e       	mov	r15, r25
 17c:	e7 01       	movw	r28, r14
	while(*str != 0)
 17e:	02 c0       	rjmp	.+4      	; 0x184 <LCD_WriteString+0x18>
	{
		LCD_Data(*str);
 180:	0e 94 77 00 	call	0xee	; 0xee <LCD_Data>
	LCD_Command(address | 0x80);
}

void LCD_WriteString(char* str)
{
	while(*str != 0)
 184:	89 91       	ld	r24, Y+
 186:	88 23       	and	r24, r24
 188:	d9 f7       	brne	.-10     	; 0x180 <LCD_WriteString+0x14>
	{
		LCD_Data(*str);
		str++;
	}
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	ff 90       	pop	r15
 190:	ef 90       	pop	r14
 192:	08 95       	ret

00000194 <LCD_WriteNum>:

void LCD_WriteNum(unsigned char Num)
{
 194:	1f 93       	push	r17
 196:	18 2f       	mov	r17, r24
	if(Num >= 10)
 198:	8a 30       	cpi	r24, 0x0A	; 10
 19a:	98 f0       	brcs	.+38     	; 0x1c2 <LCD_WriteNum+0x2e>
	{
		if(Num >= 100)
 19c:	84 36       	cpi	r24, 0x64	; 100
 19e:	30 f0       	brcs	.+12     	; 0x1ac <LCD_WriteNum+0x18>
		{
			LCD_Data((Num / 100) + '0');
 1a0:	64 e6       	ldi	r22, 0x64	; 100
 1a2:	0e 94 3f 01 	call	0x27e	; 0x27e <__udivmodqi4>
 1a6:	80 5d       	subi	r24, 0xD0	; 208
 1a8:	0e 94 77 00 	call	0xee	; 0xee <LCD_Data>
		}

		LCD_Data((Num /10) % 10 + '0');
 1ac:	2a e0       	ldi	r18, 0x0A	; 10
 1ae:	81 2f       	mov	r24, r17
 1b0:	62 2f       	mov	r22, r18
 1b2:	0e 94 3f 01 	call	0x27e	; 0x27e <__udivmodqi4>
 1b6:	0e 94 3f 01 	call	0x27e	; 0x27e <__udivmodqi4>
 1ba:	89 2f       	mov	r24, r25
 1bc:	80 5d       	subi	r24, 0xD0	; 208
 1be:	0e 94 77 00 	call	0xee	; 0xee <LCD_Data>
	}

	LCD_Data(Num % 10 + '0');
 1c2:	81 2f       	mov	r24, r17
 1c4:	6a e0       	ldi	r22, 0x0A	; 10
 1c6:	0e 94 3f 01 	call	0x27e	; 0x27e <__udivmodqi4>
 1ca:	89 2f       	mov	r24, r25
 1cc:	80 5d       	subi	r24, 0xD0	; 208
 1ce:	0e 94 77 00 	call	0xee	; 0xee <LCD_Data>

	LCD_WriteString(" ");
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_WriteString>
}
 1da:	1f 91       	pop	r17
 1dc:	08 95       	ret

000001de <WriteTime>:

char Hours, Minutes, Seconds;
char TimeCounter = 0;

void WriteTime()
{
 1de:	1f 93       	push	r17
 1e0:	df 93       	push	r29
 1e2:	cf 93       	push	r28
 1e4:	0f 92       	push	r0
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
	char tmp;
	Set_Data_Memory_Address(0x00);
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 b2 00 	call	0x164	; 0x164 <Set_Data_Memory_Address>

	tmp = Hours;
 1f0:	80 91 21 01 	lds	r24, 0x0121
	LCD_Data('0' + (char)(tmp / 10));
 1f4:	1a e0       	ldi	r17, 0x0A	; 10
 1f6:	61 2f       	mov	r22, r17
 1f8:	0e 94 3f 01 	call	0x27e	; 0x27e <__udivmodqi4>
 1fc:	80 5d       	subi	r24, 0xD0	; 208
 1fe:	99 83       	std	Y+1, r25	; 0x01
 200:	0e 94 77 00 	call	0xee	; 0xee <LCD_Data>
	LCD_Data('0' + (char)(tmp % 10));
 204:	99 81       	ldd	r25, Y+1	; 0x01
 206:	89 2f       	mov	r24, r25
 208:	80 5d       	subi	r24, 0xD0	; 208
 20a:	0e 94 77 00 	call	0xee	; 0xee <LCD_Data>

	LCD_Data(':');
 20e:	8a e3       	ldi	r24, 0x3A	; 58
 210:	0e 94 77 00 	call	0xee	; 0xee <LCD_Data>

	tmp = Minutes;
 214:	80 91 22 01 	lds	r24, 0x0122
	LCD_Data('0' + (char)(tmp / 10));
 218:	61 2f       	mov	r22, r17
 21a:	0e 94 3f 01 	call	0x27e	; 0x27e <__udivmodqi4>
 21e:	80 5d       	subi	r24, 0xD0	; 208
 220:	99 83       	std	Y+1, r25	; 0x01
 222:	0e 94 77 00 	call	0xee	; 0xee <LCD_Data>
	LCD_Data('0' + (char)(tmp % 10));
 226:	99 81       	ldd	r25, Y+1	; 0x01
 228:	89 2f       	mov	r24, r25
 22a:	80 5d       	subi	r24, 0xD0	; 208
 22c:	0e 94 77 00 	call	0xee	; 0xee <LCD_Data>

	LCD_Data(':');
 230:	8a e3       	ldi	r24, 0x3A	; 58
 232:	0e 94 77 00 	call	0xee	; 0xee <LCD_Data>

	tmp = Seconds;
 236:	80 91 23 01 	lds	r24, 0x0123
	LCD_Data('0' + (char)(tmp / 10));
 23a:	61 2f       	mov	r22, r17
 23c:	0e 94 3f 01 	call	0x27e	; 0x27e <__udivmodqi4>
 240:	80 5d       	subi	r24, 0xD0	; 208
 242:	99 83       	std	Y+1, r25	; 0x01
 244:	0e 94 77 00 	call	0xee	; 0xee <LCD_Data>
	LCD_Data('0' + (char)(tmp % 10));
 248:	99 81       	ldd	r25, Y+1	; 0x01
 24a:	89 2f       	mov	r24, r25
 24c:	80 5d       	subi	r24, 0xD0	; 208
 24e:	0e 94 77 00 	call	0xee	; 0xee <LCD_Data>
}
 252:	0f 90       	pop	r0
 254:	cf 91       	pop	r28
 256:	df 91       	pop	r29
 258:	1f 91       	pop	r17
 25a:	08 95       	ret

0000025c <main>:

int main()
{
	DDRA = 0xFF;
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 260:	84 bb       	out	0x14, r24	; 20
	
	InitLCD();
 262:	0e 94 86 00 	call	0x10c	; 0x10c <InitLCD>

	LCD_WriteString("Lee Seong Jun");
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_WriteString>

	Set_Data_Memory_Address(0x40);
 26e:	80 e4       	ldi	r24, 0x40	; 64
 270:	0e 94 b2 00 	call	0x164	; 0x164 <Set_Data_Memory_Address>
	LCD_WriteString("Song Jae Hyuck");
 274:	80 e1       	ldi	r24, 0x10	; 16
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 b6 00 	call	0x16c	; 0x16c <LCD_WriteString>
 27c:	ff cf       	rjmp	.-2      	; 0x27c <main+0x20>

0000027e <__udivmodqi4>:
 27e:	99 1b       	sub	r25, r25
 280:	79 e0       	ldi	r23, 0x09	; 9
 282:	04 c0       	rjmp	.+8      	; 0x28c <__udivmodqi4_ep>

00000284 <__udivmodqi4_loop>:
 284:	99 1f       	adc	r25, r25
 286:	96 17       	cp	r25, r22
 288:	08 f0       	brcs	.+2      	; 0x28c <__udivmodqi4_ep>
 28a:	96 1b       	sub	r25, r22

0000028c <__udivmodqi4_ep>:
 28c:	88 1f       	adc	r24, r24
 28e:	7a 95       	dec	r23
 290:	c9 f7       	brne	.-14     	; 0x284 <__udivmodqi4_loop>
 292:	80 95       	com	r24
 294:	08 95       	ret

00000296 <_exit>:
 296:	f8 94       	cli

00000298 <__stop_program>:
 298:	ff cf       	rjmp	.-2      	; 0x298 <__stop_program>
