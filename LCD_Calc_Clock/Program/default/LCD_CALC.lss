
LCD_CALC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00002bc8  00002c5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002bc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800126  00800126  00002c82  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00002c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00003350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000033d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000036f  00000000  00000000  00003555  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002c19  00000000  00000000  000038c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000113e  00000000  00000000  000064dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000021c6  00000000  00000000  0000761b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002e0  00000000  00000000  000097e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000051b  00000000  00000000  00009ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c25  00000000  00000000  00009fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000060e  00000000  00000000  0000ac04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000068  00000000  00000000  0000b212  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 ec       	ldi	r30, 0xC8	; 200
      a0:	fb e2       	ldi	r31, 0x2B	; 43
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 32       	cpi	r26, 0x26	; 38
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a6 e2       	ldi	r26, 0x26	; 38
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 33       	cpi	r26, 0x39	; 57
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <main>
      c6:	0c 94 e2 15 	jmp	0x2bc4	; 0x2bc4 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <LCD_Command>:
#define DISPLAY_CLEAR	0x01
#define CURSOR_HOME		0x02

//Command Write
void LCD_Command(unsigned char data)
{
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	ef 97       	sbiw	r28, 0x3f	; 63
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
      e6:	8f af       	std	Y+63, r24	; 0x3f
	LCD_STRU = 0x00;
      e8:	85 e3       	ldi	r24, 0x35	; 53
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	fc 01       	movw	r30, r24
      ee:	10 82       	st	Z, r1
	LCD_DATA = data;
      f0:	8b e3       	ldi	r24, 0x3B	; 59
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	2f ad       	ldd	r18, Y+63	; 0x3f
      f6:	fc 01       	movw	r30, r24
      f8:	20 83       	st	Z, r18
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	a0 e8       	ldi	r26, 0x80	; 128
     100:	bf e3       	ldi	r27, 0x3F	; 63
     102:	89 83       	std	Y+1, r24	; 0x01
     104:	9a 83       	std	Y+2, r25	; 0x02
     106:	ab 83       	std	Y+3, r26	; 0x03
     108:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     10a:	69 81       	ldd	r22, Y+1	; 0x01
     10c:	7a 81       	ldd	r23, Y+2	; 0x02
     10e:	8b 81       	ldd	r24, Y+3	; 0x03
     110:	9c 81       	ldd	r25, Y+4	; 0x04
     112:	2b ea       	ldi	r18, 0xAB	; 171
     114:	3a ea       	ldi	r19, 0xAA	; 170
     116:	4a ea       	ldi	r20, 0xAA	; 170
     118:	50 e4       	ldi	r21, 0x40	; 64
     11a:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     11e:	dc 01       	movw	r26, r24
     120:	cb 01       	movw	r24, r22
     122:	8d 83       	std	Y+5, r24	; 0x05
     124:	9e 83       	std	Y+6, r25	; 0x06
     126:	af 83       	std	Y+7, r26	; 0x07
     128:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     12a:	11 e0       	ldi	r17, 0x01	; 1
     12c:	6d 81       	ldd	r22, Y+5	; 0x05
     12e:	7e 81       	ldd	r23, Y+6	; 0x06
     130:	8f 81       	ldd	r24, Y+7	; 0x07
     132:	98 85       	ldd	r25, Y+8	; 0x08
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	40 e8       	ldi	r20, 0x80	; 128
     13a:	5f e3       	ldi	r21, 0x3F	; 63
     13c:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
     140:	88 23       	and	r24, r24
     142:	0c f0       	brlt	.+2      	; 0x146 <LCD_Command+0x78>
     144:	10 e0       	ldi	r17, 0x00	; 0
     146:	11 23       	and	r17, r17
     148:	19 f0       	breq	.+6      	; 0x150 <LCD_Command+0x82>
		__ticks = 1;
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	89 87       	std	Y+9, r24	; 0x09
     14e:	a3 c0       	rjmp	.+326    	; 0x296 <LCD_Command+0x1c8>
	else if (__tmp > 255)
     150:	11 e0       	ldi	r17, 0x01	; 1
     152:	6d 81       	ldd	r22, Y+5	; 0x05
     154:	7e 81       	ldd	r23, Y+6	; 0x06
     156:	8f 81       	ldd	r24, Y+7	; 0x07
     158:	98 85       	ldd	r25, Y+8	; 0x08
     15a:	20 e0       	ldi	r18, 0x00	; 0
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	4f e7       	ldi	r20, 0x7F	; 127
     160:	53 e4       	ldi	r21, 0x43	; 67
     162:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
     166:	18 16       	cp	r1, r24
     168:	0c f0       	brlt	.+2      	; 0x16c <LCD_Command+0x9e>
     16a:	10 e0       	ldi	r17, 0x00	; 0
     16c:	11 23       	and	r17, r17
     16e:	09 f4       	brne	.+2      	; 0x172 <LCD_Command+0xa4>
     170:	89 c0       	rjmp	.+274    	; 0x284 <LCD_Command+0x1b6>
	{
		_delay_ms(__us / 1000.0);
     172:	69 81       	ldd	r22, Y+1	; 0x01
     174:	7a 81       	ldd	r23, Y+2	; 0x02
     176:	8b 81       	ldd	r24, Y+3	; 0x03
     178:	9c 81       	ldd	r25, Y+4	; 0x04
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	4a e7       	ldi	r20, 0x7A	; 122
     180:	54 e4       	ldi	r21, 0x44	; 68
     182:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     186:	dc 01       	movw	r26, r24
     188:	cb 01       	movw	r24, r22
     18a:	8a 87       	std	Y+10, r24	; 0x0a
     18c:	9b 87       	std	Y+11, r25	; 0x0b
     18e:	ac 87       	std	Y+12, r26	; 0x0c
     190:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     192:	6a 85       	ldd	r22, Y+10	; 0x0a
     194:	7b 85       	ldd	r23, Y+11	; 0x0b
     196:	8c 85       	ldd	r24, Y+12	; 0x0c
     198:	9d 85       	ldd	r25, Y+13	; 0x0d
     19a:	20 e0       	ldi	r18, 0x00	; 0
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	4a e7       	ldi	r20, 0x7A	; 122
     1a0:	55 e4       	ldi	r21, 0x45	; 69
     1a2:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     1a6:	dc 01       	movw	r26, r24
     1a8:	cb 01       	movw	r24, r22
     1aa:	8e 87       	std	Y+14, r24	; 0x0e
     1ac:	9f 87       	std	Y+15, r25	; 0x0f
     1ae:	a8 8b       	std	Y+16, r26	; 0x10
     1b0:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     1b2:	11 e0       	ldi	r17, 0x01	; 1
     1b4:	6e 85       	ldd	r22, Y+14	; 0x0e
     1b6:	7f 85       	ldd	r23, Y+15	; 0x0f
     1b8:	88 89       	ldd	r24, Y+16	; 0x10
     1ba:	99 89       	ldd	r25, Y+17	; 0x11
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	30 e0       	ldi	r19, 0x00	; 0
     1c0:	40 e8       	ldi	r20, 0x80	; 128
     1c2:	5f e3       	ldi	r21, 0x3F	; 63
     1c4:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
     1c8:	88 23       	and	r24, r24
     1ca:	0c f0       	brlt	.+2      	; 0x1ce <LCD_Command+0x100>
     1cc:	10 e0       	ldi	r17, 0x00	; 0
     1ce:	11 23       	and	r17, r17
     1d0:	29 f0       	breq	.+10     	; 0x1dc <LCD_Command+0x10e>
		__ticks = 1;
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	9b 8b       	std	Y+19, r25	; 0x13
     1d8:	8a 8b       	std	Y+18, r24	; 0x12
     1da:	46 c0       	rjmp	.+140    	; 0x268 <LCD_Command+0x19a>
	else if (__tmp > 65535)
     1dc:	11 e0       	ldi	r17, 0x01	; 1
     1de:	6e 85       	ldd	r22, Y+14	; 0x0e
     1e0:	7f 85       	ldd	r23, Y+15	; 0x0f
     1e2:	88 89       	ldd	r24, Y+16	; 0x10
     1e4:	99 89       	ldd	r25, Y+17	; 0x11
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	3f ef       	ldi	r19, 0xFF	; 255
     1ea:	4f e7       	ldi	r20, 0x7F	; 127
     1ec:	57 e4       	ldi	r21, 0x47	; 71
     1ee:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
     1f2:	18 16       	cp	r1, r24
     1f4:	0c f0       	brlt	.+2      	; 0x1f8 <LCD_Command+0x12a>
     1f6:	10 e0       	ldi	r17, 0x00	; 0
     1f8:	11 23       	and	r17, r17
     1fa:	61 f1       	breq	.+88     	; 0x254 <LCD_Command+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1fc:	6a 85       	ldd	r22, Y+10	; 0x0a
     1fe:	7b 85       	ldd	r23, Y+11	; 0x0b
     200:	8c 85       	ldd	r24, Y+12	; 0x0c
     202:	9d 85       	ldd	r25, Y+13	; 0x0d
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	40 e2       	ldi	r20, 0x20	; 32
     20a:	51 e4       	ldi	r21, 0x41	; 65
     20c:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     210:	dc 01       	movw	r26, r24
     212:	cb 01       	movw	r24, r22
     214:	bc 01       	movw	r22, r24
     216:	cd 01       	movw	r24, r26
     218:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     21c:	dc 01       	movw	r26, r24
     21e:	cb 01       	movw	r24, r22
     220:	9b 8b       	std	Y+19, r25	; 0x13
     222:	8a 8b       	std	Y+18, r24	; 0x12
     224:	12 c0       	rjmp	.+36     	; 0x24a <LCD_Command+0x17c>
     226:	80 e9       	ldi	r24, 0x90	; 144
     228:	91 e0       	ldi	r25, 0x01	; 1
     22a:	9d 8b       	std	Y+21, r25	; 0x15
     22c:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     22e:	8c 89       	ldd	r24, Y+20	; 0x14
     230:	9d 89       	ldd	r25, Y+21	; 0x15
     232:	8c 01       	movw	r16, r24
     234:	c8 01       	movw	r24, r16
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	f1 f7       	brne	.-4      	; 0x236 <LCD_Command+0x168>
     23a:	8c 01       	movw	r16, r24
     23c:	1d 8b       	std	Y+21, r17	; 0x15
     23e:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     240:	8a 89       	ldd	r24, Y+18	; 0x12
     242:	9b 89       	ldd	r25, Y+19	; 0x13
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	9b 8b       	std	Y+19, r25	; 0x13
     248:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24a:	8a 89       	ldd	r24, Y+18	; 0x12
     24c:	9b 89       	ldd	r25, Y+19	; 0x13
     24e:	00 97       	sbiw	r24, 0x00	; 0
     250:	51 f7       	brne	.-44     	; 0x226 <LCD_Command+0x158>
     252:	28 c0       	rjmp	.+80     	; 0x2a4 <LCD_Command+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     254:	6e 85       	ldd	r22, Y+14	; 0x0e
     256:	7f 85       	ldd	r23, Y+15	; 0x0f
     258:	88 89       	ldd	r24, Y+16	; 0x10
     25a:	99 89       	ldd	r25, Y+17	; 0x11
     25c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     260:	dc 01       	movw	r26, r24
     262:	cb 01       	movw	r24, r22
     264:	9b 8b       	std	Y+19, r25	; 0x13
     266:	8a 8b       	std	Y+18, r24	; 0x12
     268:	8a 89       	ldd	r24, Y+18	; 0x12
     26a:	9b 89       	ldd	r25, Y+19	; 0x13
     26c:	9f 8b       	std	Y+23, r25	; 0x17
     26e:	8e 8b       	std	Y+22, r24	; 0x16
     270:	8e 89       	ldd	r24, Y+22	; 0x16
     272:	9f 89       	ldd	r25, Y+23	; 0x17
     274:	8c 01       	movw	r16, r24
     276:	f8 01       	movw	r30, r16
     278:	31 97       	sbiw	r30, 0x01	; 1
     27a:	f1 f7       	brne	.-4      	; 0x278 <LCD_Command+0x1aa>
     27c:	8f 01       	movw	r16, r30
     27e:	1f 8b       	std	Y+23, r17	; 0x17
     280:	0e 8b       	std	Y+22, r16	; 0x16
     282:	10 c0       	rjmp	.+32     	; 0x2a4 <LCD_Command+0x1d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     284:	6d 81       	ldd	r22, Y+5	; 0x05
     286:	7e 81       	ldd	r23, Y+6	; 0x06
     288:	8f 81       	ldd	r24, Y+7	; 0x07
     28a:	98 85       	ldd	r25, Y+8	; 0x08
     28c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     290:	dc 01       	movw	r26, r24
     292:	cb 01       	movw	r24, r22
     294:	89 87       	std	Y+9, r24	; 0x09
     296:	89 85       	ldd	r24, Y+9	; 0x09
     298:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     29a:	88 8d       	ldd	r24, Y+24	; 0x18
     29c:	18 2f       	mov	r17, r24
     29e:	1a 95       	dec	r17
     2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_Command+0x1d0>
     2a2:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(1);

	LCD_STRU |= ENABLE_BIT;
     2a4:	85 e3       	ldi	r24, 0x35	; 53
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	25 e3       	ldi	r18, 0x35	; 53
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	f9 01       	movw	r30, r18
     2ae:	20 81       	ld	r18, Z
     2b0:	24 60       	ori	r18, 0x04	; 4
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 83       	st	Z, r18
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	a0 e2       	ldi	r26, 0x20	; 32
     2bc:	b1 e4       	ldi	r27, 0x41	; 65
     2be:	89 8f       	std	Y+25, r24	; 0x19
     2c0:	9a 8f       	std	Y+26, r25	; 0x1a
     2c2:	ab 8f       	std	Y+27, r26	; 0x1b
     2c4:	bc 8f       	std	Y+28, r27	; 0x1c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     2c6:	69 8d       	ldd	r22, Y+25	; 0x19
     2c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     2ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2ce:	2b ea       	ldi	r18, 0xAB	; 171
     2d0:	3a ea       	ldi	r19, 0xAA	; 170
     2d2:	4a ea       	ldi	r20, 0xAA	; 170
     2d4:	50 e4       	ldi	r21, 0x40	; 64
     2d6:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     2da:	dc 01       	movw	r26, r24
     2dc:	cb 01       	movw	r24, r22
     2de:	8d 8f       	std	Y+29, r24	; 0x1d
     2e0:	9e 8f       	std	Y+30, r25	; 0x1e
     2e2:	af 8f       	std	Y+31, r26	; 0x1f
     2e4:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
     2e6:	11 e0       	ldi	r17, 0x01	; 1
     2e8:	6d 8d       	ldd	r22, Y+29	; 0x1d
     2ea:	7e 8d       	ldd	r23, Y+30	; 0x1e
     2ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
     2ee:	98 a1       	ldd	r25, Y+32	; 0x20
     2f0:	20 e0       	ldi	r18, 0x00	; 0
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	40 e8       	ldi	r20, 0x80	; 128
     2f6:	5f e3       	ldi	r21, 0x3F	; 63
     2f8:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
     2fc:	88 23       	and	r24, r24
     2fe:	0c f0       	brlt	.+2      	; 0x302 <LCD_Command+0x234>
     300:	10 e0       	ldi	r17, 0x00	; 0
     302:	11 23       	and	r17, r17
     304:	19 f0       	breq	.+6      	; 0x30c <LCD_Command+0x23e>
		__ticks = 1;
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	89 a3       	std	Y+33, r24	; 0x21
     30a:	a3 c0       	rjmp	.+326    	; 0x452 <LCD_Command+0x384>
	else if (__tmp > 255)
     30c:	11 e0       	ldi	r17, 0x01	; 1
     30e:	6d 8d       	ldd	r22, Y+29	; 0x1d
     310:	7e 8d       	ldd	r23, Y+30	; 0x1e
     312:	8f 8d       	ldd	r24, Y+31	; 0x1f
     314:	98 a1       	ldd	r25, Y+32	; 0x20
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	4f e7       	ldi	r20, 0x7F	; 127
     31c:	53 e4       	ldi	r21, 0x43	; 67
     31e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
     322:	18 16       	cp	r1, r24
     324:	0c f0       	brlt	.+2      	; 0x328 <LCD_Command+0x25a>
     326:	10 e0       	ldi	r17, 0x00	; 0
     328:	11 23       	and	r17, r17
     32a:	09 f4       	brne	.+2      	; 0x32e <LCD_Command+0x260>
     32c:	89 c0       	rjmp	.+274    	; 0x440 <LCD_Command+0x372>
	{
		_delay_ms(__us / 1000.0);
     32e:	69 8d       	ldd	r22, Y+25	; 0x19
     330:	7a 8d       	ldd	r23, Y+26	; 0x1a
     332:	8b 8d       	ldd	r24, Y+27	; 0x1b
     334:	9c 8d       	ldd	r25, Y+28	; 0x1c
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	4a e7       	ldi	r20, 0x7A	; 122
     33c:	54 e4       	ldi	r21, 0x44	; 68
     33e:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     342:	dc 01       	movw	r26, r24
     344:	cb 01       	movw	r24, r22
     346:	8a a3       	std	Y+34, r24	; 0x22
     348:	9b a3       	std	Y+35, r25	; 0x23
     34a:	ac a3       	std	Y+36, r26	; 0x24
     34c:	bd a3       	std	Y+37, r27	; 0x25
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     34e:	6a a1       	ldd	r22, Y+34	; 0x22
     350:	7b a1       	ldd	r23, Y+35	; 0x23
     352:	8c a1       	ldd	r24, Y+36	; 0x24
     354:	9d a1       	ldd	r25, Y+37	; 0x25
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	4a e7       	ldi	r20, 0x7A	; 122
     35c:	55 e4       	ldi	r21, 0x45	; 69
     35e:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     362:	dc 01       	movw	r26, r24
     364:	cb 01       	movw	r24, r22
     366:	8e a3       	std	Y+38, r24	; 0x26
     368:	9f a3       	std	Y+39, r25	; 0x27
     36a:	a8 a7       	std	Y+40, r26	; 0x28
     36c:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
     36e:	11 e0       	ldi	r17, 0x01	; 1
     370:	6e a1       	ldd	r22, Y+38	; 0x26
     372:	7f a1       	ldd	r23, Y+39	; 0x27
     374:	88 a5       	ldd	r24, Y+40	; 0x28
     376:	99 a5       	ldd	r25, Y+41	; 0x29
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	40 e8       	ldi	r20, 0x80	; 128
     37e:	5f e3       	ldi	r21, 0x3F	; 63
     380:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
     384:	88 23       	and	r24, r24
     386:	0c f0       	brlt	.+2      	; 0x38a <LCD_Command+0x2bc>
     388:	10 e0       	ldi	r17, 0x00	; 0
     38a:	11 23       	and	r17, r17
     38c:	29 f0       	breq	.+10     	; 0x398 <LCD_Command+0x2ca>
		__ticks = 1;
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	9b a7       	std	Y+43, r25	; 0x2b
     394:	8a a7       	std	Y+42, r24	; 0x2a
     396:	46 c0       	rjmp	.+140    	; 0x424 <LCD_Command+0x356>
	else if (__tmp > 65535)
     398:	11 e0       	ldi	r17, 0x01	; 1
     39a:	6e a1       	ldd	r22, Y+38	; 0x26
     39c:	7f a1       	ldd	r23, Y+39	; 0x27
     39e:	88 a5       	ldd	r24, Y+40	; 0x28
     3a0:	99 a5       	ldd	r25, Y+41	; 0x29
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	3f ef       	ldi	r19, 0xFF	; 255
     3a6:	4f e7       	ldi	r20, 0x7F	; 127
     3a8:	57 e4       	ldi	r21, 0x47	; 71
     3aa:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
     3ae:	18 16       	cp	r1, r24
     3b0:	0c f0       	brlt	.+2      	; 0x3b4 <LCD_Command+0x2e6>
     3b2:	10 e0       	ldi	r17, 0x00	; 0
     3b4:	11 23       	and	r17, r17
     3b6:	61 f1       	breq	.+88     	; 0x410 <LCD_Command+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3b8:	6a a1       	ldd	r22, Y+34	; 0x22
     3ba:	7b a1       	ldd	r23, Y+35	; 0x23
     3bc:	8c a1       	ldd	r24, Y+36	; 0x24
     3be:	9d a1       	ldd	r25, Y+37	; 0x25
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	40 e2       	ldi	r20, 0x20	; 32
     3c6:	51 e4       	ldi	r21, 0x41	; 65
     3c8:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     3cc:	dc 01       	movw	r26, r24
     3ce:	cb 01       	movw	r24, r22
     3d0:	bc 01       	movw	r22, r24
     3d2:	cd 01       	movw	r24, r26
     3d4:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     3d8:	dc 01       	movw	r26, r24
     3da:	cb 01       	movw	r24, r22
     3dc:	9b a7       	std	Y+43, r25	; 0x2b
     3de:	8a a7       	std	Y+42, r24	; 0x2a
     3e0:	12 c0       	rjmp	.+36     	; 0x406 <LCD_Command+0x338>
     3e2:	80 e9       	ldi	r24, 0x90	; 144
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	9d a7       	std	Y+45, r25	; 0x2d
     3e8:	8c a7       	std	Y+44, r24	; 0x2c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3ea:	8c a5       	ldd	r24, Y+44	; 0x2c
     3ec:	9d a5       	ldd	r25, Y+45	; 0x2d
     3ee:	8c 01       	movw	r16, r24
     3f0:	c8 01       	movw	r24, r16
     3f2:	01 97       	sbiw	r24, 0x01	; 1
     3f4:	f1 f7       	brne	.-4      	; 0x3f2 <LCD_Command+0x324>
     3f6:	8c 01       	movw	r16, r24
     3f8:	1d a7       	std	Y+45, r17	; 0x2d
     3fa:	0c a7       	std	Y+44, r16	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3fc:	8a a5       	ldd	r24, Y+42	; 0x2a
     3fe:	9b a5       	ldd	r25, Y+43	; 0x2b
     400:	01 97       	sbiw	r24, 0x01	; 1
     402:	9b a7       	std	Y+43, r25	; 0x2b
     404:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     406:	8a a5       	ldd	r24, Y+42	; 0x2a
     408:	9b a5       	ldd	r25, Y+43	; 0x2b
     40a:	00 97       	sbiw	r24, 0x00	; 0
     40c:	51 f7       	brne	.-44     	; 0x3e2 <LCD_Command+0x314>
     40e:	28 c0       	rjmp	.+80     	; 0x460 <LCD_Command+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     410:	6e a1       	ldd	r22, Y+38	; 0x26
     412:	7f a1       	ldd	r23, Y+39	; 0x27
     414:	88 a5       	ldd	r24, Y+40	; 0x28
     416:	99 a5       	ldd	r25, Y+41	; 0x29
     418:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     41c:	dc 01       	movw	r26, r24
     41e:	cb 01       	movw	r24, r22
     420:	9b a7       	std	Y+43, r25	; 0x2b
     422:	8a a7       	std	Y+42, r24	; 0x2a
     424:	8a a5       	ldd	r24, Y+42	; 0x2a
     426:	9b a5       	ldd	r25, Y+43	; 0x2b
     428:	9f a7       	std	Y+47, r25	; 0x2f
     42a:	8e a7       	std	Y+46, r24	; 0x2e
     42c:	8e a5       	ldd	r24, Y+46	; 0x2e
     42e:	9f a5       	ldd	r25, Y+47	; 0x2f
     430:	8c 01       	movw	r16, r24
     432:	f8 01       	movw	r30, r16
     434:	31 97       	sbiw	r30, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <LCD_Command+0x366>
     438:	8f 01       	movw	r16, r30
     43a:	1f a7       	std	Y+47, r17	; 0x2f
     43c:	0e a7       	std	Y+46, r16	; 0x2e
     43e:	10 c0       	rjmp	.+32     	; 0x460 <LCD_Command+0x392>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     440:	6d 8d       	ldd	r22, Y+29	; 0x1d
     442:	7e 8d       	ldd	r23, Y+30	; 0x1e
     444:	8f 8d       	ldd	r24, Y+31	; 0x1f
     446:	98 a1       	ldd	r25, Y+32	; 0x20
     448:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     44c:	dc 01       	movw	r26, r24
     44e:	cb 01       	movw	r24, r22
     450:	89 a3       	std	Y+33, r24	; 0x21
     452:	89 a1       	ldd	r24, Y+33	; 0x21
     454:	88 ab       	std	Y+48, r24	; 0x30
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     456:	88 a9       	ldd	r24, Y+48	; 0x30
     458:	18 2f       	mov	r17, r24
     45a:	1a 95       	dec	r17
     45c:	f1 f7       	brne	.-4      	; 0x45a <LCD_Command+0x38c>
     45e:	18 ab       	std	Y+48, r17	; 0x30
	_delay_us(10);

	LCD_STRU = 0;
     460:	85 e3       	ldi	r24, 0x35	; 53
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	fc 01       	movw	r30, r24
     466:	10 82       	st	Z, r1
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	a0 e8       	ldi	r26, 0x80	; 128
     46e:	bf e3       	ldi	r27, 0x3F	; 63
     470:	89 ab       	std	Y+49, r24	; 0x31
     472:	9a ab       	std	Y+50, r25	; 0x32
     474:	ab ab       	std	Y+51, r26	; 0x33
     476:	bc ab       	std	Y+52, r27	; 0x34
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     478:	69 a9       	ldd	r22, Y+49	; 0x31
     47a:	7a a9       	ldd	r23, Y+50	; 0x32
     47c:	8b a9       	ldd	r24, Y+51	; 0x33
     47e:	9c a9       	ldd	r25, Y+52	; 0x34
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	4a e7       	ldi	r20, 0x7A	; 122
     486:	55 e4       	ldi	r21, 0x45	; 69
     488:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     48c:	dc 01       	movw	r26, r24
     48e:	cb 01       	movw	r24, r22
     490:	8d ab       	std	Y+53, r24	; 0x35
     492:	9e ab       	std	Y+54, r25	; 0x36
     494:	af ab       	std	Y+55, r26	; 0x37
     496:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
     498:	11 e0       	ldi	r17, 0x01	; 1
     49a:	6d a9       	ldd	r22, Y+53	; 0x35
     49c:	7e a9       	ldd	r23, Y+54	; 0x36
     49e:	8f a9       	ldd	r24, Y+55	; 0x37
     4a0:	98 ad       	ldd	r25, Y+56	; 0x38
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	0c f0       	brlt	.+2      	; 0x4b4 <LCD_Command+0x3e6>
     4b2:	10 e0       	ldi	r17, 0x00	; 0
     4b4:	11 23       	and	r17, r17
     4b6:	29 f0       	breq	.+10     	; 0x4c2 <LCD_Command+0x3f4>
		__ticks = 1;
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	9a af       	std	Y+58, r25	; 0x3a
     4be:	89 af       	std	Y+57, r24	; 0x39
     4c0:	46 c0       	rjmp	.+140    	; 0x54e <LCD_Command+0x480>
	else if (__tmp > 65535)
     4c2:	11 e0       	ldi	r17, 0x01	; 1
     4c4:	6d a9       	ldd	r22, Y+53	; 0x35
     4c6:	7e a9       	ldd	r23, Y+54	; 0x36
     4c8:	8f a9       	ldd	r24, Y+55	; 0x37
     4ca:	98 ad       	ldd	r25, Y+56	; 0x38
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	3f ef       	ldi	r19, 0xFF	; 255
     4d0:	4f e7       	ldi	r20, 0x7F	; 127
     4d2:	57 e4       	ldi	r21, 0x47	; 71
     4d4:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
     4d8:	18 16       	cp	r1, r24
     4da:	0c f0       	brlt	.+2      	; 0x4de <LCD_Command+0x410>
     4dc:	10 e0       	ldi	r17, 0x00	; 0
     4de:	11 23       	and	r17, r17
     4e0:	61 f1       	breq	.+88     	; 0x53a <LCD_Command+0x46c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4e2:	69 a9       	ldd	r22, Y+49	; 0x31
     4e4:	7a a9       	ldd	r23, Y+50	; 0x32
     4e6:	8b a9       	ldd	r24, Y+51	; 0x33
     4e8:	9c a9       	ldd	r25, Y+52	; 0x34
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	40 e2       	ldi	r20, 0x20	; 32
     4f0:	51 e4       	ldi	r21, 0x41	; 65
     4f2:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     4f6:	dc 01       	movw	r26, r24
     4f8:	cb 01       	movw	r24, r22
     4fa:	bc 01       	movw	r22, r24
     4fc:	cd 01       	movw	r24, r26
     4fe:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     502:	dc 01       	movw	r26, r24
     504:	cb 01       	movw	r24, r22
     506:	9a af       	std	Y+58, r25	; 0x3a
     508:	89 af       	std	Y+57, r24	; 0x39
     50a:	12 c0       	rjmp	.+36     	; 0x530 <LCD_Command+0x462>
     50c:	80 e9       	ldi	r24, 0x90	; 144
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	9c af       	std	Y+60, r25	; 0x3c
     512:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     514:	8b ad       	ldd	r24, Y+59	; 0x3b
     516:	9c ad       	ldd	r25, Y+60	; 0x3c
     518:	8c 01       	movw	r16, r24
     51a:	c8 01       	movw	r24, r16
     51c:	01 97       	sbiw	r24, 0x01	; 1
     51e:	f1 f7       	brne	.-4      	; 0x51c <LCD_Command+0x44e>
     520:	8c 01       	movw	r16, r24
     522:	1c af       	std	Y+60, r17	; 0x3c
     524:	0b af       	std	Y+59, r16	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     526:	89 ad       	ldd	r24, Y+57	; 0x39
     528:	9a ad       	ldd	r25, Y+58	; 0x3a
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	9a af       	std	Y+58, r25	; 0x3a
     52e:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     530:	89 ad       	ldd	r24, Y+57	; 0x39
     532:	9a ad       	ldd	r25, Y+58	; 0x3a
     534:	00 97       	sbiw	r24, 0x00	; 0
     536:	51 f7       	brne	.-44     	; 0x50c <LCD_Command+0x43e>
     538:	17 c0       	rjmp	.+46     	; 0x568 <LCD_Command+0x49a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     53a:	6d a9       	ldd	r22, Y+53	; 0x35
     53c:	7e a9       	ldd	r23, Y+54	; 0x36
     53e:	8f a9       	ldd	r24, Y+55	; 0x37
     540:	98 ad       	ldd	r25, Y+56	; 0x38
     542:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     546:	dc 01       	movw	r26, r24
     548:	cb 01       	movw	r24, r22
     54a:	9a af       	std	Y+58, r25	; 0x3a
     54c:	89 af       	std	Y+57, r24	; 0x39
     54e:	89 ad       	ldd	r24, Y+57	; 0x39
     550:	9a ad       	ldd	r25, Y+58	; 0x3a
     552:	9e af       	std	Y+62, r25	; 0x3e
     554:	8d af       	std	Y+61, r24	; 0x3d
     556:	8d ad       	ldd	r24, Y+61	; 0x3d
     558:	9e ad       	ldd	r25, Y+62	; 0x3e
     55a:	8c 01       	movw	r16, r24
     55c:	f8 01       	movw	r30, r16
     55e:	31 97       	sbiw	r30, 0x01	; 1
     560:	f1 f7       	brne	.-4      	; 0x55e <LCD_Command+0x490>
     562:	8f 01       	movw	r16, r30
     564:	1e af       	std	Y+62, r17	; 0x3e
     566:	0d af       	std	Y+61, r16	; 0x3d
	_delay_ms(1);
}
     568:	ef 96       	adiw	r28, 0x3f	; 63
     56a:	0f b6       	in	r0, 0x3f	; 63
     56c:	f8 94       	cli
     56e:	de bf       	out	0x3e, r29	; 62
     570:	0f be       	out	0x3f, r0	; 63
     572:	cd bf       	out	0x3d, r28	; 61
     574:	cf 91       	pop	r28
     576:	df 91       	pop	r29
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	08 95       	ret

0000057e <LCD_Data>:

//Data Write
void LCD_Data(unsigned char data)
{
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	df 93       	push	r29
     584:	cf 93       	push	r28
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
     58a:	c9 54       	subi	r28, 0x49	; 73
     58c:	d0 40       	sbci	r29, 0x00	; 0
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	f8 94       	cli
     592:	de bf       	out	0x3e, r29	; 62
     594:	0f be       	out	0x3f, r0	; 63
     596:	cd bf       	out	0x3d, r28	; 61
     598:	9e 01       	movw	r18, r28
     59a:	27 5b       	subi	r18, 0xB7	; 183
     59c:	3f 4f       	sbci	r19, 0xFF	; 255
     59e:	f9 01       	movw	r30, r18
     5a0:	80 83       	st	Z, r24
	LCD_STRU = RS_BIT;
     5a2:	85 e3       	ldi	r24, 0x35	; 53
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	21 e0       	ldi	r18, 0x01	; 1
     5a8:	fc 01       	movw	r30, r24
     5aa:	20 83       	st	Z, r18

	LCD_DATA = data;
     5ac:	8b e3       	ldi	r24, 0x3B	; 59
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	9e 01       	movw	r18, r28
     5b2:	27 5b       	subi	r18, 0xB7	; 183
     5b4:	3f 4f       	sbci	r19, 0xFF	; 255
     5b6:	f9 01       	movw	r30, r18
     5b8:	20 81       	ld	r18, Z
     5ba:	fc 01       	movw	r30, r24
     5bc:	20 83       	st	Z, r18
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	a0 e8       	ldi	r26, 0x80	; 128
     5c4:	bf e3       	ldi	r27, 0x3F	; 63
     5c6:	89 83       	std	Y+1, r24	; 0x01
     5c8:	9a 83       	std	Y+2, r25	; 0x02
     5ca:	ab 83       	std	Y+3, r26	; 0x03
     5cc:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     5ce:	69 81       	ldd	r22, Y+1	; 0x01
     5d0:	7a 81       	ldd	r23, Y+2	; 0x02
     5d2:	8b 81       	ldd	r24, Y+3	; 0x03
     5d4:	9c 81       	ldd	r25, Y+4	; 0x04
     5d6:	2b ea       	ldi	r18, 0xAB	; 171
     5d8:	3a ea       	ldi	r19, 0xAA	; 170
     5da:	4a ea       	ldi	r20, 0xAA	; 170
     5dc:	50 e4       	ldi	r21, 0x40	; 64
     5de:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     5e2:	dc 01       	movw	r26, r24
     5e4:	cb 01       	movw	r24, r22
     5e6:	8d 83       	std	Y+5, r24	; 0x05
     5e8:	9e 83       	std	Y+6, r25	; 0x06
     5ea:	af 83       	std	Y+7, r26	; 0x07
     5ec:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     5ee:	11 e0       	ldi	r17, 0x01	; 1
     5f0:	6d 81       	ldd	r22, Y+5	; 0x05
     5f2:	7e 81       	ldd	r23, Y+6	; 0x06
     5f4:	8f 81       	ldd	r24, Y+7	; 0x07
     5f6:	98 85       	ldd	r25, Y+8	; 0x08
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	40 e8       	ldi	r20, 0x80	; 128
     5fe:	5f e3       	ldi	r21, 0x3F	; 63
     600:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
     604:	88 23       	and	r24, r24
     606:	0c f0       	brlt	.+2      	; 0x60a <LCD_Data+0x8c>
     608:	10 e0       	ldi	r17, 0x00	; 0
     60a:	11 23       	and	r17, r17
     60c:	19 f0       	breq	.+6      	; 0x614 <LCD_Data+0x96>
		__ticks = 1;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	89 87       	std	Y+9, r24	; 0x09
     612:	a3 c0       	rjmp	.+326    	; 0x75a <LCD_Data+0x1dc>
	else if (__tmp > 255)
     614:	11 e0       	ldi	r17, 0x01	; 1
     616:	6d 81       	ldd	r22, Y+5	; 0x05
     618:	7e 81       	ldd	r23, Y+6	; 0x06
     61a:	8f 81       	ldd	r24, Y+7	; 0x07
     61c:	98 85       	ldd	r25, Y+8	; 0x08
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	4f e7       	ldi	r20, 0x7F	; 127
     624:	53 e4       	ldi	r21, 0x43	; 67
     626:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
     62a:	18 16       	cp	r1, r24
     62c:	0c f0       	brlt	.+2      	; 0x630 <LCD_Data+0xb2>
     62e:	10 e0       	ldi	r17, 0x00	; 0
     630:	11 23       	and	r17, r17
     632:	09 f4       	brne	.+2      	; 0x636 <LCD_Data+0xb8>
     634:	89 c0       	rjmp	.+274    	; 0x748 <LCD_Data+0x1ca>
	{
		_delay_ms(__us / 1000.0);
     636:	69 81       	ldd	r22, Y+1	; 0x01
     638:	7a 81       	ldd	r23, Y+2	; 0x02
     63a:	8b 81       	ldd	r24, Y+3	; 0x03
     63c:	9c 81       	ldd	r25, Y+4	; 0x04
     63e:	20 e0       	ldi	r18, 0x00	; 0
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	4a e7       	ldi	r20, 0x7A	; 122
     644:	54 e4       	ldi	r21, 0x44	; 68
     646:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     64a:	dc 01       	movw	r26, r24
     64c:	cb 01       	movw	r24, r22
     64e:	8a 87       	std	Y+10, r24	; 0x0a
     650:	9b 87       	std	Y+11, r25	; 0x0b
     652:	ac 87       	std	Y+12, r26	; 0x0c
     654:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     656:	6a 85       	ldd	r22, Y+10	; 0x0a
     658:	7b 85       	ldd	r23, Y+11	; 0x0b
     65a:	8c 85       	ldd	r24, Y+12	; 0x0c
     65c:	9d 85       	ldd	r25, Y+13	; 0x0d
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	4a e7       	ldi	r20, 0x7A	; 122
     664:	55 e4       	ldi	r21, 0x45	; 69
     666:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     66a:	dc 01       	movw	r26, r24
     66c:	cb 01       	movw	r24, r22
     66e:	8e 87       	std	Y+14, r24	; 0x0e
     670:	9f 87       	std	Y+15, r25	; 0x0f
     672:	a8 8b       	std	Y+16, r26	; 0x10
     674:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     676:	11 e0       	ldi	r17, 0x01	; 1
     678:	6e 85       	ldd	r22, Y+14	; 0x0e
     67a:	7f 85       	ldd	r23, Y+15	; 0x0f
     67c:	88 89       	ldd	r24, Y+16	; 0x10
     67e:	99 89       	ldd	r25, Y+17	; 0x11
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	40 e8       	ldi	r20, 0x80	; 128
     686:	5f e3       	ldi	r21, 0x3F	; 63
     688:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
     68c:	88 23       	and	r24, r24
     68e:	0c f0       	brlt	.+2      	; 0x692 <LCD_Data+0x114>
     690:	10 e0       	ldi	r17, 0x00	; 0
     692:	11 23       	and	r17, r17
     694:	29 f0       	breq	.+10     	; 0x6a0 <LCD_Data+0x122>
		__ticks = 1;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	9b 8b       	std	Y+19, r25	; 0x13
     69c:	8a 8b       	std	Y+18, r24	; 0x12
     69e:	46 c0       	rjmp	.+140    	; 0x72c <LCD_Data+0x1ae>
	else if (__tmp > 65535)
     6a0:	11 e0       	ldi	r17, 0x01	; 1
     6a2:	6e 85       	ldd	r22, Y+14	; 0x0e
     6a4:	7f 85       	ldd	r23, Y+15	; 0x0f
     6a6:	88 89       	ldd	r24, Y+16	; 0x10
     6a8:	99 89       	ldd	r25, Y+17	; 0x11
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	3f ef       	ldi	r19, 0xFF	; 255
     6ae:	4f e7       	ldi	r20, 0x7F	; 127
     6b0:	57 e4       	ldi	r21, 0x47	; 71
     6b2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
     6b6:	18 16       	cp	r1, r24
     6b8:	0c f0       	brlt	.+2      	; 0x6bc <LCD_Data+0x13e>
     6ba:	10 e0       	ldi	r17, 0x00	; 0
     6bc:	11 23       	and	r17, r17
     6be:	61 f1       	breq	.+88     	; 0x718 <LCD_Data+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     6c0:	6a 85       	ldd	r22, Y+10	; 0x0a
     6c2:	7b 85       	ldd	r23, Y+11	; 0x0b
     6c4:	8c 85       	ldd	r24, Y+12	; 0x0c
     6c6:	9d 85       	ldd	r25, Y+13	; 0x0d
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e2       	ldi	r20, 0x20	; 32
     6ce:	51 e4       	ldi	r21, 0x41	; 65
     6d0:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     6d4:	dc 01       	movw	r26, r24
     6d6:	cb 01       	movw	r24, r22
     6d8:	bc 01       	movw	r22, r24
     6da:	cd 01       	movw	r24, r26
     6dc:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     6e0:	dc 01       	movw	r26, r24
     6e2:	cb 01       	movw	r24, r22
     6e4:	9b 8b       	std	Y+19, r25	; 0x13
     6e6:	8a 8b       	std	Y+18, r24	; 0x12
     6e8:	12 c0       	rjmp	.+36     	; 0x70e <LCD_Data+0x190>
     6ea:	80 e9       	ldi	r24, 0x90	; 144
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	9d 8b       	std	Y+21, r25	; 0x15
     6f0:	8c 8b       	std	Y+20, r24	; 0x14
     6f2:	8c 89       	ldd	r24, Y+20	; 0x14
     6f4:	9d 89       	ldd	r25, Y+21	; 0x15
     6f6:	8c 01       	movw	r16, r24
     6f8:	c8 01       	movw	r24, r16
     6fa:	01 97       	sbiw	r24, 0x01	; 1
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <LCD_Data+0x17c>
     6fe:	8c 01       	movw	r16, r24
     700:	1d 8b       	std	Y+21, r17	; 0x15
     702:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     704:	8a 89       	ldd	r24, Y+18	; 0x12
     706:	9b 89       	ldd	r25, Y+19	; 0x13
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	9b 8b       	std	Y+19, r25	; 0x13
     70c:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     70e:	8a 89       	ldd	r24, Y+18	; 0x12
     710:	9b 89       	ldd	r25, Y+19	; 0x13
     712:	00 97       	sbiw	r24, 0x00	; 0
     714:	51 f7       	brne	.-44     	; 0x6ea <LCD_Data+0x16c>
     716:	28 c0       	rjmp	.+80     	; 0x768 <LCD_Data+0x1ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     718:	6e 85       	ldd	r22, Y+14	; 0x0e
     71a:	7f 85       	ldd	r23, Y+15	; 0x0f
     71c:	88 89       	ldd	r24, Y+16	; 0x10
     71e:	99 89       	ldd	r25, Y+17	; 0x11
     720:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	9b 8b       	std	Y+19, r25	; 0x13
     72a:	8a 8b       	std	Y+18, r24	; 0x12
     72c:	8a 89       	ldd	r24, Y+18	; 0x12
     72e:	9b 89       	ldd	r25, Y+19	; 0x13
     730:	9f 8b       	std	Y+23, r25	; 0x17
     732:	8e 8b       	std	Y+22, r24	; 0x16
     734:	8e 89       	ldd	r24, Y+22	; 0x16
     736:	9f 89       	ldd	r25, Y+23	; 0x17
     738:	8c 01       	movw	r16, r24
     73a:	f8 01       	movw	r30, r16
     73c:	31 97       	sbiw	r30, 0x01	; 1
     73e:	f1 f7       	brne	.-4      	; 0x73c <LCD_Data+0x1be>
     740:	8f 01       	movw	r16, r30
     742:	1f 8b       	std	Y+23, r17	; 0x17
     744:	0e 8b       	std	Y+22, r16	; 0x16
     746:	10 c0       	rjmp	.+32     	; 0x768 <LCD_Data+0x1ea>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     748:	6d 81       	ldd	r22, Y+5	; 0x05
     74a:	7e 81       	ldd	r23, Y+6	; 0x06
     74c:	8f 81       	ldd	r24, Y+7	; 0x07
     74e:	98 85       	ldd	r25, Y+8	; 0x08
     750:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     754:	dc 01       	movw	r26, r24
     756:	cb 01       	movw	r24, r22
     758:	89 87       	std	Y+9, r24	; 0x09
     75a:	89 85       	ldd	r24, Y+9	; 0x09
     75c:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     75e:	88 8d       	ldd	r24, Y+24	; 0x18
     760:	18 2f       	mov	r17, r24
     762:	1a 95       	dec	r17
     764:	f1 f7       	brne	.-4      	; 0x762 <LCD_Data+0x1e4>
     766:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(1);

	LCD_STRU |= ENABLE_BIT;
     768:	85 e3       	ldi	r24, 0x35	; 53
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	25 e3       	ldi	r18, 0x35	; 53
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	f9 01       	movw	r30, r18
     772:	20 81       	ld	r18, Z
     774:	24 60       	ori	r18, 0x04	; 4
     776:	fc 01       	movw	r30, r24
     778:	20 83       	st	Z, r18
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	a0 e2       	ldi	r26, 0x20	; 32
     780:	b1 e4       	ldi	r27, 0x41	; 65
     782:	89 8f       	std	Y+25, r24	; 0x19
     784:	9a 8f       	std	Y+26, r25	; 0x1a
     786:	ab 8f       	std	Y+27, r26	; 0x1b
     788:	bc 8f       	std	Y+28, r27	; 0x1c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     78a:	69 8d       	ldd	r22, Y+25	; 0x19
     78c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     78e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     790:	9c 8d       	ldd	r25, Y+28	; 0x1c
     792:	2b ea       	ldi	r18, 0xAB	; 171
     794:	3a ea       	ldi	r19, 0xAA	; 170
     796:	4a ea       	ldi	r20, 0xAA	; 170
     798:	50 e4       	ldi	r21, 0x40	; 64
     79a:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     79e:	dc 01       	movw	r26, r24
     7a0:	cb 01       	movw	r24, r22
     7a2:	8d 8f       	std	Y+29, r24	; 0x1d
     7a4:	9e 8f       	std	Y+30, r25	; 0x1e
     7a6:	af 8f       	std	Y+31, r26	; 0x1f
     7a8:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
     7aa:	11 e0       	ldi	r17, 0x01	; 1
     7ac:	6d 8d       	ldd	r22, Y+29	; 0x1d
     7ae:	7e 8d       	ldd	r23, Y+30	; 0x1e
     7b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7b2:	98 a1       	ldd	r25, Y+32	; 0x20
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	40 e8       	ldi	r20, 0x80	; 128
     7ba:	5f e3       	ldi	r21, 0x3F	; 63
     7bc:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
     7c0:	88 23       	and	r24, r24
     7c2:	0c f0       	brlt	.+2      	; 0x7c6 <LCD_Data+0x248>
     7c4:	10 e0       	ldi	r17, 0x00	; 0
     7c6:	11 23       	and	r17, r17
     7c8:	19 f0       	breq	.+6      	; 0x7d0 <LCD_Data+0x252>
		__ticks = 1;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	89 a3       	std	Y+33, r24	; 0x21
     7ce:	a3 c0       	rjmp	.+326    	; 0x916 <LCD_Data+0x398>
	else if (__tmp > 255)
     7d0:	11 e0       	ldi	r17, 0x01	; 1
     7d2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     7d4:	7e 8d       	ldd	r23, Y+30	; 0x1e
     7d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7d8:	98 a1       	ldd	r25, Y+32	; 0x20
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	4f e7       	ldi	r20, 0x7F	; 127
     7e0:	53 e4       	ldi	r21, 0x43	; 67
     7e2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
     7e6:	18 16       	cp	r1, r24
     7e8:	0c f0       	brlt	.+2      	; 0x7ec <LCD_Data+0x26e>
     7ea:	10 e0       	ldi	r17, 0x00	; 0
     7ec:	11 23       	and	r17, r17
     7ee:	09 f4       	brne	.+2      	; 0x7f2 <LCD_Data+0x274>
     7f0:	89 c0       	rjmp	.+274    	; 0x904 <LCD_Data+0x386>
	{
		_delay_ms(__us / 1000.0);
     7f2:	69 8d       	ldd	r22, Y+25	; 0x19
     7f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     7f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	4a e7       	ldi	r20, 0x7A	; 122
     800:	54 e4       	ldi	r21, 0x44	; 68
     802:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     806:	dc 01       	movw	r26, r24
     808:	cb 01       	movw	r24, r22
     80a:	8a a3       	std	Y+34, r24	; 0x22
     80c:	9b a3       	std	Y+35, r25	; 0x23
     80e:	ac a3       	std	Y+36, r26	; 0x24
     810:	bd a3       	std	Y+37, r27	; 0x25
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     812:	6a a1       	ldd	r22, Y+34	; 0x22
     814:	7b a1       	ldd	r23, Y+35	; 0x23
     816:	8c a1       	ldd	r24, Y+36	; 0x24
     818:	9d a1       	ldd	r25, Y+37	; 0x25
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	4a e7       	ldi	r20, 0x7A	; 122
     820:	55 e4       	ldi	r21, 0x45	; 69
     822:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     826:	dc 01       	movw	r26, r24
     828:	cb 01       	movw	r24, r22
     82a:	8e a3       	std	Y+38, r24	; 0x26
     82c:	9f a3       	std	Y+39, r25	; 0x27
     82e:	a8 a7       	std	Y+40, r26	; 0x28
     830:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
     832:	11 e0       	ldi	r17, 0x01	; 1
     834:	6e a1       	ldd	r22, Y+38	; 0x26
     836:	7f a1       	ldd	r23, Y+39	; 0x27
     838:	88 a5       	ldd	r24, Y+40	; 0x28
     83a:	99 a5       	ldd	r25, Y+41	; 0x29
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 e8       	ldi	r20, 0x80	; 128
     842:	5f e3       	ldi	r21, 0x3F	; 63
     844:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
     848:	88 23       	and	r24, r24
     84a:	0c f0       	brlt	.+2      	; 0x84e <LCD_Data+0x2d0>
     84c:	10 e0       	ldi	r17, 0x00	; 0
     84e:	11 23       	and	r17, r17
     850:	29 f0       	breq	.+10     	; 0x85c <LCD_Data+0x2de>
		__ticks = 1;
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	9b a7       	std	Y+43, r25	; 0x2b
     858:	8a a7       	std	Y+42, r24	; 0x2a
     85a:	46 c0       	rjmp	.+140    	; 0x8e8 <LCD_Data+0x36a>
	else if (__tmp > 65535)
     85c:	11 e0       	ldi	r17, 0x01	; 1
     85e:	6e a1       	ldd	r22, Y+38	; 0x26
     860:	7f a1       	ldd	r23, Y+39	; 0x27
     862:	88 a5       	ldd	r24, Y+40	; 0x28
     864:	99 a5       	ldd	r25, Y+41	; 0x29
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	3f ef       	ldi	r19, 0xFF	; 255
     86a:	4f e7       	ldi	r20, 0x7F	; 127
     86c:	57 e4       	ldi	r21, 0x47	; 71
     86e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
     872:	18 16       	cp	r1, r24
     874:	0c f0       	brlt	.+2      	; 0x878 <LCD_Data+0x2fa>
     876:	10 e0       	ldi	r17, 0x00	; 0
     878:	11 23       	and	r17, r17
     87a:	61 f1       	breq	.+88     	; 0x8d4 <LCD_Data+0x356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     87c:	6a a1       	ldd	r22, Y+34	; 0x22
     87e:	7b a1       	ldd	r23, Y+35	; 0x23
     880:	8c a1       	ldd	r24, Y+36	; 0x24
     882:	9d a1       	ldd	r25, Y+37	; 0x25
     884:	20 e0       	ldi	r18, 0x00	; 0
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	40 e2       	ldi	r20, 0x20	; 32
     88a:	51 e4       	ldi	r21, 0x41	; 65
     88c:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     890:	dc 01       	movw	r26, r24
     892:	cb 01       	movw	r24, r22
     894:	bc 01       	movw	r22, r24
     896:	cd 01       	movw	r24, r26
     898:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     89c:	dc 01       	movw	r26, r24
     89e:	cb 01       	movw	r24, r22
     8a0:	9b a7       	std	Y+43, r25	; 0x2b
     8a2:	8a a7       	std	Y+42, r24	; 0x2a
     8a4:	12 c0       	rjmp	.+36     	; 0x8ca <LCD_Data+0x34c>
     8a6:	80 e9       	ldi	r24, 0x90	; 144
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	9d a7       	std	Y+45, r25	; 0x2d
     8ac:	8c a7       	std	Y+44, r24	; 0x2c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8ae:	8c a5       	ldd	r24, Y+44	; 0x2c
     8b0:	9d a5       	ldd	r25, Y+45	; 0x2d
     8b2:	8c 01       	movw	r16, r24
     8b4:	c8 01       	movw	r24, r16
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <LCD_Data+0x338>
     8ba:	8c 01       	movw	r16, r24
     8bc:	1d a7       	std	Y+45, r17	; 0x2d
     8be:	0c a7       	std	Y+44, r16	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8c0:	8a a5       	ldd	r24, Y+42	; 0x2a
     8c2:	9b a5       	ldd	r25, Y+43	; 0x2b
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	9b a7       	std	Y+43, r25	; 0x2b
     8c8:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ca:	8a a5       	ldd	r24, Y+42	; 0x2a
     8cc:	9b a5       	ldd	r25, Y+43	; 0x2b
     8ce:	00 97       	sbiw	r24, 0x00	; 0
     8d0:	51 f7       	brne	.-44     	; 0x8a6 <LCD_Data+0x328>
     8d2:	28 c0       	rjmp	.+80     	; 0x924 <LCD_Data+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d4:	6e a1       	ldd	r22, Y+38	; 0x26
     8d6:	7f a1       	ldd	r23, Y+39	; 0x27
     8d8:	88 a5       	ldd	r24, Y+40	; 0x28
     8da:	99 a5       	ldd	r25, Y+41	; 0x29
     8dc:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     8e0:	dc 01       	movw	r26, r24
     8e2:	cb 01       	movw	r24, r22
     8e4:	9b a7       	std	Y+43, r25	; 0x2b
     8e6:	8a a7       	std	Y+42, r24	; 0x2a
     8e8:	8a a5       	ldd	r24, Y+42	; 0x2a
     8ea:	9b a5       	ldd	r25, Y+43	; 0x2b
     8ec:	9f a7       	std	Y+47, r25	; 0x2f
     8ee:	8e a7       	std	Y+46, r24	; 0x2e
     8f0:	8e a5       	ldd	r24, Y+46	; 0x2e
     8f2:	9f a5       	ldd	r25, Y+47	; 0x2f
     8f4:	8c 01       	movw	r16, r24
     8f6:	f8 01       	movw	r30, r16
     8f8:	31 97       	sbiw	r30, 0x01	; 1
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <LCD_Data+0x37a>
     8fc:	8f 01       	movw	r16, r30
     8fe:	1f a7       	std	Y+47, r17	; 0x2f
     900:	0e a7       	std	Y+46, r16	; 0x2e
     902:	10 c0       	rjmp	.+32     	; 0x924 <LCD_Data+0x3a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     904:	6d 8d       	ldd	r22, Y+29	; 0x1d
     906:	7e 8d       	ldd	r23, Y+30	; 0x1e
     908:	8f 8d       	ldd	r24, Y+31	; 0x1f
     90a:	98 a1       	ldd	r25, Y+32	; 0x20
     90c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     910:	dc 01       	movw	r26, r24
     912:	cb 01       	movw	r24, r22
     914:	89 a3       	std	Y+33, r24	; 0x21
     916:	89 a1       	ldd	r24, Y+33	; 0x21
     918:	88 ab       	std	Y+48, r24	; 0x30
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     91a:	88 a9       	ldd	r24, Y+48	; 0x30
     91c:	18 2f       	mov	r17, r24
     91e:	1a 95       	dec	r17
     920:	f1 f7       	brne	.-4      	; 0x91e <LCD_Data+0x3a0>
     922:	18 ab       	std	Y+48, r17	; 0x30
	_delay_us(10);

	LCD_STRU = 0;
     924:	85 e3       	ldi	r24, 0x35	; 53
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	fc 01       	movw	r30, r24
     92a:	10 82       	st	Z, r1
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	a8 e4       	ldi	r26, 0x48	; 72
     932:	b2 e4       	ldi	r27, 0x42	; 66
     934:	89 ab       	std	Y+49, r24	; 0x31
     936:	9a ab       	std	Y+50, r25	; 0x32
     938:	ab ab       	std	Y+51, r26	; 0x33
     93a:	bc ab       	std	Y+52, r27	; 0x34
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     93c:	69 a9       	ldd	r22, Y+49	; 0x31
     93e:	7a a9       	ldd	r23, Y+50	; 0x32
     940:	8b a9       	ldd	r24, Y+51	; 0x33
     942:	9c a9       	ldd	r25, Y+52	; 0x34
     944:	2b ea       	ldi	r18, 0xAB	; 171
     946:	3a ea       	ldi	r19, 0xAA	; 170
     948:	4a ea       	ldi	r20, 0xAA	; 170
     94a:	50 e4       	ldi	r21, 0x40	; 64
     94c:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     950:	dc 01       	movw	r26, r24
     952:	cb 01       	movw	r24, r22
     954:	8d ab       	std	Y+53, r24	; 0x35
     956:	9e ab       	std	Y+54, r25	; 0x36
     958:	af ab       	std	Y+55, r26	; 0x37
     95a:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
     95c:	11 e0       	ldi	r17, 0x01	; 1
     95e:	6d a9       	ldd	r22, Y+53	; 0x35
     960:	7e a9       	ldd	r23, Y+54	; 0x36
     962:	8f a9       	ldd	r24, Y+55	; 0x37
     964:	98 ad       	ldd	r25, Y+56	; 0x38
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	40 e8       	ldi	r20, 0x80	; 128
     96c:	5f e3       	ldi	r21, 0x3F	; 63
     96e:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
     972:	88 23       	and	r24, r24
     974:	0c f0       	brlt	.+2      	; 0x978 <LCD_Data+0x3fa>
     976:	10 e0       	ldi	r17, 0x00	; 0
     978:	11 23       	and	r17, r17
     97a:	19 f0       	breq	.+6      	; 0x982 <LCD_Data+0x404>
		__ticks = 1;
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	89 af       	std	Y+57, r24	; 0x39
     980:	e6 c0       	rjmp	.+460    	; 0xb4e <LCD_Data+0x5d0>
	else if (__tmp > 255)
     982:	11 e0       	ldi	r17, 0x01	; 1
     984:	6d a9       	ldd	r22, Y+53	; 0x35
     986:	7e a9       	ldd	r23, Y+54	; 0x36
     988:	8f a9       	ldd	r24, Y+55	; 0x37
     98a:	98 ad       	ldd	r25, Y+56	; 0x38
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	4f e7       	ldi	r20, 0x7F	; 127
     992:	53 e4       	ldi	r21, 0x43	; 67
     994:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
     998:	18 16       	cp	r1, r24
     99a:	0c f0       	brlt	.+2      	; 0x99e <LCD_Data+0x420>
     99c:	10 e0       	ldi	r17, 0x00	; 0
     99e:	11 23       	and	r17, r17
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <LCD_Data+0x426>
     9a2:	cc c0       	rjmp	.+408    	; 0xb3c <LCD_Data+0x5be>
	{
		_delay_ms(__us / 1000.0);
     9a4:	69 a9       	ldd	r22, Y+49	; 0x31
     9a6:	7a a9       	ldd	r23, Y+50	; 0x32
     9a8:	8b a9       	ldd	r24, Y+51	; 0x33
     9aa:	9c a9       	ldd	r25, Y+52	; 0x34
     9ac:	20 e0       	ldi	r18, 0x00	; 0
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	4a e7       	ldi	r20, 0x7A	; 122
     9b2:	54 e4       	ldi	r21, 0x44	; 68
     9b4:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     9b8:	dc 01       	movw	r26, r24
     9ba:	cb 01       	movw	r24, r22
     9bc:	8a af       	std	Y+58, r24	; 0x3a
     9be:	9b af       	std	Y+59, r25	; 0x3b
     9c0:	ac af       	std	Y+60, r26	; 0x3c
     9c2:	bd af       	std	Y+61, r27	; 0x3d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     9c4:	8e 01       	movw	r16, r28
     9c6:	02 5c       	subi	r16, 0xC2	; 194
     9c8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ca:	6a ad       	ldd	r22, Y+58	; 0x3a
     9cc:	7b ad       	ldd	r23, Y+59	; 0x3b
     9ce:	8c ad       	ldd	r24, Y+60	; 0x3c
     9d0:	9d ad       	ldd	r25, Y+61	; 0x3d
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	4a e7       	ldi	r20, 0x7A	; 122
     9d8:	55 e4       	ldi	r21, 0x45	; 69
     9da:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     9de:	dc 01       	movw	r26, r24
     9e0:	cb 01       	movw	r24, r22
     9e2:	f8 01       	movw	r30, r16
     9e4:	80 83       	st	Z, r24
     9e6:	91 83       	std	Z+1, r25	; 0x01
     9e8:	a2 83       	std	Z+2, r26	; 0x02
     9ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9ec:	ce 01       	movw	r24, r28
     9ee:	ce 96       	adiw	r24, 0x3e	; 62
     9f0:	11 e0       	ldi	r17, 0x01	; 1
     9f2:	fc 01       	movw	r30, r24
     9f4:	60 81       	ld	r22, Z
     9f6:	71 81       	ldd	r23, Z+1	; 0x01
     9f8:	82 81       	ldd	r24, Z+2	; 0x02
     9fa:	93 81       	ldd	r25, Z+3	; 0x03
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	40 e8       	ldi	r20, 0x80	; 128
     a02:	5f e3       	ldi	r21, 0x3F	; 63
     a04:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
     a08:	88 23       	and	r24, r24
     a0a:	0c f0       	brlt	.+2      	; 0xa0e <LCD_Data+0x490>
     a0c:	10 e0       	ldi	r17, 0x00	; 0
     a0e:	11 23       	and	r17, r17
     a10:	49 f0       	breq	.+18     	; 0xa24 <LCD_Data+0x4a6>
		__ticks = 1;
     a12:	ce 01       	movw	r24, r28
     a14:	8e 5b       	subi	r24, 0xBE	; 190
     a16:	9f 4f       	sbci	r25, 0xFF	; 255
     a18:	21 e0       	ldi	r18, 0x01	; 1
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	fc 01       	movw	r30, r24
     a1e:	31 83       	std	Z+1, r19	; 0x01
     a20:	20 83       	st	Z, r18
     a22:	6e c0       	rjmp	.+220    	; 0xb00 <LCD_Data+0x582>
	else if (__tmp > 65535)
     a24:	ce 01       	movw	r24, r28
     a26:	ce 96       	adiw	r24, 0x3e	; 62
     a28:	11 e0       	ldi	r17, 0x01	; 1
     a2a:	fc 01       	movw	r30, r24
     a2c:	60 81       	ld	r22, Z
     a2e:	71 81       	ldd	r23, Z+1	; 0x01
     a30:	82 81       	ldd	r24, Z+2	; 0x02
     a32:	93 81       	ldd	r25, Z+3	; 0x03
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	3f ef       	ldi	r19, 0xFF	; 255
     a38:	4f e7       	ldi	r20, 0x7F	; 127
     a3a:	57 e4       	ldi	r21, 0x47	; 71
     a3c:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
     a40:	18 16       	cp	r1, r24
     a42:	0c f0       	brlt	.+2      	; 0xa46 <LCD_Data+0x4c8>
     a44:	10 e0       	ldi	r17, 0x00	; 0
     a46:	11 23       	and	r17, r17
     a48:	09 f4       	brne	.+2      	; 0xa4c <LCD_Data+0x4ce>
     a4a:	49 c0       	rjmp	.+146    	; 0xade <LCD_Data+0x560>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a4c:	6a ad       	ldd	r22, Y+58	; 0x3a
     a4e:	7b ad       	ldd	r23, Y+59	; 0x3b
     a50:	8c ad       	ldd	r24, Y+60	; 0x3c
     a52:	9d ad       	ldd	r25, Y+61	; 0x3d
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	40 e2       	ldi	r20, 0x20	; 32
     a5a:	51 e4       	ldi	r21, 0x41	; 65
     a5c:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     a60:	dc 01       	movw	r26, r24
     a62:	cb 01       	movw	r24, r22
     a64:	8e 01       	movw	r16, r28
     a66:	0e 5b       	subi	r16, 0xBE	; 190
     a68:	1f 4f       	sbci	r17, 0xFF	; 255
     a6a:	bc 01       	movw	r22, r24
     a6c:	cd 01       	movw	r24, r26
     a6e:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     a72:	dc 01       	movw	r26, r24
     a74:	cb 01       	movw	r24, r22
     a76:	f8 01       	movw	r30, r16
     a78:	91 83       	std	Z+1, r25	; 0x01
     a7a:	80 83       	st	Z, r24
     a7c:	27 c0       	rjmp	.+78     	; 0xacc <LCD_Data+0x54e>
     a7e:	ce 01       	movw	r24, r28
     a80:	8c 5b       	subi	r24, 0xBC	; 188
     a82:	9f 4f       	sbci	r25, 0xFF	; 255
     a84:	20 e9       	ldi	r18, 0x90	; 144
     a86:	31 e0       	ldi	r19, 0x01	; 1
     a88:	fc 01       	movw	r30, r24
     a8a:	31 83       	std	Z+1, r19	; 0x01
     a8c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a8e:	ce 01       	movw	r24, r28
     a90:	8c 5b       	subi	r24, 0xBC	; 188
     a92:	9f 4f       	sbci	r25, 0xFF	; 255
     a94:	fc 01       	movw	r30, r24
     a96:	80 81       	ld	r24, Z
     a98:	91 81       	ldd	r25, Z+1	; 0x01
     a9a:	8c 01       	movw	r16, r24
     a9c:	c8 01       	movw	r24, r16
     a9e:	01 97       	sbiw	r24, 0x01	; 1
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <LCD_Data+0x520>
     aa2:	8c 01       	movw	r16, r24
     aa4:	ce 01       	movw	r24, r28
     aa6:	8c 5b       	subi	r24, 0xBC	; 188
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
     aaa:	fc 01       	movw	r30, r24
     aac:	11 83       	std	Z+1, r17	; 0x01
     aae:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ab0:	ce 01       	movw	r24, r28
     ab2:	8e 5b       	subi	r24, 0xBE	; 190
     ab4:	9f 4f       	sbci	r25, 0xFF	; 255
     ab6:	9e 01       	movw	r18, r28
     ab8:	2e 5b       	subi	r18, 0xBE	; 190
     aba:	3f 4f       	sbci	r19, 0xFF	; 255
     abc:	f9 01       	movw	r30, r18
     abe:	20 81       	ld	r18, Z
     ac0:	31 81       	ldd	r19, Z+1	; 0x01
     ac2:	21 50       	subi	r18, 0x01	; 1
     ac4:	30 40       	sbci	r19, 0x00	; 0
     ac6:	fc 01       	movw	r30, r24
     ac8:	31 83       	std	Z+1, r19	; 0x01
     aca:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     acc:	ce 01       	movw	r24, r28
     ace:	8e 5b       	subi	r24, 0xBE	; 190
     ad0:	9f 4f       	sbci	r25, 0xFF	; 255
     ad2:	fc 01       	movw	r30, r24
     ad4:	80 81       	ld	r24, Z
     ad6:	91 81       	ldd	r25, Z+1	; 0x01
     ad8:	00 97       	sbiw	r24, 0x00	; 0
     ada:	89 f6       	brne	.-94     	; 0xa7e <LCD_Data+0x500>
     adc:	4b c0       	rjmp	.+150    	; 0xb74 <LCD_Data+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ade:	8e 01       	movw	r16, r28
     ae0:	0e 5b       	subi	r16, 0xBE	; 190
     ae2:	1f 4f       	sbci	r17, 0xFF	; 255
     ae4:	ce 01       	movw	r24, r28
     ae6:	ce 96       	adiw	r24, 0x3e	; 62
     ae8:	fc 01       	movw	r30, r24
     aea:	60 81       	ld	r22, Z
     aec:	71 81       	ldd	r23, Z+1	; 0x01
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     af6:	dc 01       	movw	r26, r24
     af8:	cb 01       	movw	r24, r22
     afa:	f8 01       	movw	r30, r16
     afc:	91 83       	std	Z+1, r25	; 0x01
     afe:	80 83       	st	Z, r24
     b00:	ce 01       	movw	r24, r28
     b02:	8a 5b       	subi	r24, 0xBA	; 186
     b04:	9f 4f       	sbci	r25, 0xFF	; 255
     b06:	9e 01       	movw	r18, r28
     b08:	2e 5b       	subi	r18, 0xBE	; 190
     b0a:	3f 4f       	sbci	r19, 0xFF	; 255
     b0c:	f9 01       	movw	r30, r18
     b0e:	20 81       	ld	r18, Z
     b10:	31 81       	ldd	r19, Z+1	; 0x01
     b12:	fc 01       	movw	r30, r24
     b14:	31 83       	std	Z+1, r19	; 0x01
     b16:	20 83       	st	Z, r18
     b18:	ce 01       	movw	r24, r28
     b1a:	8a 5b       	subi	r24, 0xBA	; 186
     b1c:	9f 4f       	sbci	r25, 0xFF	; 255
     b1e:	fc 01       	movw	r30, r24
     b20:	80 81       	ld	r24, Z
     b22:	91 81       	ldd	r25, Z+1	; 0x01
     b24:	8c 01       	movw	r16, r24
     b26:	c8 01       	movw	r24, r16
     b28:	01 97       	sbiw	r24, 0x01	; 1
     b2a:	f1 f7       	brne	.-4      	; 0xb28 <LCD_Data+0x5aa>
     b2c:	8c 01       	movw	r16, r24
     b2e:	ce 01       	movw	r24, r28
     b30:	8a 5b       	subi	r24, 0xBA	; 186
     b32:	9f 4f       	sbci	r25, 0xFF	; 255
     b34:	fc 01       	movw	r30, r24
     b36:	11 83       	std	Z+1, r17	; 0x01
     b38:	00 83       	st	Z, r16
     b3a:	1c c0       	rjmp	.+56     	; 0xb74 <LCD_Data+0x5f6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     b3c:	6d a9       	ldd	r22, Y+53	; 0x35
     b3e:	7e a9       	ldd	r23, Y+54	; 0x36
     b40:	8f a9       	ldd	r24, Y+55	; 0x37
     b42:	98 ad       	ldd	r25, Y+56	; 0x38
     b44:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     b48:	dc 01       	movw	r26, r24
     b4a:	cb 01       	movw	r24, r22
     b4c:	89 af       	std	Y+57, r24	; 0x39
     b4e:	ce 01       	movw	r24, r28
     b50:	88 5b       	subi	r24, 0xB8	; 184
     b52:	9f 4f       	sbci	r25, 0xFF	; 255
     b54:	29 ad       	ldd	r18, Y+57	; 0x39
     b56:	fc 01       	movw	r30, r24
     b58:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b5a:	ce 01       	movw	r24, r28
     b5c:	88 5b       	subi	r24, 0xB8	; 184
     b5e:	9f 4f       	sbci	r25, 0xFF	; 255
     b60:	fc 01       	movw	r30, r24
     b62:	80 81       	ld	r24, Z
     b64:	18 2f       	mov	r17, r24
     b66:	1a 95       	dec	r17
     b68:	f1 f7       	brne	.-4      	; 0xb66 <LCD_Data+0x5e8>
     b6a:	ce 01       	movw	r24, r28
     b6c:	88 5b       	subi	r24, 0xB8	; 184
     b6e:	9f 4f       	sbci	r25, 0xFF	; 255
     b70:	fc 01       	movw	r30, r24
     b72:	10 83       	st	Z, r17
	_delay_us(50);
}
     b74:	c7 5b       	subi	r28, 0xB7	; 183
     b76:	df 4f       	sbci	r29, 0xFF	; 255
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	f8 94       	cli
     b7c:	de bf       	out	0x3e, r29	; 62
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	cd bf       	out	0x3d, r28	; 61
     b82:	cf 91       	pop	r28
     b84:	df 91       	pop	r29
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	08 95       	ret

00000b8c <InitLCD>:

//Init LCD
void InitLCD()
{
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	cc 54       	subi	r28, 0x4C	; 76
     b9a:	d0 40       	sbci	r29, 0x00	; 0
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
	LCD_DATA = 0x00;
     ba6:	8b e3       	ldi	r24, 0x3B	; 59
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	fc 01       	movw	r30, r24
     bac:	10 82       	st	Z, r1
	LCD_STRU = 0x00;
     bae:	85 e3       	ldi	r24, 0x35	; 53
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	fc 01       	movw	r30, r24
     bb4:	10 82       	st	Z, r1
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	a8 ec       	ldi	r26, 0xC8	; 200
     bbc:	b2 e4       	ldi	r27, 0x42	; 66
     bbe:	89 83       	std	Y+1, r24	; 0x01
     bc0:	9a 83       	std	Y+2, r25	; 0x02
     bc2:	ab 83       	std	Y+3, r26	; 0x03
     bc4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     bc6:	69 81       	ldd	r22, Y+1	; 0x01
     bc8:	7a 81       	ldd	r23, Y+2	; 0x02
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	9c 81       	ldd	r25, Y+4	; 0x04
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	4a e7       	ldi	r20, 0x7A	; 122
     bd4:	55 e4       	ldi	r21, 0x45	; 69
     bd6:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     bda:	dc 01       	movw	r26, r24
     bdc:	cb 01       	movw	r24, r22
     bde:	8d 83       	std	Y+5, r24	; 0x05
     be0:	9e 83       	std	Y+6, r25	; 0x06
     be2:	af 83       	std	Y+7, r26	; 0x07
     be4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     be6:	11 e0       	ldi	r17, 0x01	; 1
     be8:	6d 81       	ldd	r22, Y+5	; 0x05
     bea:	7e 81       	ldd	r23, Y+6	; 0x06
     bec:	8f 81       	ldd	r24, Y+7	; 0x07
     bee:	98 85       	ldd	r25, Y+8	; 0x08
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e8       	ldi	r20, 0x80	; 128
     bf6:	5f e3       	ldi	r21, 0x3F	; 63
     bf8:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
     bfc:	88 23       	and	r24, r24
     bfe:	0c f0       	brlt	.+2      	; 0xc02 <InitLCD+0x76>
     c00:	10 e0       	ldi	r17, 0x00	; 0
     c02:	11 23       	and	r17, r17
     c04:	29 f0       	breq	.+10     	; 0xc10 <InitLCD+0x84>
		__ticks = 1;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9a 87       	std	Y+10, r25	; 0x0a
     c0c:	89 87       	std	Y+9, r24	; 0x09
     c0e:	46 c0       	rjmp	.+140    	; 0xc9c <InitLCD+0x110>
	else if (__tmp > 65535)
     c10:	11 e0       	ldi	r17, 0x01	; 1
     c12:	6d 81       	ldd	r22, Y+5	; 0x05
     c14:	7e 81       	ldd	r23, Y+6	; 0x06
     c16:	8f 81       	ldd	r24, Y+7	; 0x07
     c18:	98 85       	ldd	r25, Y+8	; 0x08
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	3f ef       	ldi	r19, 0xFF	; 255
     c1e:	4f e7       	ldi	r20, 0x7F	; 127
     c20:	57 e4       	ldi	r21, 0x47	; 71
     c22:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
     c26:	18 16       	cp	r1, r24
     c28:	0c f0       	brlt	.+2      	; 0xc2c <InitLCD+0xa0>
     c2a:	10 e0       	ldi	r17, 0x00	; 0
     c2c:	11 23       	and	r17, r17
     c2e:	61 f1       	breq	.+88     	; 0xc88 <InitLCD+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c30:	69 81       	ldd	r22, Y+1	; 0x01
     c32:	7a 81       	ldd	r23, Y+2	; 0x02
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	9c 81       	ldd	r25, Y+4	; 0x04
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	40 e2       	ldi	r20, 0x20	; 32
     c3e:	51 e4       	ldi	r21, 0x41	; 65
     c40:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	bc 01       	movw	r22, r24
     c4a:	cd 01       	movw	r24, r26
     c4c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	9a 87       	std	Y+10, r25	; 0x0a
     c56:	89 87       	std	Y+9, r24	; 0x09
     c58:	12 c0       	rjmp	.+36     	; 0xc7e <InitLCD+0xf2>
     c5a:	80 e9       	ldi	r24, 0x90	; 144
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	9c 87       	std	Y+12, r25	; 0x0c
     c60:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c62:	8b 85       	ldd	r24, Y+11	; 0x0b
     c64:	9c 85       	ldd	r25, Y+12	; 0x0c
     c66:	8c 01       	movw	r16, r24
     c68:	c8 01       	movw	r24, r16
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <InitLCD+0xde>
     c6e:	8c 01       	movw	r16, r24
     c70:	1c 87       	std	Y+12, r17	; 0x0c
     c72:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c74:	89 85       	ldd	r24, Y+9	; 0x09
     c76:	9a 85       	ldd	r25, Y+10	; 0x0a
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	9a 87       	std	Y+10, r25	; 0x0a
     c7c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c7e:	89 85       	ldd	r24, Y+9	; 0x09
     c80:	9a 85       	ldd	r25, Y+10	; 0x0a
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	51 f7       	brne	.-44     	; 0xc5a <InitLCD+0xce>
     c86:	17 c0       	rjmp	.+46     	; 0xcb6 <InitLCD+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c88:	6d 81       	ldd	r22, Y+5	; 0x05
     c8a:	7e 81       	ldd	r23, Y+6	; 0x06
     c8c:	8f 81       	ldd	r24, Y+7	; 0x07
     c8e:	98 85       	ldd	r25, Y+8	; 0x08
     c90:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     c94:	dc 01       	movw	r26, r24
     c96:	cb 01       	movw	r24, r22
     c98:	9a 87       	std	Y+10, r25	; 0x0a
     c9a:	89 87       	std	Y+9, r24	; 0x09
     c9c:	89 85       	ldd	r24, Y+9	; 0x09
     c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca0:	9e 87       	std	Y+14, r25	; 0x0e
     ca2:	8d 87       	std	Y+13, r24	; 0x0d
     ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ca8:	8c 01       	movw	r16, r24
     caa:	f8 01       	movw	r30, r16
     cac:	31 97       	sbiw	r30, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <InitLCD+0x120>
     cb0:	8f 01       	movw	r16, r30
     cb2:	1e 87       	std	Y+14, r17	; 0x0e
     cb4:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(100);

	//Function set
	LCD_Command(0x3C);
     cb6:	8c e3       	ldi	r24, 0x3C	; 60
     cb8:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	a0 e2       	ldi	r26, 0x20	; 32
     cc2:	b1 e4       	ldi	r27, 0x41	; 65
     cc4:	8f 87       	std	Y+15, r24	; 0x0f
     cc6:	98 8b       	std	Y+16, r25	; 0x10
     cc8:	a9 8b       	std	Y+17, r26	; 0x11
     cca:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     ccc:	6f 85       	ldd	r22, Y+15	; 0x0f
     cce:	78 89       	ldd	r23, Y+16	; 0x10
     cd0:	89 89       	ldd	r24, Y+17	; 0x11
     cd2:	9a 89       	ldd	r25, Y+18	; 0x12
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	4a e7       	ldi	r20, 0x7A	; 122
     cda:	55 e4       	ldi	r21, 0x45	; 69
     cdc:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	8b 8b       	std	Y+19, r24	; 0x13
     ce6:	9c 8b       	std	Y+20, r25	; 0x14
     ce8:	ad 8b       	std	Y+21, r26	; 0x15
     cea:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     cec:	11 e0       	ldi	r17, 0x01	; 1
     cee:	6b 89       	ldd	r22, Y+19	; 0x13
     cf0:	7c 89       	ldd	r23, Y+20	; 0x14
     cf2:	8d 89       	ldd	r24, Y+21	; 0x15
     cf4:	9e 89       	ldd	r25, Y+22	; 0x16
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	0c f0       	brlt	.+2      	; 0xd08 <InitLCD+0x17c>
     d06:	10 e0       	ldi	r17, 0x00	; 0
     d08:	11 23       	and	r17, r17
     d0a:	29 f0       	breq	.+10     	; 0xd16 <InitLCD+0x18a>
		__ticks = 1;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	98 8f       	std	Y+24, r25	; 0x18
     d12:	8f 8b       	std	Y+23, r24	; 0x17
     d14:	46 c0       	rjmp	.+140    	; 0xda2 <InitLCD+0x216>
	else if (__tmp > 65535)
     d16:	11 e0       	ldi	r17, 0x01	; 1
     d18:	6b 89       	ldd	r22, Y+19	; 0x13
     d1a:	7c 89       	ldd	r23, Y+20	; 0x14
     d1c:	8d 89       	ldd	r24, Y+21	; 0x15
     d1e:	9e 89       	ldd	r25, Y+22	; 0x16
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	3f ef       	ldi	r19, 0xFF	; 255
     d24:	4f e7       	ldi	r20, 0x7F	; 127
     d26:	57 e4       	ldi	r21, 0x47	; 71
     d28:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
     d2c:	18 16       	cp	r1, r24
     d2e:	0c f0       	brlt	.+2      	; 0xd32 <InitLCD+0x1a6>
     d30:	10 e0       	ldi	r17, 0x00	; 0
     d32:	11 23       	and	r17, r17
     d34:	61 f1       	breq	.+88     	; 0xd8e <InitLCD+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d36:	6f 85       	ldd	r22, Y+15	; 0x0f
     d38:	78 89       	ldd	r23, Y+16	; 0x10
     d3a:	89 89       	ldd	r24, Y+17	; 0x11
     d3c:	9a 89       	ldd	r25, Y+18	; 0x12
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	40 e2       	ldi	r20, 0x20	; 32
     d44:	51 e4       	ldi	r21, 0x41	; 65
     d46:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	bc 01       	movw	r22, r24
     d50:	cd 01       	movw	r24, r26
     d52:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	98 8f       	std	Y+24, r25	; 0x18
     d5c:	8f 8b       	std	Y+23, r24	; 0x17
     d5e:	12 c0       	rjmp	.+36     	; 0xd84 <InitLCD+0x1f8>
     d60:	80 e9       	ldi	r24, 0x90	; 144
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	9a 8f       	std	Y+26, r25	; 0x1a
     d66:	89 8f       	std	Y+25, r24	; 0x19
     d68:	89 8d       	ldd	r24, Y+25	; 0x19
     d6a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d6c:	8c 01       	movw	r16, r24
     d6e:	c8 01       	movw	r24, r16
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	f1 f7       	brne	.-4      	; 0xd70 <InitLCD+0x1e4>
     d74:	8c 01       	movw	r16, r24
     d76:	1a 8f       	std	Y+26, r17	; 0x1a
     d78:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d7a:	8f 89       	ldd	r24, Y+23	; 0x17
     d7c:	98 8d       	ldd	r25, Y+24	; 0x18
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	98 8f       	std	Y+24, r25	; 0x18
     d82:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d84:	8f 89       	ldd	r24, Y+23	; 0x17
     d86:	98 8d       	ldd	r25, Y+24	; 0x18
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	51 f7       	brne	.-44     	; 0xd60 <InitLCD+0x1d4>
     d8c:	17 c0       	rjmp	.+46     	; 0xdbc <InitLCD+0x230>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d8e:	6b 89       	ldd	r22, Y+19	; 0x13
     d90:	7c 89       	ldd	r23, Y+20	; 0x14
     d92:	8d 89       	ldd	r24, Y+21	; 0x15
     d94:	9e 89       	ldd	r25, Y+22	; 0x16
     d96:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	98 8f       	std	Y+24, r25	; 0x18
     da0:	8f 8b       	std	Y+23, r24	; 0x17
     da2:	8f 89       	ldd	r24, Y+23	; 0x17
     da4:	98 8d       	ldd	r25, Y+24	; 0x18
     da6:	9c 8f       	std	Y+28, r25	; 0x1c
     da8:	8b 8f       	std	Y+27, r24	; 0x1b
     daa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dae:	8c 01       	movw	r16, r24
     db0:	f8 01       	movw	r30, r16
     db2:	31 97       	sbiw	r30, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <InitLCD+0x226>
     db6:	8f 01       	movw	r16, r30
     db8:	1c 8f       	std	Y+28, r17	; 0x1c
     dba:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(10);

	//Function set
	LCD_Command(0x3C);
     dbc:	8c e3       	ldi	r24, 0x3C	; 60
     dbe:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	a8 ec       	ldi	r26, 0xC8	; 200
     dc8:	b2 e4       	ldi	r27, 0x42	; 66
     dca:	8d 8f       	std	Y+29, r24	; 0x1d
     dcc:	9e 8f       	std	Y+30, r25	; 0x1e
     dce:	af 8f       	std	Y+31, r26	; 0x1f
     dd0:	b8 a3       	std	Y+32, r27	; 0x20
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     dd2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     dd4:	7e 8d       	ldd	r23, Y+30	; 0x1e
     dd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dd8:	98 a1       	ldd	r25, Y+32	; 0x20
     dda:	2b ea       	ldi	r18, 0xAB	; 171
     ddc:	3a ea       	ldi	r19, 0xAA	; 170
     dde:	4a ea       	ldi	r20, 0xAA	; 170
     de0:	50 e4       	ldi	r21, 0x40	; 64
     de2:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	89 a3       	std	Y+33, r24	; 0x21
     dec:	9a a3       	std	Y+34, r25	; 0x22
     dee:	ab a3       	std	Y+35, r26	; 0x23
     df0:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     df2:	11 e0       	ldi	r17, 0x01	; 1
     df4:	69 a1       	ldd	r22, Y+33	; 0x21
     df6:	7a a1       	ldd	r23, Y+34	; 0x22
     df8:	8b a1       	ldd	r24, Y+35	; 0x23
     dfa:	9c a1       	ldd	r25, Y+36	; 0x24
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	40 e8       	ldi	r20, 0x80	; 128
     e02:	5f e3       	ldi	r21, 0x3F	; 63
     e04:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
     e08:	88 23       	and	r24, r24
     e0a:	0c f0       	brlt	.+2      	; 0xe0e <InitLCD+0x282>
     e0c:	10 e0       	ldi	r17, 0x00	; 0
     e0e:	11 23       	and	r17, r17
     e10:	19 f0       	breq	.+6      	; 0xe18 <InitLCD+0x28c>
		__ticks = 1;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	8d a3       	std	Y+37, r24	; 0x25
     e16:	a3 c0       	rjmp	.+326    	; 0xf5e <InitLCD+0x3d2>
	else if (__tmp > 255)
     e18:	11 e0       	ldi	r17, 0x01	; 1
     e1a:	69 a1       	ldd	r22, Y+33	; 0x21
     e1c:	7a a1       	ldd	r23, Y+34	; 0x22
     e1e:	8b a1       	ldd	r24, Y+35	; 0x23
     e20:	9c a1       	ldd	r25, Y+36	; 0x24
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	4f e7       	ldi	r20, 0x7F	; 127
     e28:	53 e4       	ldi	r21, 0x43	; 67
     e2a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
     e2e:	18 16       	cp	r1, r24
     e30:	0c f0       	brlt	.+2      	; 0xe34 <InitLCD+0x2a8>
     e32:	10 e0       	ldi	r17, 0x00	; 0
     e34:	11 23       	and	r17, r17
     e36:	09 f4       	brne	.+2      	; 0xe3a <InitLCD+0x2ae>
     e38:	89 c0       	rjmp	.+274    	; 0xf4c <InitLCD+0x3c0>
	{
		_delay_ms(__us / 1000.0);
     e3a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     e3c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     e3e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e40:	98 a1       	ldd	r25, Y+32	; 0x20
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	4a e7       	ldi	r20, 0x7A	; 122
     e48:	54 e4       	ldi	r21, 0x44	; 68
     e4a:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	8e a3       	std	Y+38, r24	; 0x26
     e54:	9f a3       	std	Y+39, r25	; 0x27
     e56:	a8 a7       	std	Y+40, r26	; 0x28
     e58:	b9 a7       	std	Y+41, r27	; 0x29
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     e5a:	6e a1       	ldd	r22, Y+38	; 0x26
     e5c:	7f a1       	ldd	r23, Y+39	; 0x27
     e5e:	88 a5       	ldd	r24, Y+40	; 0x28
     e60:	99 a5       	ldd	r25, Y+41	; 0x29
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	4a e7       	ldi	r20, 0x7A	; 122
     e68:	55 e4       	ldi	r21, 0x45	; 69
     e6a:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	8a a7       	std	Y+42, r24	; 0x2a
     e74:	9b a7       	std	Y+43, r25	; 0x2b
     e76:	ac a7       	std	Y+44, r26	; 0x2c
     e78:	bd a7       	std	Y+45, r27	; 0x2d
	if (__tmp < 1.0)
     e7a:	11 e0       	ldi	r17, 0x01	; 1
     e7c:	6a a5       	ldd	r22, Y+42	; 0x2a
     e7e:	7b a5       	ldd	r23, Y+43	; 0x2b
     e80:	8c a5       	ldd	r24, Y+44	; 0x2c
     e82:	9d a5       	ldd	r25, Y+45	; 0x2d
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	40 e8       	ldi	r20, 0x80	; 128
     e8a:	5f e3       	ldi	r21, 0x3F	; 63
     e8c:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
     e90:	88 23       	and	r24, r24
     e92:	0c f0       	brlt	.+2      	; 0xe96 <InitLCD+0x30a>
     e94:	10 e0       	ldi	r17, 0x00	; 0
     e96:	11 23       	and	r17, r17
     e98:	29 f0       	breq	.+10     	; 0xea4 <InitLCD+0x318>
		__ticks = 1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9f a7       	std	Y+47, r25	; 0x2f
     ea0:	8e a7       	std	Y+46, r24	; 0x2e
     ea2:	46 c0       	rjmp	.+140    	; 0xf30 <InitLCD+0x3a4>
	else if (__tmp > 65535)
     ea4:	11 e0       	ldi	r17, 0x01	; 1
     ea6:	6a a5       	ldd	r22, Y+42	; 0x2a
     ea8:	7b a5       	ldd	r23, Y+43	; 0x2b
     eaa:	8c a5       	ldd	r24, Y+44	; 0x2c
     eac:	9d a5       	ldd	r25, Y+45	; 0x2d
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	3f ef       	ldi	r19, 0xFF	; 255
     eb2:	4f e7       	ldi	r20, 0x7F	; 127
     eb4:	57 e4       	ldi	r21, 0x47	; 71
     eb6:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
     eba:	18 16       	cp	r1, r24
     ebc:	0c f0       	brlt	.+2      	; 0xec0 <InitLCD+0x334>
     ebe:	10 e0       	ldi	r17, 0x00	; 0
     ec0:	11 23       	and	r17, r17
     ec2:	61 f1       	breq	.+88     	; 0xf1c <InitLCD+0x390>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec4:	6e a1       	ldd	r22, Y+38	; 0x26
     ec6:	7f a1       	ldd	r23, Y+39	; 0x27
     ec8:	88 a5       	ldd	r24, Y+40	; 0x28
     eca:	99 a5       	ldd	r25, Y+41	; 0x29
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e2       	ldi	r20, 0x20	; 32
     ed2:	51 e4       	ldi	r21, 0x41	; 65
     ed4:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	bc 01       	movw	r22, r24
     ede:	cd 01       	movw	r24, r26
     ee0:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	9f a7       	std	Y+47, r25	; 0x2f
     eea:	8e a7       	std	Y+46, r24	; 0x2e
     eec:	12 c0       	rjmp	.+36     	; 0xf12 <InitLCD+0x386>
     eee:	80 e9       	ldi	r24, 0x90	; 144
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	99 ab       	std	Y+49, r25	; 0x31
     ef4:	88 ab       	std	Y+48, r24	; 0x30
     ef6:	88 a9       	ldd	r24, Y+48	; 0x30
     ef8:	99 a9       	ldd	r25, Y+49	; 0x31
     efa:	8c 01       	movw	r16, r24
     efc:	c8 01       	movw	r24, r16
     efe:	01 97       	sbiw	r24, 0x01	; 1
     f00:	f1 f7       	brne	.-4      	; 0xefe <InitLCD+0x372>
     f02:	8c 01       	movw	r16, r24
     f04:	19 ab       	std	Y+49, r17	; 0x31
     f06:	08 ab       	std	Y+48, r16	; 0x30
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f08:	8e a5       	ldd	r24, Y+46	; 0x2e
     f0a:	9f a5       	ldd	r25, Y+47	; 0x2f
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	9f a7       	std	Y+47, r25	; 0x2f
     f10:	8e a7       	std	Y+46, r24	; 0x2e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f12:	8e a5       	ldd	r24, Y+46	; 0x2e
     f14:	9f a5       	ldd	r25, Y+47	; 0x2f
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	51 f7       	brne	.-44     	; 0xeee <InitLCD+0x362>
     f1a:	28 c0       	rjmp	.+80     	; 0xf6c <InitLCD+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1c:	6a a5       	ldd	r22, Y+42	; 0x2a
     f1e:	7b a5       	ldd	r23, Y+43	; 0x2b
     f20:	8c a5       	ldd	r24, Y+44	; 0x2c
     f22:	9d a5       	ldd	r25, Y+45	; 0x2d
     f24:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	9f a7       	std	Y+47, r25	; 0x2f
     f2e:	8e a7       	std	Y+46, r24	; 0x2e
     f30:	8e a5       	ldd	r24, Y+46	; 0x2e
     f32:	9f a5       	ldd	r25, Y+47	; 0x2f
     f34:	9b ab       	std	Y+51, r25	; 0x33
     f36:	8a ab       	std	Y+50, r24	; 0x32
     f38:	8a a9       	ldd	r24, Y+50	; 0x32
     f3a:	9b a9       	ldd	r25, Y+51	; 0x33
     f3c:	8c 01       	movw	r16, r24
     f3e:	f8 01       	movw	r30, r16
     f40:	31 97       	sbiw	r30, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <InitLCD+0x3b4>
     f44:	8f 01       	movw	r16, r30
     f46:	1b ab       	std	Y+51, r17	; 0x33
     f48:	0a ab       	std	Y+50, r16	; 0x32
     f4a:	10 c0       	rjmp	.+32     	; 0xf6c <InitLCD+0x3e0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f4c:	69 a1       	ldd	r22, Y+33	; 0x21
     f4e:	7a a1       	ldd	r23, Y+34	; 0x22
     f50:	8b a1       	ldd	r24, Y+35	; 0x23
     f52:	9c a1       	ldd	r25, Y+36	; 0x24
     f54:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	8d a3       	std	Y+37, r24	; 0x25
     f5e:	8d a1       	ldd	r24, Y+37	; 0x25
     f60:	8c ab       	std	Y+52, r24	; 0x34
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f62:	8c a9       	ldd	r24, Y+52	; 0x34
     f64:	18 2f       	mov	r17, r24
     f66:	1a 95       	dec	r17
     f68:	f1 f7       	brne	.-4      	; 0xf66 <InitLCD+0x3da>
     f6a:	1c ab       	std	Y+52, r17	; 0x34
	_delay_us(100);

	LCD_Command(0x3C);
     f6c:	8c e3       	ldi	r24, 0x3C	; 60
     f6e:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	a8 ec       	ldi	r26, 0xC8	; 200
     f78:	b2 e4       	ldi	r27, 0x42	; 66
     f7a:	8d ab       	std	Y+53, r24	; 0x35
     f7c:	9e ab       	std	Y+54, r25	; 0x36
     f7e:	af ab       	std	Y+55, r26	; 0x37
     f80:	b8 af       	std	Y+56, r27	; 0x38
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     f82:	6d a9       	ldd	r22, Y+53	; 0x35
     f84:	7e a9       	ldd	r23, Y+54	; 0x36
     f86:	8f a9       	ldd	r24, Y+55	; 0x37
     f88:	98 ad       	ldd	r25, Y+56	; 0x38
     f8a:	2b ea       	ldi	r18, 0xAB	; 171
     f8c:	3a ea       	ldi	r19, 0xAA	; 170
     f8e:	4a ea       	ldi	r20, 0xAA	; 170
     f90:	50 e4       	ldi	r21, 0x40	; 64
     f92:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	89 af       	std	Y+57, r24	; 0x39
     f9c:	9a af       	std	Y+58, r25	; 0x3a
     f9e:	ab af       	std	Y+59, r26	; 0x3b
     fa0:	bc af       	std	Y+60, r27	; 0x3c
	if (__tmp < 1.0)
     fa2:	11 e0       	ldi	r17, 0x01	; 1
     fa4:	69 ad       	ldd	r22, Y+57	; 0x39
     fa6:	7a ad       	ldd	r23, Y+58	; 0x3a
     fa8:	8b ad       	ldd	r24, Y+59	; 0x3b
     faa:	9c ad       	ldd	r25, Y+60	; 0x3c
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	40 e8       	ldi	r20, 0x80	; 128
     fb2:	5f e3       	ldi	r21, 0x3F	; 63
     fb4:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
     fb8:	88 23       	and	r24, r24
     fba:	0c f0       	brlt	.+2      	; 0xfbe <InitLCD+0x432>
     fbc:	10 e0       	ldi	r17, 0x00	; 0
     fbe:	11 23       	and	r17, r17
     fc0:	19 f0       	breq	.+6      	; 0xfc8 <InitLCD+0x43c>
		__ticks = 1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	8d af       	std	Y+61, r24	; 0x3d
     fc6:	f3 c0       	rjmp	.+486    	; 0x11ae <__stack+0xaf>
	else if (__tmp > 255)
     fc8:	11 e0       	ldi	r17, 0x01	; 1
     fca:	69 ad       	ldd	r22, Y+57	; 0x39
     fcc:	7a ad       	ldd	r23, Y+58	; 0x3a
     fce:	8b ad       	ldd	r24, Y+59	; 0x3b
     fd0:	9c ad       	ldd	r25, Y+60	; 0x3c
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	4f e7       	ldi	r20, 0x7F	; 127
     fd8:	53 e4       	ldi	r21, 0x43	; 67
     fda:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
     fde:	18 16       	cp	r1, r24
     fe0:	0c f0       	brlt	.+2      	; 0xfe4 <InitLCD+0x458>
     fe2:	10 e0       	ldi	r17, 0x00	; 0
     fe4:	11 23       	and	r17, r17
     fe6:	09 f4       	brne	.+2      	; 0xfea <InitLCD+0x45e>
     fe8:	d9 c0       	rjmp	.+434    	; 0x119c <__stack+0x9d>
	{
		_delay_ms(__us / 1000.0);
     fea:	6d a9       	ldd	r22, Y+53	; 0x35
     fec:	7e a9       	ldd	r23, Y+54	; 0x36
     fee:	8f a9       	ldd	r24, Y+55	; 0x37
     ff0:	98 ad       	ldd	r25, Y+56	; 0x38
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4a e7       	ldi	r20, 0x7A	; 122
     ff8:	54 e4       	ldi	r21, 0x44	; 68
     ffa:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	9e 01       	movw	r18, r28
    1004:	22 5c       	subi	r18, 0xC2	; 194
    1006:	3f 4f       	sbci	r19, 0xFF	; 255
    1008:	f9 01       	movw	r30, r18
    100a:	80 83       	st	Z, r24
    100c:	91 83       	std	Z+1, r25	; 0x01
    100e:	a2 83       	std	Z+2, r26	; 0x02
    1010:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1012:	8e 01       	movw	r16, r28
    1014:	0e 5b       	subi	r16, 0xBE	; 190
    1016:	1f 4f       	sbci	r17, 0xFF	; 255
    1018:	ce 01       	movw	r24, r28
    101a:	ce 96       	adiw	r24, 0x3e	; 62
    101c:	fc 01       	movw	r30, r24
    101e:	60 81       	ld	r22, Z
    1020:	71 81       	ldd	r23, Z+1	; 0x01
    1022:	82 81       	ldd	r24, Z+2	; 0x02
    1024:	93 81       	ldd	r25, Z+3	; 0x03
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	4a e7       	ldi	r20, 0x7A	; 122
    102c:	55 e4       	ldi	r21, 0x45	; 69
    102e:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
    1032:	dc 01       	movw	r26, r24
    1034:	cb 01       	movw	r24, r22
    1036:	f8 01       	movw	r30, r16
    1038:	80 83       	st	Z, r24
    103a:	91 83       	std	Z+1, r25	; 0x01
    103c:	a2 83       	std	Z+2, r26	; 0x02
    103e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1040:	ce 01       	movw	r24, r28
    1042:	8e 5b       	subi	r24, 0xBE	; 190
    1044:	9f 4f       	sbci	r25, 0xFF	; 255
    1046:	11 e0       	ldi	r17, 0x01	; 1
    1048:	fc 01       	movw	r30, r24
    104a:	60 81       	ld	r22, Z
    104c:	71 81       	ldd	r23, Z+1	; 0x01
    104e:	82 81       	ldd	r24, Z+2	; 0x02
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e8       	ldi	r20, 0x80	; 128
    1058:	5f e3       	ldi	r21, 0x3F	; 63
    105a:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
    105e:	88 23       	and	r24, r24
    1060:	0c f0       	brlt	.+2      	; 0x1064 <InitLCD+0x4d8>
    1062:	10 e0       	ldi	r17, 0x00	; 0
    1064:	11 23       	and	r17, r17
    1066:	49 f0       	breq	.+18     	; 0x107a <InitLCD+0x4ee>
		__ticks = 1;
    1068:	ce 01       	movw	r24, r28
    106a:	8a 5b       	subi	r24, 0xBA	; 186
    106c:	9f 4f       	sbci	r25, 0xFF	; 255
    106e:	21 e0       	ldi	r18, 0x01	; 1
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	fc 01       	movw	r30, r24
    1074:	31 83       	std	Z+1, r19	; 0x01
    1076:	20 83       	st	Z, r18
    1078:	73 c0       	rjmp	.+230    	; 0x1160 <__stack+0x61>
	else if (__tmp > 65535)
    107a:	ce 01       	movw	r24, r28
    107c:	8e 5b       	subi	r24, 0xBE	; 190
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	11 e0       	ldi	r17, 0x01	; 1
    1082:	fc 01       	movw	r30, r24
    1084:	60 81       	ld	r22, Z
    1086:	71 81       	ldd	r23, Z+1	; 0x01
    1088:	82 81       	ldd	r24, Z+2	; 0x02
    108a:	93 81       	ldd	r25, Z+3	; 0x03
    108c:	20 e0       	ldi	r18, 0x00	; 0
    108e:	3f ef       	ldi	r19, 0xFF	; 255
    1090:	4f e7       	ldi	r20, 0x7F	; 127
    1092:	57 e4       	ldi	r21, 0x47	; 71
    1094:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
    1098:	18 16       	cp	r1, r24
    109a:	0c f0       	brlt	.+2      	; 0x109e <InitLCD+0x512>
    109c:	10 e0       	ldi	r17, 0x00	; 0
    109e:	11 23       	and	r17, r17
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <InitLCD+0x518>
    10a2:	4c c0       	rjmp	.+152    	; 0x113c <__stack+0x3d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a4:	ce 01       	movw	r24, r28
    10a6:	ce 96       	adiw	r24, 0x3e	; 62
    10a8:	fc 01       	movw	r30, r24
    10aa:	60 81       	ld	r22, Z
    10ac:	71 81       	ldd	r23, Z+1	; 0x01
    10ae:	82 81       	ldd	r24, Z+2	; 0x02
    10b0:	93 81       	ldd	r25, Z+3	; 0x03
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e2       	ldi	r20, 0x20	; 32
    10b8:	51 e4       	ldi	r21, 0x41	; 65
    10ba:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	8e 01       	movw	r16, r28
    10c4:	0a 5b       	subi	r16, 0xBA	; 186
    10c6:	1f 4f       	sbci	r17, 0xFF	; 255
    10c8:	bc 01       	movw	r22, r24
    10ca:	cd 01       	movw	r24, r26
    10cc:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	f8 01       	movw	r30, r16
    10d6:	91 83       	std	Z+1, r25	; 0x01
    10d8:	80 83       	st	Z, r24
    10da:	27 c0       	rjmp	.+78     	; 0x112a <__stack+0x2b>
    10dc:	ce 01       	movw	r24, r28
    10de:	88 5b       	subi	r24, 0xB8	; 184
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	20 e9       	ldi	r18, 0x90	; 144
    10e4:	31 e0       	ldi	r19, 0x01	; 1
    10e6:	fc 01       	movw	r30, r24
    10e8:	31 83       	std	Z+1, r19	; 0x01
    10ea:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10ec:	ce 01       	movw	r24, r28
    10ee:	88 5b       	subi	r24, 0xB8	; 184
    10f0:	9f 4f       	sbci	r25, 0xFF	; 255
    10f2:	fc 01       	movw	r30, r24
    10f4:	80 81       	ld	r24, Z
    10f6:	91 81       	ldd	r25, Z+1	; 0x01
    10f8:	8c 01       	movw	r16, r24
    10fa:	c8 01       	movw	r24, r16
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	f1 f7       	brne	.-4      	; 0x10fc <InitLCD+0x570>
    1100:	8c 01       	movw	r16, r24
    1102:	ce 01       	movw	r24, r28
    1104:	88 5b       	subi	r24, 0xB8	; 184
    1106:	9f 4f       	sbci	r25, 0xFF	; 255
    1108:	fc 01       	movw	r30, r24
    110a:	11 83       	std	Z+1, r17	; 0x01
    110c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    110e:	ce 01       	movw	r24, r28
    1110:	8a 5b       	subi	r24, 0xBA	; 186
    1112:	9f 4f       	sbci	r25, 0xFF	; 255
    1114:	9e 01       	movw	r18, r28
    1116:	2a 5b       	subi	r18, 0xBA	; 186
    1118:	3f 4f       	sbci	r19, 0xFF	; 255
    111a:	f9 01       	movw	r30, r18
    111c:	20 81       	ld	r18, Z
    111e:	31 81       	ldd	r19, Z+1	; 0x01
    1120:	21 50       	subi	r18, 0x01	; 1
    1122:	30 40       	sbci	r19, 0x00	; 0
    1124:	fc 01       	movw	r30, r24
    1126:	31 83       	std	Z+1, r19	; 0x01
    1128:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112a:	ce 01       	movw	r24, r28
    112c:	8a 5b       	subi	r24, 0xBA	; 186
    112e:	9f 4f       	sbci	r25, 0xFF	; 255
    1130:	fc 01       	movw	r30, r24
    1132:	80 81       	ld	r24, Z
    1134:	91 81       	ldd	r25, Z+1	; 0x01
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	89 f6       	brne	.-94     	; 0x10dc <InitLCD+0x550>
    113a:	4c c0       	rjmp	.+152    	; 0x11d4 <__stack+0xd5>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    113c:	8e 01       	movw	r16, r28
    113e:	0a 5b       	subi	r16, 0xBA	; 186
    1140:	1f 4f       	sbci	r17, 0xFF	; 255
    1142:	ce 01       	movw	r24, r28
    1144:	8e 5b       	subi	r24, 0xBE	; 190
    1146:	9f 4f       	sbci	r25, 0xFF	; 255
    1148:	fc 01       	movw	r30, r24
    114a:	60 81       	ld	r22, Z
    114c:	71 81       	ldd	r23, Z+1	; 0x01
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	f8 01       	movw	r30, r16
    115c:	91 83       	std	Z+1, r25	; 0x01
    115e:	80 83       	st	Z, r24
    1160:	ce 01       	movw	r24, r28
    1162:	86 5b       	subi	r24, 0xB6	; 182
    1164:	9f 4f       	sbci	r25, 0xFF	; 255
    1166:	9e 01       	movw	r18, r28
    1168:	2a 5b       	subi	r18, 0xBA	; 186
    116a:	3f 4f       	sbci	r19, 0xFF	; 255
    116c:	f9 01       	movw	r30, r18
    116e:	20 81       	ld	r18, Z
    1170:	31 81       	ldd	r19, Z+1	; 0x01
    1172:	fc 01       	movw	r30, r24
    1174:	31 83       	std	Z+1, r19	; 0x01
    1176:	20 83       	st	Z, r18
    1178:	ce 01       	movw	r24, r28
    117a:	86 5b       	subi	r24, 0xB6	; 182
    117c:	9f 4f       	sbci	r25, 0xFF	; 255
    117e:	fc 01       	movw	r30, r24
    1180:	80 81       	ld	r24, Z
    1182:	91 81       	ldd	r25, Z+1	; 0x01
    1184:	8c 01       	movw	r16, r24
    1186:	c8 01       	movw	r24, r16
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	f1 f7       	brne	.-4      	; 0x1188 <__stack+0x89>
    118c:	8c 01       	movw	r16, r24
    118e:	ce 01       	movw	r24, r28
    1190:	86 5b       	subi	r24, 0xB6	; 182
    1192:	9f 4f       	sbci	r25, 0xFF	; 255
    1194:	fc 01       	movw	r30, r24
    1196:	11 83       	std	Z+1, r17	; 0x01
    1198:	00 83       	st	Z, r16
    119a:	1c c0       	rjmp	.+56     	; 0x11d4 <__stack+0xd5>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    119c:	69 ad       	ldd	r22, Y+57	; 0x39
    119e:	7a ad       	ldd	r23, Y+58	; 0x3a
    11a0:	8b ad       	ldd	r24, Y+59	; 0x3b
    11a2:	9c ad       	ldd	r25, Y+60	; 0x3c
    11a4:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	8d af       	std	Y+61, r24	; 0x3d
    11ae:	ce 01       	movw	r24, r28
    11b0:	84 5b       	subi	r24, 0xB4	; 180
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	2d ad       	ldd	r18, Y+61	; 0x3d
    11b6:	fc 01       	movw	r30, r24
    11b8:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11ba:	ce 01       	movw	r24, r28
    11bc:	84 5b       	subi	r24, 0xB4	; 180
    11be:	9f 4f       	sbci	r25, 0xFF	; 255
    11c0:	fc 01       	movw	r30, r24
    11c2:	80 81       	ld	r24, Z
    11c4:	18 2f       	mov	r17, r24
    11c6:	1a 95       	dec	r17
    11c8:	f1 f7       	brne	.-4      	; 0x11c6 <__stack+0xc7>
    11ca:	ce 01       	movw	r24, r28
    11cc:	84 5b       	subi	r24, 0xB4	; 180
    11ce:	9f 4f       	sbci	r25, 0xFF	; 255
    11d0:	fc 01       	movw	r30, r24
    11d2:	10 83       	st	Z, r17
	_delay_us(100);

	LCD_Command(0x3C);	//Function Set
    11d4:	8c e3       	ldi	r24, 0x3C	; 60
    11d6:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
	LCD_Command(0x0C);	//Display Control
    11da:	8c e0       	ldi	r24, 0x0C	; 12
    11dc:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
	LCD_Command(DISPLAY_CLEAR); //Display Clear
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
	LCD_Command(0x06);		//Set Entrymode
    11e6:	86 e0       	ldi	r24, 0x06	; 6
    11e8:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
}
    11ec:	c4 5b       	subi	r28, 0xB4	; 180
    11ee:	df 4f       	sbci	r29, 0xFF	; 255
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	08 95       	ret

00001204 <SetWritePos>:

void SetWritePos(char address)
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	0f 92       	push	r0
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	89 83       	std	Y+1, r24	; 0x01
	LCD_Command(address | 0x80);
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	80 68       	ori	r24, 0x80	; 128
    1214:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
}
    1218:	0f 90       	pop	r0
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <LCD_WriteString>:

void LCD_WriteString(char* str)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <LCD_WriteString+0x6>
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01
	while(*str != 0)
    122e:	0b c0       	rjmp	.+22     	; 0x1246 <LCD_WriteString+0x26>
	{
		LCD_Data(*str);
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	fc 01       	movw	r30, r24
    1236:	80 81       	ld	r24, Z
    1238:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_Data>
		str++;
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	9a 83       	std	Y+2, r25	; 0x02
    1244:	89 83       	std	Y+1, r24	; 0x01
	LCD_Command(address | 0x80);
}

void LCD_WriteString(char* str)
{
	while(*str != 0)
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	9a 81       	ldd	r25, Y+2	; 0x02
    124a:	fc 01       	movw	r30, r24
    124c:	80 81       	ld	r24, Z
    124e:	88 23       	and	r24, r24
    1250:	79 f7       	brne	.-34     	; 0x1230 <LCD_WriteString+0x10>
	{
		LCD_Data(*str);
		str++;
	}
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <LCD_NumPrintLoop>:

void LCD_NumPrintLoop(long Num)
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	00 d0       	rcall	.+0      	; 0x1262 <LCD_NumPrintLoop+0x6>
    1262:	00 d0       	rcall	.+0      	; 0x1264 <LCD_NumPrintLoop+0x8>
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	69 83       	std	Y+1, r22	; 0x01
    126a:	7a 83       	std	Y+2, r23	; 0x02
    126c:	8b 83       	std	Y+3, r24	; 0x03
    126e:	9c 83       	std	Y+4, r25	; 0x04
	if(Num >= 10)
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	9a 81       	ldd	r25, Y+2	; 0x02
    1274:	ab 81       	ldd	r26, Y+3	; 0x03
    1276:	bc 81       	ldd	r27, Y+4	; 0x04
    1278:	8a 30       	cpi	r24, 0x0A	; 10
    127a:	91 05       	cpc	r25, r1
    127c:	a1 05       	cpc	r26, r1
    127e:	b1 05       	cpc	r27, r1
    1280:	94 f0       	brlt	.+36     	; 0x12a6 <LCD_NumPrintLoop+0x4a>
		LCD_NumPrintLoop(Num / 10);
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	9a 81       	ldd	r25, Y+2	; 0x02
    1286:	ab 81       	ldd	r26, Y+3	; 0x03
    1288:	bc 81       	ldd	r27, Y+4	; 0x04
    128a:	2a e0       	ldi	r18, 0x0A	; 10
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e0       	ldi	r20, 0x00	; 0
    1290:	50 e0       	ldi	r21, 0x00	; 0
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__divmodsi4>
    129a:	da 01       	movw	r26, r20
    129c:	c9 01       	movw	r24, r18
    129e:	bc 01       	movw	r22, r24
    12a0:	cd 01       	movw	r24, r26
    12a2:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_NumPrintLoop>

	LCD_Data(Num % 10 + '0');
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	9a 81       	ldd	r25, Y+2	; 0x02
    12aa:	ab 81       	ldd	r26, Y+3	; 0x03
    12ac:	bc 81       	ldd	r27, Y+4	; 0x04
    12ae:	2a e0       	ldi	r18, 0x0A	; 10
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	50 e0       	ldi	r21, 0x00	; 0
    12b6:	bc 01       	movw	r22, r24
    12b8:	cd 01       	movw	r24, r26
    12ba:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__divmodsi4>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	80 5d       	subi	r24, 0xD0	; 208
    12c4:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_Data>
}
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <LCD_WriteNum>:

void LCD_WriteNum(long Num)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	00 d0       	rcall	.+0      	; 0x12dc <LCD_WriteNum+0x6>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <LCD_WriteNum+0x8>
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	69 83       	std	Y+1, r22	; 0x01
    12e4:	7a 83       	std	Y+2, r23	; 0x02
    12e6:	8b 83       	std	Y+3, r24	; 0x03
    12e8:	9c 83       	std	Y+4, r25	; 0x04
	if(Num < 0)
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	9a 81       	ldd	r25, Y+2	; 0x02
    12ee:	ab 81       	ldd	r26, Y+3	; 0x03
    12f0:	bc 81       	ldd	r27, Y+4	; 0x04
    12f2:	bb 23       	and	r27, r27
    12f4:	94 f4       	brge	.+36     	; 0x131a <LCD_WriteNum+0x44>
	{
		LCD_Data('-');
    12f6:	8d e2       	ldi	r24, 0x2D	; 45
    12f8:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_Data>
		Num *= -1;
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1300:	ab 81       	ldd	r26, Y+3	; 0x03
    1302:	bc 81       	ldd	r27, Y+4	; 0x04
    1304:	b0 95       	com	r27
    1306:	a0 95       	com	r26
    1308:	90 95       	com	r25
    130a:	81 95       	neg	r24
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	af 4f       	sbci	r26, 0xFF	; 255
    1310:	bf 4f       	sbci	r27, 0xFF	; 255
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	9a 83       	std	Y+2, r25	; 0x02
    1316:	ab 83       	std	Y+3, r26	; 0x03
    1318:	bc 83       	std	Y+4, r27	; 0x04
	}

	LCD_NumPrintLoop(Num);
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	9a 81       	ldd	r25, Y+2	; 0x02
    131e:	ab 81       	ldd	r26, Y+3	; 0x03
    1320:	bc 81       	ldd	r27, Y+4	; 0x04
    1322:	bc 01       	movw	r22, r24
    1324:	cd 01       	movw	r24, r26
    1326:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_NumPrintLoop>
}
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <SetOutputLine>:
//char PrevKey = 0x00;
int PrevKey = 0;
int CurrKey = 0;

void SetOutputLine(unsigned char LineNum)
{
    1338:	0f 93       	push	r16
    133a:	1f 93       	push	r17
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	69 97       	sbiw	r28, 0x19	; 25
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	89 8f       	std	Y+25, r24	; 0x19
	BTNMTX_OUT = 0x01 << LineNum;
    1352:	82 e3       	ldi	r24, 0x32	; 50
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	29 8d       	ldd	r18, Y+25	; 0x19
    1358:	42 2f       	mov	r20, r18
    135a:	50 e0       	ldi	r21, 0x00	; 0
    135c:	21 e0       	ldi	r18, 0x01	; 1
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <SetOutputLine+0x2e>
    1362:	22 0f       	add	r18, r18
    1364:	33 1f       	adc	r19, r19
    1366:	4a 95       	dec	r20
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <SetOutputLine+0x2a>
    136a:	fc 01       	movw	r30, r24
    136c:	20 83       	st	Z, r18
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	a0 e2       	ldi	r26, 0x20	; 32
    1374:	b1 e4       	ldi	r27, 0x41	; 65
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	9a 83       	std	Y+2, r25	; 0x02
    137a:	ab 83       	std	Y+3, r26	; 0x03
    137c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    137e:	69 81       	ldd	r22, Y+1	; 0x01
    1380:	7a 81       	ldd	r23, Y+2	; 0x02
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	2b ea       	ldi	r18, 0xAB	; 171
    1388:	3a ea       	ldi	r19, 0xAA	; 170
    138a:	4a ea       	ldi	r20, 0xAA	; 170
    138c:	50 e4       	ldi	r21, 0x40	; 64
    138e:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	8d 83       	std	Y+5, r24	; 0x05
    1398:	9e 83       	std	Y+6, r25	; 0x06
    139a:	af 83       	std	Y+7, r26	; 0x07
    139c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    139e:	11 e0       	ldi	r17, 0x01	; 1
    13a0:	6d 81       	ldd	r22, Y+5	; 0x05
    13a2:	7e 81       	ldd	r23, Y+6	; 0x06
    13a4:	8f 81       	ldd	r24, Y+7	; 0x07
    13a6:	98 85       	ldd	r25, Y+8	; 0x08
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e8       	ldi	r20, 0x80	; 128
    13ae:	5f e3       	ldi	r21, 0x3F	; 63
    13b0:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
    13b4:	88 23       	and	r24, r24
    13b6:	0c f0       	brlt	.+2      	; 0x13ba <SetOutputLine+0x82>
    13b8:	10 e0       	ldi	r17, 0x00	; 0
    13ba:	11 23       	and	r17, r17
    13bc:	19 f0       	breq	.+6      	; 0x13c4 <SetOutputLine+0x8c>
		__ticks = 1;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	89 87       	std	Y+9, r24	; 0x09
    13c2:	a3 c0       	rjmp	.+326    	; 0x150a <SetOutputLine+0x1d2>
	else if (__tmp > 255)
    13c4:	11 e0       	ldi	r17, 0x01	; 1
    13c6:	6d 81       	ldd	r22, Y+5	; 0x05
    13c8:	7e 81       	ldd	r23, Y+6	; 0x06
    13ca:	8f 81       	ldd	r24, Y+7	; 0x07
    13cc:	98 85       	ldd	r25, Y+8	; 0x08
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	4f e7       	ldi	r20, 0x7F	; 127
    13d4:	53 e4       	ldi	r21, 0x43	; 67
    13d6:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
    13da:	18 16       	cp	r1, r24
    13dc:	0c f0       	brlt	.+2      	; 0x13e0 <SetOutputLine+0xa8>
    13de:	10 e0       	ldi	r17, 0x00	; 0
    13e0:	11 23       	and	r17, r17
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <SetOutputLine+0xae>
    13e4:	89 c0       	rjmp	.+274    	; 0x14f8 <SetOutputLine+0x1c0>
	{
		_delay_ms(__us / 1000.0);
    13e6:	69 81       	ldd	r22, Y+1	; 0x01
    13e8:	7a 81       	ldd	r23, Y+2	; 0x02
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	4a e7       	ldi	r20, 0x7A	; 122
    13f4:	54 e4       	ldi	r21, 0x44	; 68
    13f6:	0e 94 23 12 	call	0x2446	; 0x2446 <__divsf3>
    13fa:	dc 01       	movw	r26, r24
    13fc:	cb 01       	movw	r24, r22
    13fe:	8a 87       	std	Y+10, r24	; 0x0a
    1400:	9b 87       	std	Y+11, r25	; 0x0b
    1402:	ac 87       	std	Y+12, r26	; 0x0c
    1404:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1406:	6a 85       	ldd	r22, Y+10	; 0x0a
    1408:	7b 85       	ldd	r23, Y+11	; 0x0b
    140a:	8c 85       	ldd	r24, Y+12	; 0x0c
    140c:	9d 85       	ldd	r25, Y+13	; 0x0d
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	4a e7       	ldi	r20, 0x7A	; 122
    1414:	55 e4       	ldi	r21, 0x45	; 69
    1416:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
    141a:	dc 01       	movw	r26, r24
    141c:	cb 01       	movw	r24, r22
    141e:	8e 87       	std	Y+14, r24	; 0x0e
    1420:	9f 87       	std	Y+15, r25	; 0x0f
    1422:	a8 8b       	std	Y+16, r26	; 0x10
    1424:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    1426:	11 e0       	ldi	r17, 0x01	; 1
    1428:	6e 85       	ldd	r22, Y+14	; 0x0e
    142a:	7f 85       	ldd	r23, Y+15	; 0x0f
    142c:	88 89       	ldd	r24, Y+16	; 0x10
    142e:	99 89       	ldd	r25, Y+17	; 0x11
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e8       	ldi	r20, 0x80	; 128
    1436:	5f e3       	ldi	r21, 0x3F	; 63
    1438:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
    143c:	88 23       	and	r24, r24
    143e:	0c f0       	brlt	.+2      	; 0x1442 <SetOutputLine+0x10a>
    1440:	10 e0       	ldi	r17, 0x00	; 0
    1442:	11 23       	and	r17, r17
    1444:	29 f0       	breq	.+10     	; 0x1450 <SetOutputLine+0x118>
		__ticks = 1;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9b 8b       	std	Y+19, r25	; 0x13
    144c:	8a 8b       	std	Y+18, r24	; 0x12
    144e:	46 c0       	rjmp	.+140    	; 0x14dc <SetOutputLine+0x1a4>
	else if (__tmp > 65535)
    1450:	11 e0       	ldi	r17, 0x01	; 1
    1452:	6e 85       	ldd	r22, Y+14	; 0x0e
    1454:	7f 85       	ldd	r23, Y+15	; 0x0f
    1456:	88 89       	ldd	r24, Y+16	; 0x10
    1458:	99 89       	ldd	r25, Y+17	; 0x11
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	3f ef       	ldi	r19, 0xFF	; 255
    145e:	4f e7       	ldi	r20, 0x7F	; 127
    1460:	57 e4       	ldi	r21, 0x47	; 71
    1462:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
    1466:	18 16       	cp	r1, r24
    1468:	0c f0       	brlt	.+2      	; 0x146c <SetOutputLine+0x134>
    146a:	10 e0       	ldi	r17, 0x00	; 0
    146c:	11 23       	and	r17, r17
    146e:	61 f1       	breq	.+88     	; 0x14c8 <SetOutputLine+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1470:	6a 85       	ldd	r22, Y+10	; 0x0a
    1472:	7b 85       	ldd	r23, Y+11	; 0x0b
    1474:	8c 85       	ldd	r24, Y+12	; 0x0c
    1476:	9d 85       	ldd	r25, Y+13	; 0x0d
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e2       	ldi	r20, 0x20	; 32
    147e:	51 e4       	ldi	r21, 0x41	; 65
    1480:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	bc 01       	movw	r22, r24
    148a:	cd 01       	movw	r24, r26
    148c:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	9b 8b       	std	Y+19, r25	; 0x13
    1496:	8a 8b       	std	Y+18, r24	; 0x12
    1498:	12 c0       	rjmp	.+36     	; 0x14be <SetOutputLine+0x186>
    149a:	80 e9       	ldi	r24, 0x90	; 144
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	9d 8b       	std	Y+21, r25	; 0x15
    14a0:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14a2:	8c 89       	ldd	r24, Y+20	; 0x14
    14a4:	9d 89       	ldd	r25, Y+21	; 0x15
    14a6:	8c 01       	movw	r16, r24
    14a8:	c8 01       	movw	r24, r16
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <SetOutputLine+0x172>
    14ae:	8c 01       	movw	r16, r24
    14b0:	1d 8b       	std	Y+21, r17	; 0x15
    14b2:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b4:	8a 89       	ldd	r24, Y+18	; 0x12
    14b6:	9b 89       	ldd	r25, Y+19	; 0x13
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	9b 8b       	std	Y+19, r25	; 0x13
    14bc:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14be:	8a 89       	ldd	r24, Y+18	; 0x12
    14c0:	9b 89       	ldd	r25, Y+19	; 0x13
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	51 f7       	brne	.-44     	; 0x149a <SetOutputLine+0x162>
    14c6:	28 c0       	rjmp	.+80     	; 0x1518 <SetOutputLine+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c8:	6e 85       	ldd	r22, Y+14	; 0x0e
    14ca:	7f 85       	ldd	r23, Y+15	; 0x0f
    14cc:	88 89       	ldd	r24, Y+16	; 0x10
    14ce:	99 89       	ldd	r25, Y+17	; 0x11
    14d0:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	9b 8b       	std	Y+19, r25	; 0x13
    14da:	8a 8b       	std	Y+18, r24	; 0x12
    14dc:	8a 89       	ldd	r24, Y+18	; 0x12
    14de:	9b 89       	ldd	r25, Y+19	; 0x13
    14e0:	9f 8b       	std	Y+23, r25	; 0x17
    14e2:	8e 8b       	std	Y+22, r24	; 0x16
    14e4:	8e 89       	ldd	r24, Y+22	; 0x16
    14e6:	9f 89       	ldd	r25, Y+23	; 0x17
    14e8:	8c 01       	movw	r16, r24
    14ea:	f8 01       	movw	r30, r16
    14ec:	31 97       	sbiw	r30, 0x01	; 1
    14ee:	f1 f7       	brne	.-4      	; 0x14ec <SetOutputLine+0x1b4>
    14f0:	8f 01       	movw	r16, r30
    14f2:	1f 8b       	std	Y+23, r17	; 0x17
    14f4:	0e 8b       	std	Y+22, r16	; 0x16
    14f6:	10 c0       	rjmp	.+32     	; 0x1518 <SetOutputLine+0x1e0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14f8:	6d 81       	ldd	r22, Y+5	; 0x05
    14fa:	7e 81       	ldd	r23, Y+6	; 0x06
    14fc:	8f 81       	ldd	r24, Y+7	; 0x07
    14fe:	98 85       	ldd	r25, Y+8	; 0x08
    1500:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	89 87       	std	Y+9, r24	; 0x09
    150a:	89 85       	ldd	r24, Y+9	; 0x09
    150c:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    150e:	88 8d       	ldd	r24, Y+24	; 0x18
    1510:	18 2f       	mov	r17, r24
    1512:	1a 95       	dec	r17
    1514:	f1 f7       	brne	.-4      	; 0x1512 <SetOutputLine+0x1da>
    1516:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(10);
}
    1518:	69 96       	adiw	r28, 0x19	; 25
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	08 95       	ret

0000152e <Input>:

void Input()
{
    152e:	df 93       	push	r29
    1530:	cf 93       	push	r28
    1532:	0f 92       	push	r0
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
	char tmp = 0x00;
    1538:	19 82       	std	Y+1, r1	; 0x01
	CurrKey = 0;
    153a:	10 92 29 01 	sts	0x0129, r1
    153e:	10 92 28 01 	sts	0x0128, r1

	for(tmp = 0;tmp < 4;tmp++)
    1542:	19 82       	std	Y+1, r1	; 0x01
    1544:	2a c0       	rjmp	.+84     	; 0x159a <Input+0x6c>
	{
		SetOutputLine(tmp);
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	0e 94 9c 09 	call	0x1338	; 0x1338 <SetOutputLine>
		CurrKey += BTNMTX_IN & 0x0F;
    154c:	81 e2       	ldi	r24, 0x21	; 33
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	fc 01       	movw	r30, r24
    1552:	80 81       	ld	r24, Z
    1554:	88 2f       	mov	r24, r24
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	9c 01       	movw	r18, r24
    155a:	2f 70       	andi	r18, 0x0F	; 15
    155c:	30 70       	andi	r19, 0x00	; 0
    155e:	80 91 28 01 	lds	r24, 0x0128
    1562:	90 91 29 01 	lds	r25, 0x0129
    1566:	82 0f       	add	r24, r18
    1568:	93 1f       	adc	r25, r19
    156a:	90 93 29 01 	sts	0x0129, r25
    156e:	80 93 28 01 	sts	0x0128, r24
		
		if(tmp == 3) break;
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	a9 f0       	breq	.+42     	; 0x15a2 <Input+0x74>
		
		CurrKey <<= 4;
    1578:	80 91 28 01 	lds	r24, 0x0128
    157c:	90 91 29 01 	lds	r25, 0x0129
    1580:	82 95       	swap	r24
    1582:	92 95       	swap	r25
    1584:	90 7f       	andi	r25, 0xF0	; 240
    1586:	98 27       	eor	r25, r24
    1588:	80 7f       	andi	r24, 0xF0	; 240
    158a:	98 27       	eor	r25, r24
    158c:	90 93 29 01 	sts	0x0129, r25
    1590:	80 93 28 01 	sts	0x0128, r24
void Input()
{
	char tmp = 0x00;
	CurrKey = 0;

	for(tmp = 0;tmp < 4;tmp++)
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	8f 5f       	subi	r24, 0xFF	; 255
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	84 30       	cpi	r24, 0x04	; 4
    159e:	98 f2       	brcs	.-90     	; 0x1546 <Input+0x18>
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <Input+0x76>
	{
		SetOutputLine(tmp);
		CurrKey += BTNMTX_IN & 0x0F;
		
		if(tmp == 3) break;
    15a2:	00 00       	nop
		
		CurrKey <<= 4;
	}
}
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <InputProcess>:
	


char InputProcess()
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
	Input();
    15b4:	0e 94 97 0a 	call	0x152e	; 0x152e <Input>
	
	if(PrevKey != CurrKey)
    15b8:	20 91 26 01 	lds	r18, 0x0126
    15bc:	30 91 27 01 	lds	r19, 0x0127
    15c0:	80 91 28 01 	lds	r24, 0x0128
    15c4:	90 91 29 01 	lds	r25, 0x0129
    15c8:	28 17       	cp	r18, r24
    15ca:	39 07       	cpc	r19, r25
    15cc:	51 f0       	breq	.+20     	; 0x15e2 <InputProcess+0x36>
	{
		PrevKey = CurrKey;
    15ce:	80 91 28 01 	lds	r24, 0x0128
    15d2:	90 91 29 01 	lds	r25, 0x0129
    15d6:	90 93 27 01 	sts	0x0127, r25
    15da:	80 93 26 01 	sts	0x0126, r24

		return 1;
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <InputProcess+0x38>
	}

	return 0;
    15e2:	80 e0       	ldi	r24, 0x00	; 0
}
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <GetCurrKey>:

int GetCurrKey()
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
	return CurrKey;
    15f2:	80 91 28 01 	lds	r24, 0x0128
    15f6:	90 91 29 01 	lds	r25, 0x0129
}
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <ResetData>:
3. *
4. /
*/

void ResetData()
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
	CurrNum = 0;
    1608:	10 92 32 01 	sts	0x0132, r1
    160c:	10 92 33 01 	sts	0x0133, r1
    1610:	10 92 34 01 	sts	0x0134, r1
    1614:	10 92 35 01 	sts	0x0135, r1
	Result = 0;
    1618:	10 92 2c 01 	sts	0x012C, r1
    161c:	10 92 2d 01 	sts	0x012D, r1
    1620:	10 92 2e 01 	sts	0x012E, r1
    1624:	10 92 2f 01 	sts	0x012F, r1
	PrevSign = 0;
    1628:	10 92 31 01 	sts	0x0131, r1
	LCD_Command(0x01);
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
}
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <AppendNum>:
	

void AppendNum(char n)
{
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	2f 97       	sbiw	r28, 0x0f	; 15
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	f8 94       	cli
    164a:	de bf       	out	0x3e, r29	; 62
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	cd bf       	out	0x3d, r28	; 61
    1650:	8f 87       	std	Y+15, r24	; 0x0f
	if(Equaled == 2)
    1652:	80 91 38 01 	lds	r24, 0x0138
    1656:	82 30       	cpi	r24, 0x02	; 2
    1658:	69 f4       	brne	.+26     	; 0x1674 <AppendNum+0x3c>
	{
		CurrNum = 0;
    165a:	10 92 32 01 	sts	0x0132, r1
    165e:	10 92 33 01 	sts	0x0133, r1
    1662:	10 92 34 01 	sts	0x0134, r1
    1666:	10 92 35 01 	sts	0x0135, r1
		Equaled = 0;
    166a:	10 92 38 01 	sts	0x0138, r1
		LCD_Command(0x01);
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>
	}

	SetWritePos(0x40);
    1674:	80 e4       	ldi	r24, 0x40	; 64
    1676:	0e 94 02 09 	call	0x1204	; 0x1204 <SetWritePos>
	
	if(CurrNum >= 100000000)
    167a:	80 91 32 01 	lds	r24, 0x0132
    167e:	90 91 33 01 	lds	r25, 0x0133
    1682:	a0 91 34 01 	lds	r26, 0x0134
    1686:	b0 91 35 01 	lds	r27, 0x0135
    168a:	80 30       	cpi	r24, 0x00	; 0
    168c:	21 ee       	ldi	r18, 0xE1	; 225
    168e:	92 07       	cpc	r25, r18
    1690:	25 ef       	ldi	r18, 0xF5	; 245
    1692:	a2 07       	cpc	r26, r18
    1694:	25 e0       	ldi	r18, 0x05	; 5
    1696:	b2 07       	cpc	r27, r18
    1698:	0c f4       	brge	.+2      	; 0x169c <AppendNum+0x64>
    169a:	87 c0       	rjmp	.+270    	; 0x17aa <AppendNum+0x172>
	{
		LCD_WriteString("OVERFLOW    ");
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	91 e0       	ldi	r25, 0x01	; 1
    16a0:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_WriteString>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	a8 e4       	ldi	r26, 0x48	; 72
    16aa:	b2 e4       	ldi	r27, 0x42	; 66
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	9a 83       	std	Y+2, r25	; 0x02
    16b0:	ab 83       	std	Y+3, r26	; 0x03
    16b2:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    16b4:	69 81       	ldd	r22, Y+1	; 0x01
    16b6:	7a 81       	ldd	r23, Y+2	; 0x02
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	4a e7       	ldi	r20, 0x7A	; 122
    16c2:	55 e4       	ldi	r21, 0x45	; 69
    16c4:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	8d 83       	std	Y+5, r24	; 0x05
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	af 83       	std	Y+7, r26	; 0x07
    16d2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    16d4:	11 e0       	ldi	r17, 0x01	; 1
    16d6:	6d 81       	ldd	r22, Y+5	; 0x05
    16d8:	7e 81       	ldd	r23, Y+6	; 0x06
    16da:	8f 81       	ldd	r24, Y+7	; 0x07
    16dc:	98 85       	ldd	r25, Y+8	; 0x08
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e8       	ldi	r20, 0x80	; 128
    16e4:	5f e3       	ldi	r21, 0x3F	; 63
    16e6:	0e 94 31 13 	call	0x2662	; 0x2662 <__ltsf2>
    16ea:	88 23       	and	r24, r24
    16ec:	0c f0       	brlt	.+2      	; 0x16f0 <AppendNum+0xb8>
    16ee:	10 e0       	ldi	r17, 0x00	; 0
    16f0:	11 23       	and	r17, r17
    16f2:	29 f0       	breq	.+10     	; 0x16fe <AppendNum+0xc6>
		__ticks = 1;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9a 87       	std	Y+10, r25	; 0x0a
    16fa:	89 87       	std	Y+9, r24	; 0x09
    16fc:	46 c0       	rjmp	.+140    	; 0x178a <AppendNum+0x152>
	else if (__tmp > 65535)
    16fe:	11 e0       	ldi	r17, 0x01	; 1
    1700:	6d 81       	ldd	r22, Y+5	; 0x05
    1702:	7e 81       	ldd	r23, Y+6	; 0x06
    1704:	8f 81       	ldd	r24, Y+7	; 0x07
    1706:	98 85       	ldd	r25, Y+8	; 0x08
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	3f ef       	ldi	r19, 0xFF	; 255
    170c:	4f e7       	ldi	r20, 0x7F	; 127
    170e:	57 e4       	ldi	r21, 0x47	; 71
    1710:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__gtsf2>
    1714:	18 16       	cp	r1, r24
    1716:	0c f0       	brlt	.+2      	; 0x171a <AppendNum+0xe2>
    1718:	10 e0       	ldi	r17, 0x00	; 0
    171a:	11 23       	and	r17, r17
    171c:	61 f1       	breq	.+88     	; 0x1776 <AppendNum+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171e:	69 81       	ldd	r22, Y+1	; 0x01
    1720:	7a 81       	ldd	r23, Y+2	; 0x02
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e2       	ldi	r20, 0x20	; 32
    172c:	51 e4       	ldi	r21, 0x41	; 65
    172e:	0e 94 29 11 	call	0x2252	; 0x2252 <__mulsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	bc 01       	movw	r22, r24
    1738:	cd 01       	movw	r24, r26
    173a:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	9a 87       	std	Y+10, r25	; 0x0a
    1744:	89 87       	std	Y+9, r24	; 0x09
    1746:	12 c0       	rjmp	.+36     	; 0x176c <AppendNum+0x134>
    1748:	80 e9       	ldi	r24, 0x90	; 144
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	9c 87       	std	Y+12, r25	; 0x0c
    174e:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1750:	8b 85       	ldd	r24, Y+11	; 0x0b
    1752:	9c 85       	ldd	r25, Y+12	; 0x0c
    1754:	8c 01       	movw	r16, r24
    1756:	c8 01       	movw	r24, r16
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <AppendNum+0x120>
    175c:	8c 01       	movw	r16, r24
    175e:	1c 87       	std	Y+12, r17	; 0x0c
    1760:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1762:	89 85       	ldd	r24, Y+9	; 0x09
    1764:	9a 85       	ldd	r25, Y+10	; 0x0a
    1766:	01 97       	sbiw	r24, 0x01	; 1
    1768:	9a 87       	std	Y+10, r25	; 0x0a
    176a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    176c:	89 85       	ldd	r24, Y+9	; 0x09
    176e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	51 f7       	brne	.-44     	; 0x1748 <AppendNum+0x110>
    1774:	17 c0       	rjmp	.+46     	; 0x17a4 <AppendNum+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1776:	6d 81       	ldd	r22, Y+5	; 0x05
    1778:	7e 81       	ldd	r23, Y+6	; 0x06
    177a:	8f 81       	ldd	r24, Y+7	; 0x07
    177c:	98 85       	ldd	r25, Y+8	; 0x08
    177e:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	9a 87       	std	Y+10, r25	; 0x0a
    1788:	89 87       	std	Y+9, r24	; 0x09
    178a:	89 85       	ldd	r24, Y+9	; 0x09
    178c:	9a 85       	ldd	r25, Y+10	; 0x0a
    178e:	9e 87       	std	Y+14, r25	; 0x0e
    1790:	8d 87       	std	Y+13, r24	; 0x0d
    1792:	8d 85       	ldd	r24, Y+13	; 0x0d
    1794:	9e 85       	ldd	r25, Y+14	; 0x0e
    1796:	8c 01       	movw	r16, r24
    1798:	c8 01       	movw	r24, r16
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	f1 f7       	brne	.-4      	; 0x179a <AppendNum+0x162>
    179e:	8c 01       	movw	r16, r24
    17a0:	1e 87       	std	Y+14, r17	; 0x0e
    17a2:	0d 87       	std	Y+13, r16	; 0x0d
		_delay_ms(50);

		ResetData();
    17a4:	0e 94 00 0b 	call	0x1600	; 0x1600 <ResetData>
		return;
    17a8:	2f c0       	rjmp	.+94     	; 0x1808 <AppendNum+0x1d0>
	}

	CurrNum = CurrNum * 10 + n;
    17aa:	80 91 32 01 	lds	r24, 0x0132
    17ae:	90 91 33 01 	lds	r25, 0x0133
    17b2:	a0 91 34 01 	lds	r26, 0x0134
    17b6:	b0 91 35 01 	lds	r27, 0x0135
    17ba:	2a e0       	ldi	r18, 0x0A	; 10
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e0       	ldi	r20, 0x00	; 0
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	bc 01       	movw	r22, r24
    17c4:	cd 01       	movw	r24, r26
    17c6:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__mulsi3>
    17ca:	9b 01       	movw	r18, r22
    17cc:	ac 01       	movw	r20, r24
    17ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a0 e0       	ldi	r26, 0x00	; 0
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	82 0f       	add	r24, r18
    17da:	93 1f       	adc	r25, r19
    17dc:	a4 1f       	adc	r26, r20
    17de:	b5 1f       	adc	r27, r21
    17e0:	80 93 32 01 	sts	0x0132, r24
    17e4:	90 93 33 01 	sts	0x0133, r25
    17e8:	a0 93 34 01 	sts	0x0134, r26
    17ec:	b0 93 35 01 	sts	0x0135, r27
	LCD_WriteNum(CurrNum);
    17f0:	80 91 32 01 	lds	r24, 0x0132
    17f4:	90 91 33 01 	lds	r25, 0x0133
    17f8:	a0 91 34 01 	lds	r26, 0x0134
    17fc:	b0 91 35 01 	lds	r27, 0x0135
    1800:	bc 01       	movw	r22, r24
    1802:	cd 01       	movw	r24, r26
    1804:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LCD_WriteNum>
}
    1808:	2f 96       	adiw	r28, 0x0f	; 15
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	de bf       	out	0x3e, r29	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	cd bf       	out	0x3d, r28	; 61
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	08 95       	ret

0000181e <CalcNum>:

void CalcNum(char Sign)
{	
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	0f 92       	push	r0
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	89 83       	std	Y+1, r24	; 0x01
	GetResult(PrevSign, Sign);
    182a:	20 e5       	ldi	r18, 0x50	; 80
    182c:	3c e0       	ldi	r19, 0x0C	; 12
    182e:	80 91 31 01 	lds	r24, 0x0131
    1832:	88 2f       	mov	r24, r24
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	49 81       	ldd	r20, Y+1	; 0x01
    1838:	44 2f       	mov	r20, r20
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	ba 01       	movw	r22, r20
    183e:	f9 01       	movw	r30, r18
    1840:	09 95       	icall
	PrevSign = Sign;
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	80 93 31 01 	sts	0x0131, r24

	switch(Sign)
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	88 2f       	mov	r24, r24
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	82 30       	cpi	r24, 0x02	; 2
    1850:	91 05       	cpc	r25, r1
    1852:	99 f0       	breq	.+38     	; 0x187a <CalcNum+0x5c>
    1854:	83 30       	cpi	r24, 0x03	; 3
    1856:	91 05       	cpc	r25, r1
    1858:	24 f4       	brge	.+8      	; 0x1862 <CalcNum+0x44>
    185a:	81 30       	cpi	r24, 0x01	; 1
    185c:	91 05       	cpc	r25, r1
    185e:	41 f0       	breq	.+16     	; 0x1870 <CalcNum+0x52>
    1860:	1b c0       	rjmp	.+54     	; 0x1898 <CalcNum+0x7a>
    1862:	83 30       	cpi	r24, 0x03	; 3
    1864:	91 05       	cpc	r25, r1
    1866:	71 f0       	breq	.+28     	; 0x1884 <CalcNum+0x66>
    1868:	84 30       	cpi	r24, 0x04	; 4
    186a:	91 05       	cpc	r25, r1
    186c:	81 f0       	breq	.+32     	; 0x188e <CalcNum+0x70>
    186e:	14 c0       	rjmp	.+40     	; 0x1898 <CalcNum+0x7a>
	{
	case 1:
		LCD_WriteString(" + ");
    1870:	8d e0       	ldi	r24, 0x0D	; 13
    1872:	91 e0       	ldi	r25, 0x01	; 1
    1874:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_WriteString>
		break;
    1878:	0f c0       	rjmp	.+30     	; 0x1898 <CalcNum+0x7a>

	case 2:
		LCD_WriteString(" - ");
    187a:	81 e1       	ldi	r24, 0x11	; 17
    187c:	91 e0       	ldi	r25, 0x01	; 1
    187e:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_WriteString>
		break;
    1882:	0a c0       	rjmp	.+20     	; 0x1898 <CalcNum+0x7a>
	
	case 3:
		LCD_WriteString(" * ");
    1884:	85 e1       	ldi	r24, 0x15	; 21
    1886:	91 e0       	ldi	r25, 0x01	; 1
    1888:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_WriteString>
		break;
    188c:	05 c0       	rjmp	.+10     	; 0x1898 <CalcNum+0x7a>

	case 4:
		LCD_WriteString(" / ");
    188e:	89 e1       	ldi	r24, 0x19	; 25
    1890:	91 e0       	ldi	r25, 0x01	; 1
    1892:	0e 94 10 09 	call	0x1220	; 0x1220 <LCD_WriteString>
		break;
    1896:	00 00       	nop
	}
}
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <GetResult>:

void GetResult(char PrevSign, char Sign)
{
    18a0:	ef 92       	push	r14
    18a2:	ff 92       	push	r15
    18a4:	0f 93       	push	r16
    18a6:	1f 93       	push	r17
    18a8:	df 93       	push	r29
    18aa:	cf 93       	push	r28
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <GetResult+0xe>
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <GetResult+0x10>
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <GetResult+0x12>
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	8d 83       	std	Y+5, r24	; 0x05
    18b8:	6e 83       	std	Y+6, r22	; 0x06
	long m_Result = 0;
    18ba:	19 82       	std	Y+1, r1	; 0x01
    18bc:	1a 82       	std	Y+2, r1	; 0x02
    18be:	1b 82       	std	Y+3, r1	; 0x03
    18c0:	1c 82       	std	Y+4, r1	; 0x04

	switch(PrevSign)
    18c2:	8d 81       	ldd	r24, Y+5	; 0x05
    18c4:	88 2f       	mov	r24, r24
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	82 30       	cpi	r24, 0x02	; 2
    18ca:	91 05       	cpc	r25, r1
    18cc:	59 f1       	breq	.+86     	; 0x1924 <GetResult+0x84>
    18ce:	83 30       	cpi	r24, 0x03	; 3
    18d0:	91 05       	cpc	r25, r1
    18d2:	3c f4       	brge	.+14     	; 0x18e2 <GetResult+0x42>
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	09 f4       	brne	.+2      	; 0x18da <GetResult+0x3a>
    18d8:	76 c0       	rjmp	.+236    	; 0x19c6 <GetResult+0x126>
    18da:	81 30       	cpi	r24, 0x01	; 1
    18dc:	91 05       	cpc	r25, r1
    18de:	49 f0       	breq	.+18     	; 0x18f2 <GetResult+0x52>
    18e0:	83 c0       	rjmp	.+262    	; 0x19e8 <GetResult+0x148>
    18e2:	83 30       	cpi	r24, 0x03	; 3
    18e4:	91 05       	cpc	r25, r1
    18e6:	d9 f1       	breq	.+118    	; 0x195e <GetResult+0xbe>
    18e8:	84 30       	cpi	r24, 0x04	; 4
    18ea:	91 05       	cpc	r25, r1
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <GetResult+0x50>
    18ee:	52 c0       	rjmp	.+164    	; 0x1994 <GetResult+0xf4>
    18f0:	7b c0       	rjmp	.+246    	; 0x19e8 <GetResult+0x148>
	{
	case 1:
		m_Result = Result + CurrNum;
    18f2:	20 91 2c 01 	lds	r18, 0x012C
    18f6:	30 91 2d 01 	lds	r19, 0x012D
    18fa:	40 91 2e 01 	lds	r20, 0x012E
    18fe:	50 91 2f 01 	lds	r21, 0x012F
    1902:	80 91 32 01 	lds	r24, 0x0132
    1906:	90 91 33 01 	lds	r25, 0x0133
    190a:	a0 91 34 01 	lds	r26, 0x0134
    190e:	b0 91 35 01 	lds	r27, 0x0135
    1912:	82 0f       	add	r24, r18
    1914:	93 1f       	adc	r25, r19
    1916:	a4 1f       	adc	r26, r20
    1918:	b5 1f       	adc	r27, r21
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	9a 83       	std	Y+2, r25	; 0x02
    191e:	ab 83       	std	Y+3, r26	; 0x03
    1920:	bc 83       	std	Y+4, r27	; 0x04
		break;
    1922:	62 c0       	rjmp	.+196    	; 0x19e8 <GetResult+0x148>

	case 2:
		m_Result = Result - CurrNum;
    1924:	20 91 2c 01 	lds	r18, 0x012C
    1928:	30 91 2d 01 	lds	r19, 0x012D
    192c:	40 91 2e 01 	lds	r20, 0x012E
    1930:	50 91 2f 01 	lds	r21, 0x012F
    1934:	80 91 32 01 	lds	r24, 0x0132
    1938:	90 91 33 01 	lds	r25, 0x0133
    193c:	a0 91 34 01 	lds	r26, 0x0134
    1940:	b0 91 35 01 	lds	r27, 0x0135
    1944:	79 01       	movw	r14, r18
    1946:	8a 01       	movw	r16, r20
    1948:	e8 1a       	sub	r14, r24
    194a:	f9 0a       	sbc	r15, r25
    194c:	0a 0b       	sbc	r16, r26
    194e:	1b 0b       	sbc	r17, r27
    1950:	d8 01       	movw	r26, r16
    1952:	c7 01       	movw	r24, r14
    1954:	89 83       	std	Y+1, r24	; 0x01
    1956:	9a 83       	std	Y+2, r25	; 0x02
    1958:	ab 83       	std	Y+3, r26	; 0x03
    195a:	bc 83       	std	Y+4, r27	; 0x04
		break;
    195c:	45 c0       	rjmp	.+138    	; 0x19e8 <GetResult+0x148>

	case 3:
		m_Result = Result * CurrNum;
    195e:	80 91 2c 01 	lds	r24, 0x012C
    1962:	90 91 2d 01 	lds	r25, 0x012D
    1966:	a0 91 2e 01 	lds	r26, 0x012E
    196a:	b0 91 2f 01 	lds	r27, 0x012F
    196e:	20 91 32 01 	lds	r18, 0x0132
    1972:	30 91 33 01 	lds	r19, 0x0133
    1976:	40 91 34 01 	lds	r20, 0x0134
    197a:	50 91 35 01 	lds	r21, 0x0135
    197e:	bc 01       	movw	r22, r24
    1980:	cd 01       	movw	r24, r26
    1982:	0e 94 43 15 	call	0x2a86	; 0x2a86 <__mulsi3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	ab 83       	std	Y+3, r26	; 0x03
    1990:	bc 83       	std	Y+4, r27	; 0x04
		break;
    1992:	2a c0       	rjmp	.+84     	; 0x19e8 <GetResult+0x148>

	case 4:
		m_Result = Result / CurrNum;
    1994:	80 91 2c 01 	lds	r24, 0x012C
    1998:	90 91 2d 01 	lds	r25, 0x012D
    199c:	a0 91 2e 01 	lds	r26, 0x012E
    19a0:	b0 91 2f 01 	lds	r27, 0x012F
    19a4:	20 91 32 01 	lds	r18, 0x0132
    19a8:	30 91 33 01 	lds	r19, 0x0133
    19ac:	40 91 34 01 	lds	r20, 0x0134
    19b0:	50 91 35 01 	lds	r21, 0x0135
    19b4:	bc 01       	movw	r22, r24
    19b6:	cd 01       	movw	r24, r26
    19b8:	0e 94 6e 15 	call	0x2adc	; 0x2adc <__divmodsi4>
    19bc:	29 83       	std	Y+1, r18	; 0x01
    19be:	3a 83       	std	Y+2, r19	; 0x02
    19c0:	4b 83       	std	Y+3, r20	; 0x03
    19c2:	5c 83       	std	Y+4, r21	; 0x04
		break;
    19c4:	11 c0       	rjmp	.+34     	; 0x19e8 <GetResult+0x148>

	case 0:
		if(Sign != 0)
    19c6:	8e 81       	ldd	r24, Y+6	; 0x06
    19c8:	88 23       	and	r24, r24
    19ca:	69 f0       	breq	.+26     	; 0x19e6 <GetResult+0x146>
			m_Result = CurrNum;
    19cc:	80 91 32 01 	lds	r24, 0x0132
    19d0:	90 91 33 01 	lds	r25, 0x0133
    19d4:	a0 91 34 01 	lds	r26, 0x0134
    19d8:	b0 91 35 01 	lds	r27, 0x0135
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	9a 83       	std	Y+2, r25	; 0x02
    19e0:	ab 83       	std	Y+3, r26	; 0x03
    19e2:	bc 83       	std	Y+4, r27	; 0x04

		break;
    19e4:	01 c0       	rjmp	.+2      	; 0x19e8 <GetResult+0x148>
    19e6:	00 00       	nop
	}

	CurrNum = 0;
    19e8:	10 92 32 01 	sts	0x0132, r1
    19ec:	10 92 33 01 	sts	0x0133, r1
    19f0:	10 92 34 01 	sts	0x0134, r1
    19f4:	10 92 35 01 	sts	0x0135, r1
	Result = 0;
    19f8:	10 92 2c 01 	sts	0x012C, r1
    19fc:	10 92 2d 01 	sts	0x012D, r1
    1a00:	10 92 2e 01 	sts	0x012E, r1
    1a04:	10 92 2f 01 	sts	0x012F, r1
	
	LCD_Command(0x01);
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	0e 94 67 00 	call	0xce	; 0xce <LCD_Command>

	if(Sign == 0 && PrevSign != 0)
    1a0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a10:	88 23       	and	r24, r24
    1a12:	09 f5       	brne	.+66     	; 0x1a56 <GetResult+0x1b6>
    1a14:	8d 81       	ldd	r24, Y+5	; 0x05
    1a16:	88 23       	and	r24, r24
    1a18:	f1 f0       	breq	.+60     	; 0x1a56 <GetResult+0x1b6>
	{
		Equaled++;
    1a1a:	80 91 38 01 	lds	r24, 0x0138
    1a1e:	8f 5f       	subi	r24, 0xFF	; 255
    1a20:	80 93 38 01 	sts	0x0138, r24
		CurrNum = m_Result;
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
    1a26:	9a 81       	ldd	r25, Y+2	; 0x02
    1a28:	ab 81       	ldd	r26, Y+3	; 0x03
    1a2a:	bc 81       	ldd	r27, Y+4	; 0x04
    1a2c:	80 93 32 01 	sts	0x0132, r24
    1a30:	90 93 33 01 	sts	0x0133, r25
    1a34:	a0 93 34 01 	sts	0x0134, r26
    1a38:	b0 93 35 01 	sts	0x0135, r27
		LCD_WriteNum(CurrNum);
    1a3c:	80 91 32 01 	lds	r24, 0x0132
    1a40:	90 91 33 01 	lds	r25, 0x0133
    1a44:	a0 91 34 01 	lds	r26, 0x0134
    1a48:	b0 91 35 01 	lds	r27, 0x0135
    1a4c:	bc 01       	movw	r22, r24
    1a4e:	cd 01       	movw	r24, r26
    1a50:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LCD_WriteNum>
    1a54:	1b c0       	rjmp	.+54     	; 0x1a8c <GetResult+0x1ec>
	}
	
	else if(Sign != 0)
    1a56:	8e 81       	ldd	r24, Y+6	; 0x06
    1a58:	88 23       	and	r24, r24
    1a5a:	c1 f0       	breq	.+48     	; 0x1a8c <GetResult+0x1ec>
	{
		Result = m_Result;
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a60:	ab 81       	ldd	r26, Y+3	; 0x03
    1a62:	bc 81       	ldd	r27, Y+4	; 0x04
    1a64:	80 93 2c 01 	sts	0x012C, r24
    1a68:	90 93 2d 01 	sts	0x012D, r25
    1a6c:	a0 93 2e 01 	sts	0x012E, r26
    1a70:	b0 93 2f 01 	sts	0x012F, r27
		LCD_WriteNum(Result);
    1a74:	80 91 2c 01 	lds	r24, 0x012C
    1a78:	90 91 2d 01 	lds	r25, 0x012D
    1a7c:	a0 91 2e 01 	lds	r26, 0x012E
    1a80:	b0 91 2f 01 	lds	r27, 0x012F
    1a84:	bc 01       	movw	r22, r24
    1a86:	cd 01       	movw	r24, r26
    1a88:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <LCD_WriteNum>
	}
}
    1a8c:	26 96       	adiw	r28, 0x06	; 6
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	1f 91       	pop	r17
    1a9e:	0f 91       	pop	r16
    1aa0:	ff 90       	pop	r15
    1aa2:	ef 90       	pop	r14
    1aa4:	08 95       	ret

00001aa6 <ButtonProcess_Calc>:

int ButtonProcess_Calc(int Key)
{
    1aa6:	df 93       	push	r29
    1aa8:	cf 93       	push	r28
    1aaa:	00 d0       	rcall	.+0      	; 0x1aac <ButtonProcess_Calc+0x6>
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	89 83       	std	Y+1, r24	; 0x01
	switch(Key)
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab8:	80 38       	cpi	r24, 0x80	; 128
    1aba:	91 05       	cpc	r25, r1
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <ButtonProcess_Calc+0x1a>
    1abe:	6d c0       	rjmp	.+218    	; 0x1b9a <ButtonProcess_Calc+0xf4>
    1ac0:	81 38       	cpi	r24, 0x81	; 129
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	04 f5       	brge	.+64     	; 0x1b06 <ButtonProcess_Calc+0x60>
    1ac6:	88 30       	cpi	r24, 0x08	; 8
    1ac8:	91 05       	cpc	r25, r1
    1aca:	09 f4       	brne	.+2      	; 0x1ace <ButtonProcess_Calc+0x28>
    1acc:	76 c0       	rjmp	.+236    	; 0x1bba <ButtonProcess_Calc+0x114>
    1ace:	89 30       	cpi	r24, 0x09	; 9
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	6c f4       	brge	.+26     	; 0x1aee <ButtonProcess_Calc+0x48>
    1ad4:	82 30       	cpi	r24, 0x02	; 2
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <ButtonProcess_Calc+0x36>
    1ada:	67 c0       	rjmp	.+206    	; 0x1baa <ButtonProcess_Calc+0x104>
    1adc:	84 30       	cpi	r24, 0x04	; 4
    1ade:	91 05       	cpc	r25, r1
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <ButtonProcess_Calc+0x3e>
    1ae2:	67 c0       	rjmp	.+206    	; 0x1bb2 <ButtonProcess_Calc+0x10c>
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <ButtonProcess_Calc+0x46>
    1aea:	5b c0       	rjmp	.+182    	; 0x1ba2 <ButtonProcess_Calc+0xfc>
    1aec:	6a c0       	rjmp	.+212    	; 0x1bc2 <ButtonProcess_Calc+0x11c>
    1aee:	80 32       	cpi	r24, 0x20	; 32
    1af0:	91 05       	cpc	r25, r1
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <ButtonProcess_Calc+0x50>
    1af4:	42 c0       	rjmp	.+132    	; 0x1b7a <ButtonProcess_Calc+0xd4>
    1af6:	80 34       	cpi	r24, 0x40	; 64
    1af8:	91 05       	cpc	r25, r1
    1afa:	99 f1       	breq	.+102    	; 0x1b62 <ButtonProcess_Calc+0xbc>
    1afc:	80 31       	cpi	r24, 0x10	; 16
    1afe:	91 05       	cpc	r25, r1
    1b00:	09 f4       	brne	.+2      	; 0x1b04 <ButtonProcess_Calc+0x5e>
    1b02:	47 c0       	rjmp	.+142    	; 0x1b92 <ButtonProcess_Calc+0xec>
    1b04:	5e c0       	rjmp	.+188    	; 0x1bc2 <ButtonProcess_Calc+0x11c>
    1b06:	28 e0       	ldi	r18, 0x08	; 8
    1b08:	80 30       	cpi	r24, 0x00	; 0
    1b0a:	92 07       	cpc	r25, r18
    1b0c:	f1 f0       	breq	.+60     	; 0x1b4a <ButtonProcess_Calc+0xa4>
    1b0e:	28 e0       	ldi	r18, 0x08	; 8
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	92 07       	cpc	r25, r18
    1b14:	6c f4       	brge	.+26     	; 0x1b30 <ButtonProcess_Calc+0x8a>
    1b16:	22 e0       	ldi	r18, 0x02	; 2
    1b18:	80 30       	cpi	r24, 0x00	; 0
    1b1a:	92 07       	cpc	r25, r18
    1b1c:	51 f1       	breq	.+84     	; 0x1b72 <ButtonProcess_Calc+0xcc>
    1b1e:	24 e0       	ldi	r18, 0x04	; 4
    1b20:	80 30       	cpi	r24, 0x00	; 0
    1b22:	92 07       	cpc	r25, r18
    1b24:	d1 f0       	breq	.+52     	; 0x1b5a <ButtonProcess_Calc+0xb4>
    1b26:	21 e0       	ldi	r18, 0x01	; 1
    1b28:	80 30       	cpi	r24, 0x00	; 0
    1b2a:	92 07       	cpc	r25, r18
    1b2c:	71 f1       	breq	.+92     	; 0x1b8a <ButtonProcess_Calc+0xe4>
    1b2e:	49 c0       	rjmp	.+146    	; 0x1bc2 <ButtonProcess_Calc+0x11c>
    1b30:	20 e2       	ldi	r18, 0x20	; 32
    1b32:	80 30       	cpi	r24, 0x00	; 0
    1b34:	92 07       	cpc	r25, r18
    1b36:	c9 f0       	breq	.+50     	; 0x1b6a <ButtonProcess_Calc+0xc4>
    1b38:	20 e4       	ldi	r18, 0x40	; 64
    1b3a:	80 30       	cpi	r24, 0x00	; 0
    1b3c:	92 07       	cpc	r25, r18
    1b3e:	49 f0       	breq	.+18     	; 0x1b52 <ButtonProcess_Calc+0xac>
    1b40:	20 e1       	ldi	r18, 0x10	; 16
    1b42:	80 30       	cpi	r24, 0x00	; 0
    1b44:	92 07       	cpc	r25, r18
    1b46:	e9 f0       	breq	.+58     	; 0x1b82 <ButtonProcess_Calc+0xdc>
    1b48:	3c c0       	rjmp	.+120    	; 0x1bc2 <ButtonProcess_Calc+0x11c>
	{
	case 0x0800:
		AppendNum(0);
    1b4a:	80 e0       	ldi	r24, 0x00	; 0
    1b4c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <AppendNum>
		break;
    1b50:	38 c0       	rjmp	.+112    	; 0x1bc2 <ButtonProcess_Calc+0x11c>

	case 0x4000:
		AppendNum(1);
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	0e 94 1c 0b 	call	0x1638	; 0x1638 <AppendNum>
		break;
    1b58:	34 c0       	rjmp	.+104    	; 0x1bc2 <ButtonProcess_Calc+0x11c>

	case 0x0400:
		AppendNum(2);
    1b5a:	82 e0       	ldi	r24, 0x02	; 2
    1b5c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <AppendNum>
		break;
    1b60:	30 c0       	rjmp	.+96     	; 0x1bc2 <ButtonProcess_Calc+0x11c>

	case 0x0040:
		AppendNum(3);
    1b62:	83 e0       	ldi	r24, 0x03	; 3
    1b64:	0e 94 1c 0b 	call	0x1638	; 0x1638 <AppendNum>
		break;
    1b68:	2c c0       	rjmp	.+88     	; 0x1bc2 <ButtonProcess_Calc+0x11c>

	case 0x2000:
		AppendNum(4);
    1b6a:	84 e0       	ldi	r24, 0x04	; 4
    1b6c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <AppendNum>
		break;
    1b70:	28 c0       	rjmp	.+80     	; 0x1bc2 <ButtonProcess_Calc+0x11c>

	case 0x0200:
		AppendNum(5);
    1b72:	85 e0       	ldi	r24, 0x05	; 5
    1b74:	0e 94 1c 0b 	call	0x1638	; 0x1638 <AppendNum>
		break;
    1b78:	24 c0       	rjmp	.+72     	; 0x1bc2 <ButtonProcess_Calc+0x11c>

	case 0x0020:
		AppendNum(6);
    1b7a:	86 e0       	ldi	r24, 0x06	; 6
    1b7c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <AppendNum>
		break;
    1b80:	20 c0       	rjmp	.+64     	; 0x1bc2 <ButtonProcess_Calc+0x11c>

	case 0x1000:
		AppendNum(7);
    1b82:	87 e0       	ldi	r24, 0x07	; 7
    1b84:	0e 94 1c 0b 	call	0x1638	; 0x1638 <AppendNum>
		break;
    1b88:	1c c0       	rjmp	.+56     	; 0x1bc2 <ButtonProcess_Calc+0x11c>

	case 0x0100:
		AppendNum(8);
    1b8a:	88 e0       	ldi	r24, 0x08	; 8
    1b8c:	0e 94 1c 0b 	call	0x1638	; 0x1638 <AppendNum>
		break;
    1b90:	18 c0       	rjmp	.+48     	; 0x1bc2 <ButtonProcess_Calc+0x11c>

	case 0x0010:
		AppendNum(9);
    1b92:	89 e0       	ldi	r24, 0x09	; 9
    1b94:	0e 94 1c 0b 	call	0x1638	; 0x1638 <AppendNum>
		break;
    1b98:	14 c0       	rjmp	.+40     	; 0x1bc2 <ButtonProcess_Calc+0x11c>

	case 0x0080:
		CalcNum(0);
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	0e 94 0f 0c 	call	0x181e	; 0x181e <CalcNum>
		break;
    1ba0:	10 c0       	rjmp	.+32     	; 0x1bc2 <ButtonProcess_Calc+0x11c>

	case 0x0001:
		CalcNum(1);
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	0e 94 0f 0c 	call	0x181e	; 0x181e <CalcNum>
		break;
    1ba8:	0c c0       	rjmp	.+24     	; 0x1bc2 <ButtonProcess_Calc+0x11c>

	case 0x0002:
		CalcNum(2);
    1baa:	82 e0       	ldi	r24, 0x02	; 2
    1bac:	0e 94 0f 0c 	call	0x181e	; 0x181e <CalcNum>
		break;
    1bb0:	08 c0       	rjmp	.+16     	; 0x1bc2 <ButtonProcess_Calc+0x11c>

	case 0x0004:
		CalcNum(3);
    1bb2:	83 e0       	ldi	r24, 0x03	; 3
    1bb4:	0e 94 0f 0c 	call	0x181e	; 0x181e <CalcNum>
		break;
    1bb8:	04 c0       	rjmp	.+8      	; 0x1bc2 <ButtonProcess_Calc+0x11c>

	case 0x0008:
		CalcNum(4);
    1bba:	84 e0       	ldi	r24, 0x04	; 4
    1bbc:	0e 94 0f 0c 	call	0x181e	; 0x181e <CalcNum>
		break;
    1bc0:	00 00       	nop
	}
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <WriteTime>:

char Hours, Minutes, Seconds;
char TimeCounter = 0;

void WriteTime()
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	0f 92       	push	r0
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
	char tmp;
	SetWritePos(0x00);
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	0e 94 02 09 	call	0x1204	; 0x1204 <SetWritePos>

	tmp = Hours;
    1bdc:	80 91 30 01 	lds	r24, 0x0130
    1be0:	89 83       	std	Y+1, r24	; 0x01
	LCD_Data('0' + (char)(tmp / 10));
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	9a e0       	ldi	r25, 0x0A	; 10
    1be6:	69 2f       	mov	r22, r25
    1be8:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__udivmodqi4>
    1bec:	80 5d       	subi	r24, 0xD0	; 208
    1bee:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_Data>
	LCD_Data('0' + (char)(tmp % 10));
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	9a e0       	ldi	r25, 0x0A	; 10
    1bf6:	69 2f       	mov	r22, r25
    1bf8:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__udivmodqi4>
    1bfc:	89 2f       	mov	r24, r25
    1bfe:	80 5d       	subi	r24, 0xD0	; 208
    1c00:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_Data>

	LCD_Data(':');
    1c04:	8a e3       	ldi	r24, 0x3A	; 58
    1c06:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_Data>

	tmp = Minutes;
    1c0a:	80 91 36 01 	lds	r24, 0x0136
    1c0e:	89 83       	std	Y+1, r24	; 0x01
	LCD_Data('0' + (char)(tmp / 10));
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	9a e0       	ldi	r25, 0x0A	; 10
    1c14:	69 2f       	mov	r22, r25
    1c16:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__udivmodqi4>
    1c1a:	80 5d       	subi	r24, 0xD0	; 208
    1c1c:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_Data>
	LCD_Data('0' + (char)(tmp % 10));
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	9a e0       	ldi	r25, 0x0A	; 10
    1c24:	69 2f       	mov	r22, r25
    1c26:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__udivmodqi4>
    1c2a:	89 2f       	mov	r24, r25
    1c2c:	80 5d       	subi	r24, 0xD0	; 208
    1c2e:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_Data>

	LCD_Data(':');
    1c32:	8a e3       	ldi	r24, 0x3A	; 58
    1c34:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_Data>

	tmp = Seconds;
    1c38:	80 91 37 01 	lds	r24, 0x0137
    1c3c:	89 83       	std	Y+1, r24	; 0x01
	LCD_Data('0' + (char)(tmp / 10));
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	9a e0       	ldi	r25, 0x0A	; 10
    1c42:	69 2f       	mov	r22, r25
    1c44:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__udivmodqi4>
    1c48:	80 5d       	subi	r24, 0xD0	; 208
    1c4a:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_Data>
	LCD_Data('0' + (char)(tmp % 10));
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	9a e0       	ldi	r25, 0x0A	; 10
    1c52:	69 2f       	mov	r22, r25
    1c54:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <__udivmodqi4>
    1c58:	89 2f       	mov	r24, r25
    1c5a:	80 5d       	subi	r24, 0xD0	; 208
    1c5c:	0e 94 bf 02 	call	0x57e	; 0x57e <LCD_Data>
}
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <ButtonProcess_Clock>:

void ButtonProcess_Clock(int Key)
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <ButtonProcess_Clock+0x6>
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	9a 83       	std	Y+2, r25	; 0x02
    1c74:	89 83       	std	Y+1, r24	; 0x01
	if(Key == 0x0001)
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	61 f4       	brne	.+24     	; 0x1c98 <ButtonProcess_Clock+0x30>
	{
		Minutes++;
    1c80:	80 91 36 01 	lds	r24, 0x0136
    1c84:	8f 5f       	subi	r24, 0xFF	; 255
    1c86:	80 93 36 01 	sts	0x0136, r24
		
		if(Minutes == 60) Minutes = 0;
    1c8a:	80 91 36 01 	lds	r24, 0x0136
    1c8e:	8c 33       	cpi	r24, 0x3C	; 60
    1c90:	a1 f4       	brne	.+40     	; 0x1cba <ButtonProcess_Clock+0x52>
    1c92:	10 92 36 01 	sts	0x0136, r1
    1c96:	11 c0       	rjmp	.+34     	; 0x1cba <ButtonProcess_Clock+0x52>
	}
	else if(Key == 0x0010)
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9c:	80 31       	cpi	r24, 0x10	; 16
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	61 f4       	brne	.+24     	; 0x1cba <ButtonProcess_Clock+0x52>
	{
		if(Minutes == 0) Minutes = 60;
    1ca2:	80 91 36 01 	lds	r24, 0x0136
    1ca6:	88 23       	and	r24, r24
    1ca8:	19 f4       	brne	.+6      	; 0x1cb0 <ButtonProcess_Clock+0x48>
    1caa:	8c e3       	ldi	r24, 0x3C	; 60
    1cac:	80 93 36 01 	sts	0x0136, r24
		Minutes--;
    1cb0:	80 91 36 01 	lds	r24, 0x0136
    1cb4:	81 50       	subi	r24, 0x01	; 1
    1cb6:	80 93 36 01 	sts	0x0136, r24
	}
	
	if(Key == 0x0100)
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	21 e0       	ldi	r18, 0x01	; 1
    1cc0:	80 30       	cpi	r24, 0x00	; 0
    1cc2:	92 07       	cpc	r25, r18
    1cc4:	61 f4       	brne	.+24     	; 0x1cde <ButtonProcess_Clock+0x76>
	{
		Hours++;
    1cc6:	80 91 30 01 	lds	r24, 0x0130
    1cca:	8f 5f       	subi	r24, 0xFF	; 255
    1ccc:	80 93 30 01 	sts	0x0130, r24
		
		if(Hours == 24) Hours = 0;
    1cd0:	80 91 30 01 	lds	r24, 0x0130
    1cd4:	88 31       	cpi	r24, 0x18	; 24
    1cd6:	a9 f4       	brne	.+42     	; 0x1d02 <ButtonProcess_Clock+0x9a>
    1cd8:	10 92 30 01 	sts	0x0130, r1
    1cdc:	12 c0       	rjmp	.+36     	; 0x1d02 <ButtonProcess_Clock+0x9a>
	}
	else if(Key == 0x1000)
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce2:	20 e1       	ldi	r18, 0x10	; 16
    1ce4:	80 30       	cpi	r24, 0x00	; 0
    1ce6:	92 07       	cpc	r25, r18
    1ce8:	61 f4       	brne	.+24     	; 0x1d02 <ButtonProcess_Clock+0x9a>
	{
		if(Hours == 0) Hours = 24;
    1cea:	80 91 30 01 	lds	r24, 0x0130
    1cee:	88 23       	and	r24, r24
    1cf0:	19 f4       	brne	.+6      	; 0x1cf8 <ButtonProcess_Clock+0x90>
    1cf2:	88 e1       	ldi	r24, 0x18	; 24
    1cf4:	80 93 30 01 	sts	0x0130, r24
		Hours--;
    1cf8:	80 91 30 01 	lds	r24, 0x0130
    1cfc:	81 50       	subi	r24, 0x01	; 1
    1cfe:	80 93 30 01 	sts	0x0130, r24
	}
	
	if(Key == 0x2000)
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	9a 81       	ldd	r25, Y+2	; 0x02
    1d06:	20 e2       	ldi	r18, 0x20	; 32
    1d08:	80 30       	cpi	r24, 0x00	; 0
    1d0a:	92 07       	cpc	r25, r18
    1d0c:	11 f4       	brne	.+4      	; 0x1d12 <ButtonProcess_Clock+0xaa>
		Seconds = 0;
    1d0e:	10 92 37 01 	sts	0x0137, r1

	if(Key == 0x4000)
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	9a 81       	ldd	r25, Y+2	; 0x02
    1d16:	20 e4       	ldi	r18, 0x40	; 64
    1d18:	80 30       	cpi	r24, 0x00	; 0
    1d1a:	92 07       	cpc	r25, r18
    1d1c:	51 f4       	brne	.+20     	; 0x1d32 <ButtonProcess_Clock+0xca>
		Hours = Minutes = Seconds = 0;
    1d1e:	10 92 37 01 	sts	0x0137, r1
    1d22:	80 91 37 01 	lds	r24, 0x0137
    1d26:	80 93 36 01 	sts	0x0136, r24
    1d2a:	80 91 36 01 	lds	r24, 0x0136
    1d2e:	80 93 30 01 	sts	0x0130, r24
}
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <TimeProcess>:

void TimeProcess(char OutputMode)
{
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	0f 92       	push	r0
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	89 83       	std	Y+1, r24	; 0x01
	if(OutputMode == 0)
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	88 23       	and	r24, r24
    1d4c:	11 f4       	brne	.+4      	; 0x1d52 <TimeProcess+0x16>
		WriteTime();
    1d4e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <WriteTime>
	
	if(TimeCounter >= 125)
    1d52:	80 91 2a 01 	lds	r24, 0x012A
    1d56:	8d 37       	cpi	r24, 0x7D	; 125
    1d58:	30 f1       	brcs	.+76     	; 0x1da6 <TimeProcess+0x6a>
	{
		TimeCounter -= 125;
    1d5a:	80 91 2a 01 	lds	r24, 0x012A
    1d5e:	8d 57       	subi	r24, 0x7D	; 125
    1d60:	80 93 2a 01 	sts	0x012A, r24
		Seconds++;
    1d64:	80 91 37 01 	lds	r24, 0x0137
    1d68:	8f 5f       	subi	r24, 0xFF	; 255
    1d6a:	80 93 37 01 	sts	0x0137, r24
		if(Seconds == 60)
    1d6e:	80 91 37 01 	lds	r24, 0x0137
    1d72:	8c 33       	cpi	r24, 0x3C	; 60
    1d74:	c1 f4       	brne	.+48     	; 0x1da6 <TimeProcess+0x6a>
		{
			Minutes++;
    1d76:	80 91 36 01 	lds	r24, 0x0136
    1d7a:	8f 5f       	subi	r24, 0xFF	; 255
    1d7c:	80 93 36 01 	sts	0x0136, r24
			Seconds = 0;
    1d80:	10 92 37 01 	sts	0x0137, r1

			if(Minutes == 60)
    1d84:	80 91 36 01 	lds	r24, 0x0136
    1d88:	8c 33       	cpi	r24, 0x3C	; 60
    1d8a:	69 f4       	brne	.+26     	; 0x1da6 <TimeProcess+0x6a>
			{
				Hours++;
    1d8c:	80 91 30 01 	lds	r24, 0x0130
    1d90:	8f 5f       	subi	r24, 0xFF	; 255
    1d92:	80 93 30 01 	sts	0x0130, r24
				Minutes = 0;
    1d96:	10 92 36 01 	sts	0x0136, r1

				if(Hours == 24)
    1d9a:	80 91 30 01 	lds	r24, 0x0130
    1d9e:	88 31       	cpi	r24, 0x18	; 24
    1da0:	11 f4       	brne	.+4      	; 0x1da6 <TimeProcess+0x6a>
					Hours = 0;
    1da2:	10 92 30 01 	sts	0x0130, r1
			}
		}
	}	
}
    1da6:	0f 90       	pop	r0
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <main>:
#include <avr/interrupt.h>

char Mode = 0;

void main(void)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
    1db6:	8a e3       	ldi	r24, 0x3A	; 58
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	2f ef       	ldi	r18, 0xFF	; 255
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	20 83       	st	Z, r18
	DDRC = 0xFF;
    1dc0:	84 e3       	ldi	r24, 0x34	; 52
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	2f ef       	ldi	r18, 0xFF	; 255
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	20 83       	st	Z, r18
	DDRD = 0xFF;
    1dca:	81 e3       	ldi	r24, 0x31	; 49
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	2f ef       	ldi	r18, 0xFF	; 255
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	20 83       	st	Z, r18
	DDRE = 0x00;
    1dd4:	82 e2       	ldi	r24, 0x22	; 34
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	fc 01       	movw	r30, r24
    1dda:	10 82       	st	Z, r1

	TCCR0 = 0b00000111;
    1ddc:	83 e5       	ldi	r24, 0x53	; 83
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	27 e0       	ldi	r18, 0x07	; 7
    1de2:	fc 01       	movw	r30, r24
    1de4:	20 83       	st	Z, r18
	TCNT0 = 130;
    1de6:	82 e5       	ldi	r24, 0x52	; 82
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	22 e8       	ldi	r18, 0x82	; 130
    1dec:	fc 01       	movw	r30, r24
    1dee:	20 83       	st	Z, r18
	TIMSK = 0x01;
    1df0:	87 e5       	ldi	r24, 0x57	; 87
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	21 e0       	ldi	r18, 0x01	; 1
    1df6:	fc 01       	movw	r30, r24
    1df8:	20 83       	st	Z, r18

	SREG = 0x80;
    1dfa:	8f e5       	ldi	r24, 0x5F	; 95
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	20 e8       	ldi	r18, 0x80	; 128
    1e00:	fc 01       	movw	r30, r24
    1e02:	20 83       	st	Z, r18

	InitLCD();
    1e04:	0e 94 c6 05 	call	0xb8c	; 0xb8c <InitLCD>
	
	SetWritePos(0x40);
    1e08:	80 e4       	ldi	r24, 0x40	; 64
    1e0a:	0e 94 02 09 	call	0x1204	; 0x1204 <SetWritePos>

	while(1)
	{
		if(InputProcess() == 1)
    1e0e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <InputProcess>
    1e12:	81 30       	cpi	r24, 0x01	; 1
    1e14:	d9 f4       	brne	.+54     	; 0x1e4c <main+0x9e>
		{
			if(GetCurrKey() == 0x8000)
    1e16:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <GetCurrKey>
    1e1a:	f0 e8       	ldi	r31, 0x80	; 128
    1e1c:	80 30       	cpi	r24, 0x00	; 0
    1e1e:	9f 07       	cpc	r25, r31
    1e20:	41 f4       	brne	.+16     	; 0x1e32 <main+0x84>
			{
				Mode ^= 1;
    1e22:	90 91 2b 01 	lds	r25, 0x012B
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	89 27       	eor	r24, r25
    1e2a:	80 93 2b 01 	sts	0x012B, r24
				ResetData();
    1e2e:	0e 94 00 0b 	call	0x1600	; 0x1600 <ResetData>
			}

			if(Mode == 1)
    1e32:	80 91 2b 01 	lds	r24, 0x012B
    1e36:	81 30       	cpi	r24, 0x01	; 1
    1e38:	29 f4       	brne	.+10     	; 0x1e44 <main+0x96>
				ButtonProcess_Calc(GetCurrKey());
    1e3a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <GetCurrKey>
    1e3e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <ButtonProcess_Calc>
    1e42:	04 c0       	rjmp	.+8      	; 0x1e4c <main+0x9e>

			else
				ButtonProcess_Clock(GetCurrKey());
    1e44:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <GetCurrKey>
    1e48:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <ButtonProcess_Clock>
		}

		TimeProcess(Mode);
    1e4c:	80 91 2b 01 	lds	r24, 0x012B
    1e50:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <TimeProcess>
	}
    1e54:	dc cf       	rjmp	.-72     	; 0x1e0e <main+0x60>

00001e56 <__vector_16>:
}

ISR(TIMER0_OVF_vect)
{
    1e56:	1f 92       	push	r1
    1e58:	0f 92       	push	r0
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	0f 92       	push	r0
    1e5e:	00 90 5b 00 	lds	r0, 0x005B
    1e62:	0f 92       	push	r0
    1e64:	11 24       	eor	r1, r1
    1e66:	2f 93       	push	r18
    1e68:	8f 93       	push	r24
    1e6a:	9f 93       	push	r25
    1e6c:	ef 93       	push	r30
    1e6e:	ff 93       	push	r31
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
	TimeCounter+= 16;
    1e78:	80 91 2a 01 	lds	r24, 0x012A
    1e7c:	80 5f       	subi	r24, 0xF0	; 240
    1e7e:	80 93 2a 01 	sts	0x012A, r24
	TCNT0 = 256-125;
    1e82:	82 e5       	ldi	r24, 0x52	; 82
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	23 e8       	ldi	r18, 0x83	; 131
    1e88:	fc 01       	movw	r30, r24
    1e8a:	20 83       	st	Z, r18
}
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	ff 91       	pop	r31
    1e92:	ef 91       	pop	r30
    1e94:	9f 91       	pop	r25
    1e96:	8f 91       	pop	r24
    1e98:	2f 91       	pop	r18
    1e9a:	0f 90       	pop	r0
    1e9c:	00 92 5b 00 	sts	0x005B, r0
    1ea0:	0f 90       	pop	r0
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	0f 90       	pop	r0
    1ea6:	1f 90       	pop	r1
    1ea8:	18 95       	reti

00001eaa <__fixunssfsi>:
    1eaa:	ef 92       	push	r14
    1eac:	ff 92       	push	r15
    1eae:	0f 93       	push	r16
    1eb0:	1f 93       	push	r17
    1eb2:	7b 01       	movw	r14, r22
    1eb4:	8c 01       	movw	r16, r24
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e0       	ldi	r20, 0x00	; 0
    1ebc:	5f e4       	ldi	r21, 0x4F	; 79
    1ebe:	0e 94 01 13 	call	0x2602	; 0x2602 <__gesf2>
    1ec2:	87 fd       	sbrc	r24, 7
    1ec4:	11 c0       	rjmp	.+34     	; 0x1ee8 <__fixunssfsi+0x3e>
    1ec6:	c8 01       	movw	r24, r16
    1ec8:	b7 01       	movw	r22, r14
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e0       	ldi	r20, 0x00	; 0
    1ed0:	5f e4       	ldi	r21, 0x4F	; 79
    1ed2:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__subsf3>
    1ed6:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__fixsfsi>
    1eda:	9b 01       	movw	r18, r22
    1edc:	ac 01       	movw	r20, r24
    1ede:	20 50       	subi	r18, 0x00	; 0
    1ee0:	30 40       	sbci	r19, 0x00	; 0
    1ee2:	40 40       	sbci	r20, 0x00	; 0
    1ee4:	50 48       	sbci	r21, 0x80	; 128
    1ee6:	06 c0       	rjmp	.+12     	; 0x1ef4 <__fixunssfsi+0x4a>
    1ee8:	c8 01       	movw	r24, r16
    1eea:	b7 01       	movw	r22, r14
    1eec:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__fixsfsi>
    1ef0:	9b 01       	movw	r18, r22
    1ef2:	ac 01       	movw	r20, r24
    1ef4:	b9 01       	movw	r22, r18
    1ef6:	ca 01       	movw	r24, r20
    1ef8:	1f 91       	pop	r17
    1efa:	0f 91       	pop	r16
    1efc:	ff 90       	pop	r15
    1efe:	ef 90       	pop	r14
    1f00:	08 95       	ret

00001f02 <_fpadd_parts>:
    1f02:	a0 e0       	ldi	r26, 0x00	; 0
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e7 e8       	ldi	r30, 0x87	; 135
    1f08:	ff e0       	ldi	r31, 0x0F	; 15
    1f0a:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <__prologue_saves__+0x8>
    1f0e:	fc 01       	movw	r30, r24
    1f10:	ea 01       	movw	r28, r20
    1f12:	80 81       	ld	r24, Z
    1f14:	82 30       	cpi	r24, 0x02	; 2
    1f16:	08 f4       	brcc	.+2      	; 0x1f1a <_fpadd_parts+0x18>
    1f18:	38 c1       	rjmp	.+624    	; 0x218a <_fpadd_parts+0x288>
    1f1a:	db 01       	movw	r26, r22
    1f1c:	9c 91       	ld	r25, X
    1f1e:	92 30       	cpi	r25, 0x02	; 2
    1f20:	08 f4       	brcc	.+2      	; 0x1f24 <_fpadd_parts+0x22>
    1f22:	30 c1       	rjmp	.+608    	; 0x2184 <_fpadd_parts+0x282>
    1f24:	84 30       	cpi	r24, 0x04	; 4
    1f26:	59 f4       	brne	.+22     	; 0x1f3e <_fpadd_parts+0x3c>
    1f28:	94 30       	cpi	r25, 0x04	; 4
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <_fpadd_parts+0x2c>
    1f2c:	2e c1       	rjmp	.+604    	; 0x218a <_fpadd_parts+0x288>
    1f2e:	91 81       	ldd	r25, Z+1	; 0x01
    1f30:	11 96       	adiw	r26, 0x01	; 1
    1f32:	8c 91       	ld	r24, X
    1f34:	11 97       	sbiw	r26, 0x01	; 1
    1f36:	98 17       	cp	r25, r24
    1f38:	09 f0       	breq	.+2      	; 0x1f3c <_fpadd_parts+0x3a>
    1f3a:	21 c1       	rjmp	.+578    	; 0x217e <_fpadd_parts+0x27c>
    1f3c:	26 c1       	rjmp	.+588    	; 0x218a <_fpadd_parts+0x288>
    1f3e:	94 30       	cpi	r25, 0x04	; 4
    1f40:	09 f4       	brne	.+2      	; 0x1f44 <_fpadd_parts+0x42>
    1f42:	20 c1       	rjmp	.+576    	; 0x2184 <_fpadd_parts+0x282>
    1f44:	92 30       	cpi	r25, 0x02	; 2
    1f46:	b1 f4       	brne	.+44     	; 0x1f74 <_fpadd_parts+0x72>
    1f48:	82 30       	cpi	r24, 0x02	; 2
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <_fpadd_parts+0x4c>
    1f4c:	1e c1       	rjmp	.+572    	; 0x218a <_fpadd_parts+0x288>
    1f4e:	ca 01       	movw	r24, r20
    1f50:	af 01       	movw	r20, r30
    1f52:	28 e0       	ldi	r18, 0x08	; 8
    1f54:	da 01       	movw	r26, r20
    1f56:	0d 90       	ld	r0, X+
    1f58:	ad 01       	movw	r20, r26
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	0d 92       	st	X+, r0
    1f5e:	cd 01       	movw	r24, r26
    1f60:	21 50       	subi	r18, 0x01	; 1
    1f62:	c1 f7       	brne	.-16     	; 0x1f54 <_fpadd_parts+0x52>
    1f64:	db 01       	movw	r26, r22
    1f66:	11 96       	adiw	r26, 0x01	; 1
    1f68:	8c 91       	ld	r24, X
    1f6a:	11 97       	sbiw	r26, 0x01	; 1
    1f6c:	91 81       	ldd	r25, Z+1	; 0x01
    1f6e:	89 23       	and	r24, r25
    1f70:	89 83       	std	Y+1, r24	; 0x01
    1f72:	0a c1       	rjmp	.+532    	; 0x2188 <_fpadd_parts+0x286>
    1f74:	82 30       	cpi	r24, 0x02	; 2
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <_fpadd_parts+0x78>
    1f78:	05 c1       	rjmp	.+522    	; 0x2184 <_fpadd_parts+0x282>
    1f7a:	c2 80       	ldd	r12, Z+2	; 0x02
    1f7c:	d3 80       	ldd	r13, Z+3	; 0x03
    1f7e:	db 01       	movw	r26, r22
    1f80:	12 96       	adiw	r26, 0x02	; 2
    1f82:	6d 90       	ld	r6, X+
    1f84:	7c 90       	ld	r7, X
    1f86:	13 97       	sbiw	r26, 0x03	; 3
    1f88:	24 81       	ldd	r18, Z+4	; 0x04
    1f8a:	35 81       	ldd	r19, Z+5	; 0x05
    1f8c:	46 81       	ldd	r20, Z+6	; 0x06
    1f8e:	57 81       	ldd	r21, Z+7	; 0x07
    1f90:	14 96       	adiw	r26, 0x04	; 4
    1f92:	ed 90       	ld	r14, X+
    1f94:	fd 90       	ld	r15, X+
    1f96:	0d 91       	ld	r16, X+
    1f98:	1c 91       	ld	r17, X
    1f9a:	17 97       	sbiw	r26, 0x07	; 7
    1f9c:	c6 01       	movw	r24, r12
    1f9e:	86 19       	sub	r24, r6
    1fa0:	97 09       	sbc	r25, r7
    1fa2:	5c 01       	movw	r10, r24
    1fa4:	97 ff       	sbrs	r25, 7
    1fa6:	04 c0       	rjmp	.+8      	; 0x1fb0 <_fpadd_parts+0xae>
    1fa8:	aa 24       	eor	r10, r10
    1faa:	bb 24       	eor	r11, r11
    1fac:	a8 1a       	sub	r10, r24
    1fae:	b9 0a       	sbc	r11, r25
    1fb0:	b0 e2       	ldi	r27, 0x20	; 32
    1fb2:	ab 16       	cp	r10, r27
    1fb4:	b1 04       	cpc	r11, r1
    1fb6:	0c f0       	brlt	.+2      	; 0x1fba <_fpadd_parts+0xb8>
    1fb8:	61 c0       	rjmp	.+194    	; 0x207c <_fpadd_parts+0x17a>
    1fba:	18 16       	cp	r1, r24
    1fbc:	19 06       	cpc	r1, r25
    1fbe:	6c f5       	brge	.+90     	; 0x201a <_fpadd_parts+0x118>
    1fc0:	37 01       	movw	r6, r14
    1fc2:	48 01       	movw	r8, r16
    1fc4:	0a 2c       	mov	r0, r10
    1fc6:	04 c0       	rjmp	.+8      	; 0x1fd0 <_fpadd_parts+0xce>
    1fc8:	96 94       	lsr	r9
    1fca:	87 94       	ror	r8
    1fcc:	77 94       	ror	r7
    1fce:	67 94       	ror	r6
    1fd0:	0a 94       	dec	r0
    1fd2:	d2 f7       	brpl	.-12     	; 0x1fc8 <_fpadd_parts+0xc6>
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e0       	ldi	r26, 0x00	; 0
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	0a 2c       	mov	r0, r10
    1fde:	04 c0       	rjmp	.+8      	; 0x1fe8 <_fpadd_parts+0xe6>
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	aa 1f       	adc	r26, r26
    1fe6:	bb 1f       	adc	r27, r27
    1fe8:	0a 94       	dec	r0
    1fea:	d2 f7       	brpl	.-12     	; 0x1fe0 <_fpadd_parts+0xde>
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	a1 09       	sbc	r26, r1
    1ff0:	b1 09       	sbc	r27, r1
    1ff2:	8e 21       	and	r24, r14
    1ff4:	9f 21       	and	r25, r15
    1ff6:	a0 23       	and	r26, r16
    1ff8:	b1 23       	and	r27, r17
    1ffa:	ee 24       	eor	r14, r14
    1ffc:	ff 24       	eor	r15, r15
    1ffe:	87 01       	movw	r16, r14
    2000:	e3 94       	inc	r14
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	a1 05       	cpc	r26, r1
    2006:	b1 05       	cpc	r27, r1
    2008:	19 f4       	brne	.+6      	; 0x2010 <_fpadd_parts+0x10e>
    200a:	ee 24       	eor	r14, r14
    200c:	ff 24       	eor	r15, r15
    200e:	87 01       	movw	r16, r14
    2010:	e6 28       	or	r14, r6
    2012:	f7 28       	or	r15, r7
    2014:	08 29       	or	r16, r8
    2016:	19 29       	or	r17, r9
    2018:	3c c0       	rjmp	.+120    	; 0x2092 <_fpadd_parts+0x190>
    201a:	00 97       	sbiw	r24, 0x00	; 0
    201c:	d1 f1       	breq	.+116    	; 0x2092 <_fpadd_parts+0x190>
    201e:	ca 0c       	add	r12, r10
    2020:	db 1c       	adc	r13, r11
    2022:	39 01       	movw	r6, r18
    2024:	4a 01       	movw	r8, r20
    2026:	0a 2c       	mov	r0, r10
    2028:	04 c0       	rjmp	.+8      	; 0x2032 <_fpadd_parts+0x130>
    202a:	96 94       	lsr	r9
    202c:	87 94       	ror	r8
    202e:	77 94       	ror	r7
    2030:	67 94       	ror	r6
    2032:	0a 94       	dec	r0
    2034:	d2 f7       	brpl	.-12     	; 0x202a <_fpadd_parts+0x128>
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	a0 e0       	ldi	r26, 0x00	; 0
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	0a 2c       	mov	r0, r10
    2040:	04 c0       	rjmp	.+8      	; 0x204a <_fpadd_parts+0x148>
    2042:	88 0f       	add	r24, r24
    2044:	99 1f       	adc	r25, r25
    2046:	aa 1f       	adc	r26, r26
    2048:	bb 1f       	adc	r27, r27
    204a:	0a 94       	dec	r0
    204c:	d2 f7       	brpl	.-12     	; 0x2042 <_fpadd_parts+0x140>
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	a1 09       	sbc	r26, r1
    2052:	b1 09       	sbc	r27, r1
    2054:	82 23       	and	r24, r18
    2056:	93 23       	and	r25, r19
    2058:	a4 23       	and	r26, r20
    205a:	b5 23       	and	r27, r21
    205c:	21 e0       	ldi	r18, 0x01	; 1
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	a1 05       	cpc	r26, r1
    2068:	b1 05       	cpc	r27, r1
    206a:	19 f4       	brne	.+6      	; 0x2072 <_fpadd_parts+0x170>
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	a9 01       	movw	r20, r18
    2072:	26 29       	or	r18, r6
    2074:	37 29       	or	r19, r7
    2076:	48 29       	or	r20, r8
    2078:	59 29       	or	r21, r9
    207a:	0b c0       	rjmp	.+22     	; 0x2092 <_fpadd_parts+0x190>
    207c:	6c 14       	cp	r6, r12
    207e:	7d 04       	cpc	r7, r13
    2080:	24 f4       	brge	.+8      	; 0x208a <_fpadd_parts+0x188>
    2082:	ee 24       	eor	r14, r14
    2084:	ff 24       	eor	r15, r15
    2086:	87 01       	movw	r16, r14
    2088:	04 c0       	rjmp	.+8      	; 0x2092 <_fpadd_parts+0x190>
    208a:	63 01       	movw	r12, r6
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	a9 01       	movw	r20, r18
    2092:	81 81       	ldd	r24, Z+1	; 0x01
    2094:	fb 01       	movw	r30, r22
    2096:	91 81       	ldd	r25, Z+1	; 0x01
    2098:	89 17       	cp	r24, r25
    209a:	09 f4       	brne	.+2      	; 0x209e <_fpadd_parts+0x19c>
    209c:	45 c0       	rjmp	.+138    	; 0x2128 <_fpadd_parts+0x226>
    209e:	88 23       	and	r24, r24
    20a0:	49 f0       	breq	.+18     	; 0x20b4 <_fpadd_parts+0x1b2>
    20a2:	d8 01       	movw	r26, r16
    20a4:	c7 01       	movw	r24, r14
    20a6:	82 1b       	sub	r24, r18
    20a8:	93 0b       	sbc	r25, r19
    20aa:	a4 0b       	sbc	r26, r20
    20ac:	b5 0b       	sbc	r27, r21
    20ae:	9c 01       	movw	r18, r24
    20b0:	ad 01       	movw	r20, r26
    20b2:	04 c0       	rjmp	.+8      	; 0x20bc <_fpadd_parts+0x1ba>
    20b4:	2e 19       	sub	r18, r14
    20b6:	3f 09       	sbc	r19, r15
    20b8:	40 0b       	sbc	r20, r16
    20ba:	51 0b       	sbc	r21, r17
    20bc:	57 fd       	sbrc	r21, 7
    20be:	04 c0       	rjmp	.+8      	; 0x20c8 <_fpadd_parts+0x1c6>
    20c0:	19 82       	std	Y+1, r1	; 0x01
    20c2:	db 82       	std	Y+3, r13	; 0x03
    20c4:	ca 82       	std	Y+2, r12	; 0x02
    20c6:	0b c0       	rjmp	.+22     	; 0x20de <_fpadd_parts+0x1dc>
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	89 83       	std	Y+1, r24	; 0x01
    20cc:	db 82       	std	Y+3, r13	; 0x03
    20ce:	ca 82       	std	Y+2, r12	; 0x02
    20d0:	50 95       	com	r21
    20d2:	40 95       	com	r20
    20d4:	30 95       	com	r19
    20d6:	21 95       	neg	r18
    20d8:	3f 4f       	sbci	r19, 0xFF	; 255
    20da:	4f 4f       	sbci	r20, 0xFF	; 255
    20dc:	5f 4f       	sbci	r21, 0xFF	; 255
    20de:	2c 83       	std	Y+4, r18	; 0x04
    20e0:	3d 83       	std	Y+5, r19	; 0x05
    20e2:	4e 83       	std	Y+6, r20	; 0x06
    20e4:	5f 83       	std	Y+7, r21	; 0x07
    20e6:	0d c0       	rjmp	.+26     	; 0x2102 <_fpadd_parts+0x200>
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	aa 1f       	adc	r26, r26
    20ee:	bb 1f       	adc	r27, r27
    20f0:	8c 83       	std	Y+4, r24	; 0x04
    20f2:	9d 83       	std	Y+5, r25	; 0x05
    20f4:	ae 83       	std	Y+6, r26	; 0x06
    20f6:	bf 83       	std	Y+7, r27	; 0x07
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	9b 81       	ldd	r25, Y+3	; 0x03
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	9b 83       	std	Y+3, r25	; 0x03
    2100:	8a 83       	std	Y+2, r24	; 0x02
    2102:	8c 81       	ldd	r24, Y+4	; 0x04
    2104:	9d 81       	ldd	r25, Y+5	; 0x05
    2106:	ae 81       	ldd	r26, Y+6	; 0x06
    2108:	bf 81       	ldd	r27, Y+7	; 0x07
    210a:	9c 01       	movw	r18, r24
    210c:	ad 01       	movw	r20, r26
    210e:	21 50       	subi	r18, 0x01	; 1
    2110:	30 40       	sbci	r19, 0x00	; 0
    2112:	40 40       	sbci	r20, 0x00	; 0
    2114:	50 40       	sbci	r21, 0x00	; 0
    2116:	2f 3f       	cpi	r18, 0xFF	; 255
    2118:	ef ef       	ldi	r30, 0xFF	; 255
    211a:	3e 07       	cpc	r19, r30
    211c:	ef ef       	ldi	r30, 0xFF	; 255
    211e:	4e 07       	cpc	r20, r30
    2120:	ef e3       	ldi	r30, 0x3F	; 63
    2122:	5e 07       	cpc	r21, r30
    2124:	08 f3       	brcs	.-62     	; 0x20e8 <_fpadd_parts+0x1e6>
    2126:	0b c0       	rjmp	.+22     	; 0x213e <_fpadd_parts+0x23c>
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	db 82       	std	Y+3, r13	; 0x03
    212c:	ca 82       	std	Y+2, r12	; 0x02
    212e:	2e 0d       	add	r18, r14
    2130:	3f 1d       	adc	r19, r15
    2132:	40 1f       	adc	r20, r16
    2134:	51 1f       	adc	r21, r17
    2136:	2c 83       	std	Y+4, r18	; 0x04
    2138:	3d 83       	std	Y+5, r19	; 0x05
    213a:	4e 83       	std	Y+6, r20	; 0x06
    213c:	5f 83       	std	Y+7, r21	; 0x07
    213e:	83 e0       	ldi	r24, 0x03	; 3
    2140:	88 83       	st	Y, r24
    2142:	2c 81       	ldd	r18, Y+4	; 0x04
    2144:	3d 81       	ldd	r19, Y+5	; 0x05
    2146:	4e 81       	ldd	r20, Y+6	; 0x06
    2148:	5f 81       	ldd	r21, Y+7	; 0x07
    214a:	57 ff       	sbrs	r21, 7
    214c:	1d c0       	rjmp	.+58     	; 0x2188 <_fpadd_parts+0x286>
    214e:	da 01       	movw	r26, r20
    2150:	c9 01       	movw	r24, r18
    2152:	81 70       	andi	r24, 0x01	; 1
    2154:	90 70       	andi	r25, 0x00	; 0
    2156:	a0 70       	andi	r26, 0x00	; 0
    2158:	b0 70       	andi	r27, 0x00	; 0
    215a:	56 95       	lsr	r21
    215c:	47 95       	ror	r20
    215e:	37 95       	ror	r19
    2160:	27 95       	ror	r18
    2162:	82 2b       	or	r24, r18
    2164:	93 2b       	or	r25, r19
    2166:	a4 2b       	or	r26, r20
    2168:	b5 2b       	or	r27, r21
    216a:	8c 83       	std	Y+4, r24	; 0x04
    216c:	9d 83       	std	Y+5, r25	; 0x05
    216e:	ae 83       	std	Y+6, r26	; 0x06
    2170:	bf 83       	std	Y+7, r27	; 0x07
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	9b 81       	ldd	r25, Y+3	; 0x03
    2176:	01 96       	adiw	r24, 0x01	; 1
    2178:	9b 83       	std	Y+3, r25	; 0x03
    217a:	8a 83       	std	Y+2, r24	; 0x02
    217c:	05 c0       	rjmp	.+10     	; 0x2188 <_fpadd_parts+0x286>
    217e:	ed e1       	ldi	r30, 0x1D	; 29
    2180:	f1 e0       	ldi	r31, 0x01	; 1
    2182:	03 c0       	rjmp	.+6      	; 0x218a <_fpadd_parts+0x288>
    2184:	fb 01       	movw	r30, r22
    2186:	01 c0       	rjmp	.+2      	; 0x218a <_fpadd_parts+0x288>
    2188:	fe 01       	movw	r30, r28
    218a:	cf 01       	movw	r24, r30
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	ee e0       	ldi	r30, 0x0E	; 14
    2192:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__epilogue_restores__+0x8>

00002196 <__addsf3>:
    2196:	a0 e2       	ldi	r26, 0x20	; 32
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e1 ed       	ldi	r30, 0xD1	; 209
    219c:	f0 e1       	ldi	r31, 0x10	; 16
    219e:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__prologue_saves__+0x18>
    21a2:	69 83       	std	Y+1, r22	; 0x01
    21a4:	7a 83       	std	Y+2, r23	; 0x02
    21a6:	8b 83       	std	Y+3, r24	; 0x03
    21a8:	9c 83       	std	Y+4, r25	; 0x04
    21aa:	2d 83       	std	Y+5, r18	; 0x05
    21ac:	3e 83       	std	Y+6, r19	; 0x06
    21ae:	4f 83       	std	Y+7, r20	; 0x07
    21b0:	58 87       	std	Y+8, r21	; 0x08
    21b2:	89 e0       	ldi	r24, 0x09	; 9
    21b4:	e8 2e       	mov	r14, r24
    21b6:	f1 2c       	mov	r15, r1
    21b8:	ec 0e       	add	r14, r28
    21ba:	fd 1e       	adc	r15, r29
    21bc:	ce 01       	movw	r24, r28
    21be:	01 96       	adiw	r24, 0x01	; 1
    21c0:	b7 01       	movw	r22, r14
    21c2:	0e 94 81 14 	call	0x2902	; 0x2902 <__unpack_f>
    21c6:	8e 01       	movw	r16, r28
    21c8:	0f 5e       	subi	r16, 0xEF	; 239
    21ca:	1f 4f       	sbci	r17, 0xFF	; 255
    21cc:	ce 01       	movw	r24, r28
    21ce:	05 96       	adiw	r24, 0x05	; 5
    21d0:	b8 01       	movw	r22, r16
    21d2:	0e 94 81 14 	call	0x2902	; 0x2902 <__unpack_f>
    21d6:	c7 01       	movw	r24, r14
    21d8:	b8 01       	movw	r22, r16
    21da:	ae 01       	movw	r20, r28
    21dc:	47 5e       	subi	r20, 0xE7	; 231
    21de:	5f 4f       	sbci	r21, 0xFF	; 255
    21e0:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_fpadd_parts>
    21e4:	0e 94 b3 13 	call	0x2766	; 0x2766 <__pack_f>
    21e8:	a0 96       	adiw	r28, 0x20	; 32
    21ea:	e6 e0       	ldi	r30, 0x06	; 6
    21ec:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__epilogue_restores__+0x18>

000021f0 <__subsf3>:
    21f0:	a0 e2       	ldi	r26, 0x20	; 32
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	ee ef       	ldi	r30, 0xFE	; 254
    21f6:	f0 e1       	ldi	r31, 0x10	; 16
    21f8:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__prologue_saves__+0x18>
    21fc:	69 83       	std	Y+1, r22	; 0x01
    21fe:	7a 83       	std	Y+2, r23	; 0x02
    2200:	8b 83       	std	Y+3, r24	; 0x03
    2202:	9c 83       	std	Y+4, r25	; 0x04
    2204:	2d 83       	std	Y+5, r18	; 0x05
    2206:	3e 83       	std	Y+6, r19	; 0x06
    2208:	4f 83       	std	Y+7, r20	; 0x07
    220a:	58 87       	std	Y+8, r21	; 0x08
    220c:	8e 01       	movw	r16, r28
    220e:	07 5f       	subi	r16, 0xF7	; 247
    2210:	1f 4f       	sbci	r17, 0xFF	; 255
    2212:	ce 01       	movw	r24, r28
    2214:	01 96       	adiw	r24, 0x01	; 1
    2216:	b8 01       	movw	r22, r16
    2218:	0e 94 81 14 	call	0x2902	; 0x2902 <__unpack_f>
    221c:	91 e1       	ldi	r25, 0x11	; 17
    221e:	e9 2e       	mov	r14, r25
    2220:	f1 2c       	mov	r15, r1
    2222:	ec 0e       	add	r14, r28
    2224:	fd 1e       	adc	r15, r29
    2226:	ce 01       	movw	r24, r28
    2228:	05 96       	adiw	r24, 0x05	; 5
    222a:	b7 01       	movw	r22, r14
    222c:	0e 94 81 14 	call	0x2902	; 0x2902 <__unpack_f>
    2230:	8a 89       	ldd	r24, Y+18	; 0x12
    2232:	91 e0       	ldi	r25, 0x01	; 1
    2234:	89 27       	eor	r24, r25
    2236:	8a 8b       	std	Y+18, r24	; 0x12
    2238:	c8 01       	movw	r24, r16
    223a:	b7 01       	movw	r22, r14
    223c:	ae 01       	movw	r20, r28
    223e:	47 5e       	subi	r20, 0xE7	; 231
    2240:	5f 4f       	sbci	r21, 0xFF	; 255
    2242:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <_fpadd_parts>
    2246:	0e 94 b3 13 	call	0x2766	; 0x2766 <__pack_f>
    224a:	a0 96       	adiw	r28, 0x20	; 32
    224c:	e6 e0       	ldi	r30, 0x06	; 6
    224e:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__epilogue_restores__+0x18>

00002252 <__mulsf3>:
    2252:	a0 e2       	ldi	r26, 0x20	; 32
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	ef e2       	ldi	r30, 0x2F	; 47
    2258:	f1 e1       	ldi	r31, 0x11	; 17
    225a:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__prologue_saves__>
    225e:	69 83       	std	Y+1, r22	; 0x01
    2260:	7a 83       	std	Y+2, r23	; 0x02
    2262:	8b 83       	std	Y+3, r24	; 0x03
    2264:	9c 83       	std	Y+4, r25	; 0x04
    2266:	2d 83       	std	Y+5, r18	; 0x05
    2268:	3e 83       	std	Y+6, r19	; 0x06
    226a:	4f 83       	std	Y+7, r20	; 0x07
    226c:	58 87       	std	Y+8, r21	; 0x08
    226e:	ce 01       	movw	r24, r28
    2270:	01 96       	adiw	r24, 0x01	; 1
    2272:	be 01       	movw	r22, r28
    2274:	67 5f       	subi	r22, 0xF7	; 247
    2276:	7f 4f       	sbci	r23, 0xFF	; 255
    2278:	0e 94 81 14 	call	0x2902	; 0x2902 <__unpack_f>
    227c:	ce 01       	movw	r24, r28
    227e:	05 96       	adiw	r24, 0x05	; 5
    2280:	be 01       	movw	r22, r28
    2282:	6f 5e       	subi	r22, 0xEF	; 239
    2284:	7f 4f       	sbci	r23, 0xFF	; 255
    2286:	0e 94 81 14 	call	0x2902	; 0x2902 <__unpack_f>
    228a:	99 85       	ldd	r25, Y+9	; 0x09
    228c:	92 30       	cpi	r25, 0x02	; 2
    228e:	78 f0       	brcs	.+30     	; 0x22ae <__mulsf3+0x5c>
    2290:	89 89       	ldd	r24, Y+17	; 0x11
    2292:	82 30       	cpi	r24, 0x02	; 2
    2294:	c0 f0       	brcs	.+48     	; 0x22c6 <__mulsf3+0x74>
    2296:	94 30       	cpi	r25, 0x04	; 4
    2298:	19 f4       	brne	.+6      	; 0x22a0 <__mulsf3+0x4e>
    229a:	82 30       	cpi	r24, 0x02	; 2
    229c:	41 f4       	brne	.+16     	; 0x22ae <__mulsf3+0x5c>
    229e:	cb c0       	rjmp	.+406    	; 0x2436 <__mulsf3+0x1e4>
    22a0:	84 30       	cpi	r24, 0x04	; 4
    22a2:	19 f4       	brne	.+6      	; 0x22aa <__mulsf3+0x58>
    22a4:	92 30       	cpi	r25, 0x02	; 2
    22a6:	79 f4       	brne	.+30     	; 0x22c6 <__mulsf3+0x74>
    22a8:	c6 c0       	rjmp	.+396    	; 0x2436 <__mulsf3+0x1e4>
    22aa:	92 30       	cpi	r25, 0x02	; 2
    22ac:	51 f4       	brne	.+20     	; 0x22c2 <__mulsf3+0x70>
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	2a 85       	ldd	r18, Y+10	; 0x0a
    22b2:	9a 89       	ldd	r25, Y+18	; 0x12
    22b4:	29 17       	cp	r18, r25
    22b6:	09 f4       	brne	.+2      	; 0x22ba <__mulsf3+0x68>
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	8a 87       	std	Y+10, r24	; 0x0a
    22bc:	ce 01       	movw	r24, r28
    22be:	09 96       	adiw	r24, 0x09	; 9
    22c0:	bc c0       	rjmp	.+376    	; 0x243a <__mulsf3+0x1e8>
    22c2:	82 30       	cpi	r24, 0x02	; 2
    22c4:	51 f4       	brne	.+20     	; 0x22da <__mulsf3+0x88>
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	2a 85       	ldd	r18, Y+10	; 0x0a
    22ca:	9a 89       	ldd	r25, Y+18	; 0x12
    22cc:	29 17       	cp	r18, r25
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <__mulsf3+0x80>
    22d0:	80 e0       	ldi	r24, 0x00	; 0
    22d2:	8a 8b       	std	Y+18, r24	; 0x12
    22d4:	ce 01       	movw	r24, r28
    22d6:	41 96       	adiw	r24, 0x11	; 17
    22d8:	b0 c0       	rjmp	.+352    	; 0x243a <__mulsf3+0x1e8>
    22da:	6d 84       	ldd	r6, Y+13	; 0x0d
    22dc:	7e 84       	ldd	r7, Y+14	; 0x0e
    22de:	8f 84       	ldd	r8, Y+15	; 0x0f
    22e0:	98 88       	ldd	r9, Y+16	; 0x10
    22e2:	ed 88       	ldd	r14, Y+21	; 0x15
    22e4:	fe 88       	ldd	r15, Y+22	; 0x16
    22e6:	0f 89       	ldd	r16, Y+23	; 0x17
    22e8:	18 8d       	ldd	r17, Y+24	; 0x18
    22ea:	e0 e2       	ldi	r30, 0x20	; 32
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	dc 01       	movw	r26, r24
    22f4:	aa 24       	eor	r10, r10
    22f6:	bb 24       	eor	r11, r11
    22f8:	65 01       	movw	r12, r10
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	a9 01       	movw	r20, r18
    2300:	b3 01       	movw	r22, r6
    2302:	61 70       	andi	r22, 0x01	; 1
    2304:	70 70       	andi	r23, 0x00	; 0
    2306:	61 15       	cp	r22, r1
    2308:	71 05       	cpc	r23, r1
    230a:	d1 f0       	breq	.+52     	; 0x2340 <__mulsf3+0xee>
    230c:	2e 0d       	add	r18, r14
    230e:	3f 1d       	adc	r19, r15
    2310:	40 1f       	adc	r20, r16
    2312:	51 1f       	adc	r21, r17
    2314:	15 01       	movw	r2, r10
    2316:	26 01       	movw	r4, r12
    2318:	28 0e       	add	r2, r24
    231a:	39 1e       	adc	r3, r25
    231c:	4a 1e       	adc	r4, r26
    231e:	5b 1e       	adc	r5, r27
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	a0 e0       	ldi	r26, 0x00	; 0
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	2e 15       	cp	r18, r14
    232a:	3f 05       	cpc	r19, r15
    232c:	40 07       	cpc	r20, r16
    232e:	51 07       	cpc	r21, r17
    2330:	18 f0       	brcs	.+6      	; 0x2338 <__mulsf3+0xe6>
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	dc 01       	movw	r26, r24
    2338:	82 0d       	add	r24, r2
    233a:	93 1d       	adc	r25, r3
    233c:	a4 1d       	adc	r26, r4
    233e:	b5 1d       	adc	r27, r5
    2340:	aa 0c       	add	r10, r10
    2342:	bb 1c       	adc	r11, r11
    2344:	cc 1c       	adc	r12, r12
    2346:	dd 1c       	adc	r13, r13
    2348:	17 ff       	sbrs	r17, 7
    234a:	09 c0       	rjmp	.+18     	; 0x235e <__mulsf3+0x10c>
    234c:	61 e0       	ldi	r22, 0x01	; 1
    234e:	26 2e       	mov	r2, r22
    2350:	31 2c       	mov	r3, r1
    2352:	41 2c       	mov	r4, r1
    2354:	51 2c       	mov	r5, r1
    2356:	a2 28       	or	r10, r2
    2358:	b3 28       	or	r11, r3
    235a:	c4 28       	or	r12, r4
    235c:	d5 28       	or	r13, r5
    235e:	31 97       	sbiw	r30, 0x01	; 1
    2360:	49 f0       	breq	.+18     	; 0x2374 <__mulsf3+0x122>
    2362:	ee 0c       	add	r14, r14
    2364:	ff 1c       	adc	r15, r15
    2366:	00 1f       	adc	r16, r16
    2368:	11 1f       	adc	r17, r17
    236a:	96 94       	lsr	r9
    236c:	87 94       	ror	r8
    236e:	77 94       	ror	r7
    2370:	67 94       	ror	r6
    2372:	c6 cf       	rjmp	.-116    	; 0x2300 <__mulsf3+0xae>
    2374:	6b 89       	ldd	r22, Y+19	; 0x13
    2376:	7c 89       	ldd	r23, Y+20	; 0x14
    2378:	eb 85       	ldd	r30, Y+11	; 0x0b
    237a:	fc 85       	ldd	r31, Y+12	; 0x0c
    237c:	6e 0f       	add	r22, r30
    237e:	7f 1f       	adc	r23, r31
    2380:	6e 5f       	subi	r22, 0xFE	; 254
    2382:	7f 4f       	sbci	r23, 0xFF	; 255
    2384:	7c 8f       	std	Y+28, r23	; 0x1c
    2386:	6b 8f       	std	Y+27, r22	; 0x1b
    2388:	61 e0       	ldi	r22, 0x01	; 1
    238a:	ea 85       	ldd	r30, Y+10	; 0x0a
    238c:	7a 89       	ldd	r23, Y+18	; 0x12
    238e:	e7 17       	cp	r30, r23
    2390:	09 f4       	brne	.+2      	; 0x2394 <__mulsf3+0x142>
    2392:	60 e0       	ldi	r22, 0x00	; 0
    2394:	6a 8f       	std	Y+26, r22	; 0x1a
    2396:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2398:	7c 8d       	ldd	r23, Y+28	; 0x1c
    239a:	10 c0       	rjmp	.+32     	; 0x23bc <__mulsf3+0x16a>
    239c:	fc 01       	movw	r30, r24
    239e:	e1 70       	andi	r30, 0x01	; 1
    23a0:	f0 70       	andi	r31, 0x00	; 0
    23a2:	30 97       	sbiw	r30, 0x00	; 0
    23a4:	29 f0       	breq	.+10     	; 0x23b0 <__mulsf3+0x15e>
    23a6:	56 95       	lsr	r21
    23a8:	47 95       	ror	r20
    23aa:	37 95       	ror	r19
    23ac:	27 95       	ror	r18
    23ae:	50 68       	ori	r21, 0x80	; 128
    23b0:	b6 95       	lsr	r27
    23b2:	a7 95       	ror	r26
    23b4:	97 95       	ror	r25
    23b6:	87 95       	ror	r24
    23b8:	6f 5f       	subi	r22, 0xFF	; 255
    23ba:	7f 4f       	sbci	r23, 0xFF	; 255
    23bc:	b7 fd       	sbrc	r27, 7
    23be:	ee cf       	rjmp	.-36     	; 0x239c <__mulsf3+0x14a>
    23c0:	0c c0       	rjmp	.+24     	; 0x23da <__mulsf3+0x188>
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	aa 1f       	adc	r26, r26
    23c8:	bb 1f       	adc	r27, r27
    23ca:	57 fd       	sbrc	r21, 7
    23cc:	81 60       	ori	r24, 0x01	; 1
    23ce:	22 0f       	add	r18, r18
    23d0:	33 1f       	adc	r19, r19
    23d2:	44 1f       	adc	r20, r20
    23d4:	55 1f       	adc	r21, r21
    23d6:	61 50       	subi	r22, 0x01	; 1
    23d8:	70 40       	sbci	r23, 0x00	; 0
    23da:	80 30       	cpi	r24, 0x00	; 0
    23dc:	e0 e0       	ldi	r30, 0x00	; 0
    23de:	9e 07       	cpc	r25, r30
    23e0:	e0 e0       	ldi	r30, 0x00	; 0
    23e2:	ae 07       	cpc	r26, r30
    23e4:	e0 e4       	ldi	r30, 0x40	; 64
    23e6:	be 07       	cpc	r27, r30
    23e8:	60 f3       	brcs	.-40     	; 0x23c2 <__mulsf3+0x170>
    23ea:	6b 8f       	std	Y+27, r22	; 0x1b
    23ec:	7c 8f       	std	Y+28, r23	; 0x1c
    23ee:	6f e7       	ldi	r22, 0x7F	; 127
    23f0:	e6 2e       	mov	r14, r22
    23f2:	f1 2c       	mov	r15, r1
    23f4:	01 2d       	mov	r16, r1
    23f6:	11 2d       	mov	r17, r1
    23f8:	e8 22       	and	r14, r24
    23fa:	f9 22       	and	r15, r25
    23fc:	0a 23       	and	r16, r26
    23fe:	1b 23       	and	r17, r27
    2400:	60 e4       	ldi	r22, 0x40	; 64
    2402:	e6 16       	cp	r14, r22
    2404:	f1 04       	cpc	r15, r1
    2406:	01 05       	cpc	r16, r1
    2408:	11 05       	cpc	r17, r1
    240a:	61 f4       	brne	.+24     	; 0x2424 <__mulsf3+0x1d2>
    240c:	87 fd       	sbrc	r24, 7
    240e:	0a c0       	rjmp	.+20     	; 0x2424 <__mulsf3+0x1d2>
    2410:	21 15       	cp	r18, r1
    2412:	31 05       	cpc	r19, r1
    2414:	41 05       	cpc	r20, r1
    2416:	51 05       	cpc	r21, r1
    2418:	29 f0       	breq	.+10     	; 0x2424 <__mulsf3+0x1d2>
    241a:	80 5c       	subi	r24, 0xC0	; 192
    241c:	9f 4f       	sbci	r25, 0xFF	; 255
    241e:	af 4f       	sbci	r26, 0xFF	; 255
    2420:	bf 4f       	sbci	r27, 0xFF	; 255
    2422:	80 78       	andi	r24, 0x80	; 128
    2424:	8d 8f       	std	Y+29, r24	; 0x1d
    2426:	9e 8f       	std	Y+30, r25	; 0x1e
    2428:	af 8f       	std	Y+31, r26	; 0x1f
    242a:	b8 a3       	std	Y+32, r27	; 0x20
    242c:	83 e0       	ldi	r24, 0x03	; 3
    242e:	89 8f       	std	Y+25, r24	; 0x19
    2430:	ce 01       	movw	r24, r28
    2432:	49 96       	adiw	r24, 0x19	; 25
    2434:	02 c0       	rjmp	.+4      	; 0x243a <__mulsf3+0x1e8>
    2436:	8d e1       	ldi	r24, 0x1D	; 29
    2438:	91 e0       	ldi	r25, 0x01	; 1
    243a:	0e 94 b3 13 	call	0x2766	; 0x2766 <__pack_f>
    243e:	a0 96       	adiw	r28, 0x20	; 32
    2440:	e2 e1       	ldi	r30, 0x12	; 18
    2442:	0c 94 c7 15 	jmp	0x2b8e	; 0x2b8e <__epilogue_restores__>

00002446 <__divsf3>:
    2446:	a8 e1       	ldi	r26, 0x18	; 24
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e9 e2       	ldi	r30, 0x29	; 41
    244c:	f2 e1       	ldi	r31, 0x12	; 18
    244e:	0c 94 b3 15 	jmp	0x2b66	; 0x2b66 <__prologue_saves__+0x10>
    2452:	69 83       	std	Y+1, r22	; 0x01
    2454:	7a 83       	std	Y+2, r23	; 0x02
    2456:	8b 83       	std	Y+3, r24	; 0x03
    2458:	9c 83       	std	Y+4, r25	; 0x04
    245a:	2d 83       	std	Y+5, r18	; 0x05
    245c:	3e 83       	std	Y+6, r19	; 0x06
    245e:	4f 83       	std	Y+7, r20	; 0x07
    2460:	58 87       	std	Y+8, r21	; 0x08
    2462:	8e 01       	movw	r16, r28
    2464:	07 5f       	subi	r16, 0xF7	; 247
    2466:	1f 4f       	sbci	r17, 0xFF	; 255
    2468:	ce 01       	movw	r24, r28
    246a:	01 96       	adiw	r24, 0x01	; 1
    246c:	b8 01       	movw	r22, r16
    246e:	0e 94 81 14 	call	0x2902	; 0x2902 <__unpack_f>
    2472:	81 e1       	ldi	r24, 0x11	; 17
    2474:	e8 2e       	mov	r14, r24
    2476:	f1 2c       	mov	r15, r1
    2478:	ec 0e       	add	r14, r28
    247a:	fd 1e       	adc	r15, r29
    247c:	ce 01       	movw	r24, r28
    247e:	05 96       	adiw	r24, 0x05	; 5
    2480:	b7 01       	movw	r22, r14
    2482:	0e 94 81 14 	call	0x2902	; 0x2902 <__unpack_f>
    2486:	99 85       	ldd	r25, Y+9	; 0x09
    2488:	92 30       	cpi	r25, 0x02	; 2
    248a:	08 f4       	brcc	.+2      	; 0x248e <__divsf3+0x48>
    248c:	83 c0       	rjmp	.+262    	; 0x2594 <__divsf3+0x14e>
    248e:	89 89       	ldd	r24, Y+17	; 0x11
    2490:	82 30       	cpi	r24, 0x02	; 2
    2492:	08 f4       	brcc	.+2      	; 0x2496 <__divsf3+0x50>
    2494:	7b c0       	rjmp	.+246    	; 0x258c <__divsf3+0x146>
    2496:	2a 85       	ldd	r18, Y+10	; 0x0a
    2498:	3a 89       	ldd	r19, Y+18	; 0x12
    249a:	23 27       	eor	r18, r19
    249c:	2a 87       	std	Y+10, r18	; 0x0a
    249e:	94 30       	cpi	r25, 0x04	; 4
    24a0:	11 f0       	breq	.+4      	; 0x24a6 <__divsf3+0x60>
    24a2:	92 30       	cpi	r25, 0x02	; 2
    24a4:	21 f4       	brne	.+8      	; 0x24ae <__divsf3+0x68>
    24a6:	98 17       	cp	r25, r24
    24a8:	09 f0       	breq	.+2      	; 0x24ac <__divsf3+0x66>
    24aa:	6c c0       	rjmp	.+216    	; 0x2584 <__divsf3+0x13e>
    24ac:	71 c0       	rjmp	.+226    	; 0x2590 <__divsf3+0x14a>
    24ae:	84 30       	cpi	r24, 0x04	; 4
    24b0:	39 f4       	brne	.+14     	; 0x24c0 <__divsf3+0x7a>
    24b2:	1d 86       	std	Y+13, r1	; 0x0d
    24b4:	1e 86       	std	Y+14, r1	; 0x0e
    24b6:	1f 86       	std	Y+15, r1	; 0x0f
    24b8:	18 8a       	std	Y+16, r1	; 0x10
    24ba:	1c 86       	std	Y+12, r1	; 0x0c
    24bc:	1b 86       	std	Y+11, r1	; 0x0b
    24be:	6a c0       	rjmp	.+212    	; 0x2594 <__divsf3+0x14e>
    24c0:	82 30       	cpi	r24, 0x02	; 2
    24c2:	19 f4       	brne	.+6      	; 0x24ca <__divsf3+0x84>
    24c4:	84 e0       	ldi	r24, 0x04	; 4
    24c6:	89 87       	std	Y+9, r24	; 0x09
    24c8:	65 c0       	rjmp	.+202    	; 0x2594 <__divsf3+0x14e>
    24ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    24cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    24ce:	2b 89       	ldd	r18, Y+19	; 0x13
    24d0:	3c 89       	ldd	r19, Y+20	; 0x14
    24d2:	82 1b       	sub	r24, r18
    24d4:	93 0b       	sbc	r25, r19
    24d6:	9c 87       	std	Y+12, r25	; 0x0c
    24d8:	8b 87       	std	Y+11, r24	; 0x0b
    24da:	2d 85       	ldd	r18, Y+13	; 0x0d
    24dc:	3e 85       	ldd	r19, Y+14	; 0x0e
    24de:	4f 85       	ldd	r20, Y+15	; 0x0f
    24e0:	58 89       	ldd	r21, Y+16	; 0x10
    24e2:	ed 88       	ldd	r14, Y+21	; 0x15
    24e4:	fe 88       	ldd	r15, Y+22	; 0x16
    24e6:	0f 89       	ldd	r16, Y+23	; 0x17
    24e8:	18 8d       	ldd	r17, Y+24	; 0x18
    24ea:	2e 15       	cp	r18, r14
    24ec:	3f 05       	cpc	r19, r15
    24ee:	40 07       	cpc	r20, r16
    24f0:	51 07       	cpc	r21, r17
    24f2:	38 f4       	brcc	.+14     	; 0x2502 <__divsf3+0xbc>
    24f4:	22 0f       	add	r18, r18
    24f6:	33 1f       	adc	r19, r19
    24f8:	44 1f       	adc	r20, r20
    24fa:	55 1f       	adc	r21, r21
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	9c 87       	std	Y+12, r25	; 0x0c
    2500:	8b 87       	std	Y+11, r24	; 0x0b
    2502:	6f e1       	ldi	r22, 0x1F	; 31
    2504:	70 e0       	ldi	r23, 0x00	; 0
    2506:	a1 2c       	mov	r10, r1
    2508:	b1 2c       	mov	r11, r1
    250a:	c1 2c       	mov	r12, r1
    250c:	a0 e4       	ldi	r26, 0x40	; 64
    250e:	da 2e       	mov	r13, r26
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	dc 01       	movw	r26, r24
    2516:	2e 15       	cp	r18, r14
    2518:	3f 05       	cpc	r19, r15
    251a:	40 07       	cpc	r20, r16
    251c:	51 07       	cpc	r21, r17
    251e:	40 f0       	brcs	.+16     	; 0x2530 <__divsf3+0xea>
    2520:	8a 29       	or	r24, r10
    2522:	9b 29       	or	r25, r11
    2524:	ac 29       	or	r26, r12
    2526:	bd 29       	or	r27, r13
    2528:	2e 19       	sub	r18, r14
    252a:	3f 09       	sbc	r19, r15
    252c:	40 0b       	sbc	r20, r16
    252e:	51 0b       	sbc	r21, r17
    2530:	d6 94       	lsr	r13
    2532:	c7 94       	ror	r12
    2534:	b7 94       	ror	r11
    2536:	a7 94       	ror	r10
    2538:	22 0f       	add	r18, r18
    253a:	33 1f       	adc	r19, r19
    253c:	44 1f       	adc	r20, r20
    253e:	55 1f       	adc	r21, r21
    2540:	61 50       	subi	r22, 0x01	; 1
    2542:	70 40       	sbci	r23, 0x00	; 0
    2544:	41 f7       	brne	.-48     	; 0x2516 <__divsf3+0xd0>
    2546:	6f e7       	ldi	r22, 0x7F	; 127
    2548:	e6 2e       	mov	r14, r22
    254a:	f1 2c       	mov	r15, r1
    254c:	01 2d       	mov	r16, r1
    254e:	11 2d       	mov	r17, r1
    2550:	e8 22       	and	r14, r24
    2552:	f9 22       	and	r15, r25
    2554:	0a 23       	and	r16, r26
    2556:	1b 23       	and	r17, r27
    2558:	60 e4       	ldi	r22, 0x40	; 64
    255a:	e6 16       	cp	r14, r22
    255c:	f1 04       	cpc	r15, r1
    255e:	01 05       	cpc	r16, r1
    2560:	11 05       	cpc	r17, r1
    2562:	61 f4       	brne	.+24     	; 0x257c <__divsf3+0x136>
    2564:	87 fd       	sbrc	r24, 7
    2566:	0a c0       	rjmp	.+20     	; 0x257c <__divsf3+0x136>
    2568:	21 15       	cp	r18, r1
    256a:	31 05       	cpc	r19, r1
    256c:	41 05       	cpc	r20, r1
    256e:	51 05       	cpc	r21, r1
    2570:	29 f0       	breq	.+10     	; 0x257c <__divsf3+0x136>
    2572:	80 5c       	subi	r24, 0xC0	; 192
    2574:	9f 4f       	sbci	r25, 0xFF	; 255
    2576:	af 4f       	sbci	r26, 0xFF	; 255
    2578:	bf 4f       	sbci	r27, 0xFF	; 255
    257a:	80 78       	andi	r24, 0x80	; 128
    257c:	8d 87       	std	Y+13, r24	; 0x0d
    257e:	9e 87       	std	Y+14, r25	; 0x0e
    2580:	af 87       	std	Y+15, r26	; 0x0f
    2582:	b8 8b       	std	Y+16, r27	; 0x10
    2584:	8e 01       	movw	r16, r28
    2586:	07 5f       	subi	r16, 0xF7	; 247
    2588:	1f 4f       	sbci	r17, 0xFF	; 255
    258a:	04 c0       	rjmp	.+8      	; 0x2594 <__divsf3+0x14e>
    258c:	87 01       	movw	r16, r14
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <__divsf3+0x14e>
    2590:	0d e1       	ldi	r16, 0x1D	; 29
    2592:	11 e0       	ldi	r17, 0x01	; 1
    2594:	c8 01       	movw	r24, r16
    2596:	0e 94 b3 13 	call	0x2766	; 0x2766 <__pack_f>
    259a:	68 96       	adiw	r28, 0x18	; 24
    259c:	ea e0       	ldi	r30, 0x0A	; 10
    259e:	0c 94 cf 15 	jmp	0x2b9e	; 0x2b9e <__epilogue_restores__+0x10>

000025a2 <__gtsf2>:
    25a2:	a8 e1       	ldi	r26, 0x18	; 24
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e7 ed       	ldi	r30, 0xD7	; 215
    25a8:	f2 e1       	ldi	r31, 0x12	; 18
    25aa:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__prologue_saves__+0x18>
    25ae:	69 83       	std	Y+1, r22	; 0x01
    25b0:	7a 83       	std	Y+2, r23	; 0x02
    25b2:	8b 83       	std	Y+3, r24	; 0x03
    25b4:	9c 83       	std	Y+4, r25	; 0x04
    25b6:	2d 83       	std	Y+5, r18	; 0x05
    25b8:	3e 83       	std	Y+6, r19	; 0x06
    25ba:	4f 83       	std	Y+7, r20	; 0x07
    25bc:	58 87       	std	Y+8, r21	; 0x08
    25be:	8e 01       	movw	r16, r28
    25c0:	07 5f       	subi	r16, 0xF7	; 247
    25c2:	1f 4f       	sbci	r17, 0xFF	; 255
    25c4:	ce 01       	movw	r24, r28
    25c6:	01 96       	adiw	r24, 0x01	; 1
    25c8:	b8 01       	movw	r22, r16
    25ca:	0e 94 81 14 	call	0x2902	; 0x2902 <__unpack_f>
    25ce:	81 e1       	ldi	r24, 0x11	; 17
    25d0:	e8 2e       	mov	r14, r24
    25d2:	f1 2c       	mov	r15, r1
    25d4:	ec 0e       	add	r14, r28
    25d6:	fd 1e       	adc	r15, r29
    25d8:	ce 01       	movw	r24, r28
    25da:	05 96       	adiw	r24, 0x05	; 5
    25dc:	b7 01       	movw	r22, r14
    25de:	0e 94 81 14 	call	0x2902	; 0x2902 <__unpack_f>
    25e2:	89 85       	ldd	r24, Y+9	; 0x09
    25e4:	82 30       	cpi	r24, 0x02	; 2
    25e6:	40 f0       	brcs	.+16     	; 0x25f8 <__gtsf2+0x56>
    25e8:	89 89       	ldd	r24, Y+17	; 0x11
    25ea:	82 30       	cpi	r24, 0x02	; 2
    25ec:	28 f0       	brcs	.+10     	; 0x25f8 <__gtsf2+0x56>
    25ee:	c8 01       	movw	r24, r16
    25f0:	b7 01       	movw	r22, r14
    25f2:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__fpcmp_parts_f>
    25f6:	01 c0       	rjmp	.+2      	; 0x25fa <__gtsf2+0x58>
    25f8:	8f ef       	ldi	r24, 0xFF	; 255
    25fa:	68 96       	adiw	r28, 0x18	; 24
    25fc:	e6 e0       	ldi	r30, 0x06	; 6
    25fe:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__epilogue_restores__+0x18>

00002602 <__gesf2>:
    2602:	a8 e1       	ldi	r26, 0x18	; 24
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	e7 e0       	ldi	r30, 0x07	; 7
    2608:	f3 e1       	ldi	r31, 0x13	; 19
    260a:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__prologue_saves__+0x18>
    260e:	69 83       	std	Y+1, r22	; 0x01
    2610:	7a 83       	std	Y+2, r23	; 0x02
    2612:	8b 83       	std	Y+3, r24	; 0x03
    2614:	9c 83       	std	Y+4, r25	; 0x04
    2616:	2d 83       	std	Y+5, r18	; 0x05
    2618:	3e 83       	std	Y+6, r19	; 0x06
    261a:	4f 83       	std	Y+7, r20	; 0x07
    261c:	58 87       	std	Y+8, r21	; 0x08
    261e:	8e 01       	movw	r16, r28
    2620:	07 5f       	subi	r16, 0xF7	; 247
    2622:	1f 4f       	sbci	r17, 0xFF	; 255
    2624:	ce 01       	movw	r24, r28
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	b8 01       	movw	r22, r16
    262a:	0e 94 81 14 	call	0x2902	; 0x2902 <__unpack_f>
    262e:	81 e1       	ldi	r24, 0x11	; 17
    2630:	e8 2e       	mov	r14, r24
    2632:	f1 2c       	mov	r15, r1
    2634:	ec 0e       	add	r14, r28
    2636:	fd 1e       	adc	r15, r29
    2638:	ce 01       	movw	r24, r28
    263a:	05 96       	adiw	r24, 0x05	; 5
    263c:	b7 01       	movw	r22, r14
    263e:	0e 94 81 14 	call	0x2902	; 0x2902 <__unpack_f>
    2642:	89 85       	ldd	r24, Y+9	; 0x09
    2644:	82 30       	cpi	r24, 0x02	; 2
    2646:	40 f0       	brcs	.+16     	; 0x2658 <__gesf2+0x56>
    2648:	89 89       	ldd	r24, Y+17	; 0x11
    264a:	82 30       	cpi	r24, 0x02	; 2
    264c:	28 f0       	brcs	.+10     	; 0x2658 <__gesf2+0x56>
    264e:	c8 01       	movw	r24, r16
    2650:	b7 01       	movw	r22, r14
    2652:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__fpcmp_parts_f>
    2656:	01 c0       	rjmp	.+2      	; 0x265a <__gesf2+0x58>
    2658:	8f ef       	ldi	r24, 0xFF	; 255
    265a:	68 96       	adiw	r28, 0x18	; 24
    265c:	e6 e0       	ldi	r30, 0x06	; 6
    265e:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__epilogue_restores__+0x18>

00002662 <__ltsf2>:
    2662:	a8 e1       	ldi	r26, 0x18	; 24
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	e7 e3       	ldi	r30, 0x37	; 55
    2668:	f3 e1       	ldi	r31, 0x13	; 19
    266a:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__prologue_saves__+0x18>
    266e:	69 83       	std	Y+1, r22	; 0x01
    2670:	7a 83       	std	Y+2, r23	; 0x02
    2672:	8b 83       	std	Y+3, r24	; 0x03
    2674:	9c 83       	std	Y+4, r25	; 0x04
    2676:	2d 83       	std	Y+5, r18	; 0x05
    2678:	3e 83       	std	Y+6, r19	; 0x06
    267a:	4f 83       	std	Y+7, r20	; 0x07
    267c:	58 87       	std	Y+8, r21	; 0x08
    267e:	8e 01       	movw	r16, r28
    2680:	07 5f       	subi	r16, 0xF7	; 247
    2682:	1f 4f       	sbci	r17, 0xFF	; 255
    2684:	ce 01       	movw	r24, r28
    2686:	01 96       	adiw	r24, 0x01	; 1
    2688:	b8 01       	movw	r22, r16
    268a:	0e 94 81 14 	call	0x2902	; 0x2902 <__unpack_f>
    268e:	81 e1       	ldi	r24, 0x11	; 17
    2690:	e8 2e       	mov	r14, r24
    2692:	f1 2c       	mov	r15, r1
    2694:	ec 0e       	add	r14, r28
    2696:	fd 1e       	adc	r15, r29
    2698:	ce 01       	movw	r24, r28
    269a:	05 96       	adiw	r24, 0x05	; 5
    269c:	b7 01       	movw	r22, r14
    269e:	0e 94 81 14 	call	0x2902	; 0x2902 <__unpack_f>
    26a2:	89 85       	ldd	r24, Y+9	; 0x09
    26a4:	82 30       	cpi	r24, 0x02	; 2
    26a6:	40 f0       	brcs	.+16     	; 0x26b8 <__ltsf2+0x56>
    26a8:	89 89       	ldd	r24, Y+17	; 0x11
    26aa:	82 30       	cpi	r24, 0x02	; 2
    26ac:	28 f0       	brcs	.+10     	; 0x26b8 <__ltsf2+0x56>
    26ae:	c8 01       	movw	r24, r16
    26b0:	b7 01       	movw	r22, r14
    26b2:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__fpcmp_parts_f>
    26b6:	01 c0       	rjmp	.+2      	; 0x26ba <__ltsf2+0x58>
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	68 96       	adiw	r28, 0x18	; 24
    26bc:	e6 e0       	ldi	r30, 0x06	; 6
    26be:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__epilogue_restores__+0x18>

000026c2 <__fixsfsi>:
    26c2:	ac e0       	ldi	r26, 0x0C	; 12
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	e7 e6       	ldi	r30, 0x67	; 103
    26c8:	f3 e1       	ldi	r31, 0x13	; 19
    26ca:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <__prologue_saves__+0x20>
    26ce:	69 83       	std	Y+1, r22	; 0x01
    26d0:	7a 83       	std	Y+2, r23	; 0x02
    26d2:	8b 83       	std	Y+3, r24	; 0x03
    26d4:	9c 83       	std	Y+4, r25	; 0x04
    26d6:	ce 01       	movw	r24, r28
    26d8:	01 96       	adiw	r24, 0x01	; 1
    26da:	be 01       	movw	r22, r28
    26dc:	6b 5f       	subi	r22, 0xFB	; 251
    26de:	7f 4f       	sbci	r23, 0xFF	; 255
    26e0:	0e 94 81 14 	call	0x2902	; 0x2902 <__unpack_f>
    26e4:	8d 81       	ldd	r24, Y+5	; 0x05
    26e6:	82 30       	cpi	r24, 0x02	; 2
    26e8:	81 f1       	breq	.+96     	; 0x274a <__fixsfsi+0x88>
    26ea:	82 30       	cpi	r24, 0x02	; 2
    26ec:	70 f1       	brcs	.+92     	; 0x274a <__fixsfsi+0x88>
    26ee:	84 30       	cpi	r24, 0x04	; 4
    26f0:	21 f4       	brne	.+8      	; 0x26fa <__fixsfsi+0x38>
    26f2:	8e 81       	ldd	r24, Y+6	; 0x06
    26f4:	88 23       	and	r24, r24
    26f6:	69 f1       	breq	.+90     	; 0x2752 <__fixsfsi+0x90>
    26f8:	0a c0       	rjmp	.+20     	; 0x270e <__fixsfsi+0x4c>
    26fa:	2f 81       	ldd	r18, Y+7	; 0x07
    26fc:	38 85       	ldd	r19, Y+8	; 0x08
    26fe:	37 fd       	sbrc	r19, 7
    2700:	24 c0       	rjmp	.+72     	; 0x274a <__fixsfsi+0x88>
    2702:	6e 81       	ldd	r22, Y+6	; 0x06
    2704:	2f 31       	cpi	r18, 0x1F	; 31
    2706:	31 05       	cpc	r19, r1
    2708:	3c f0       	brlt	.+14     	; 0x2718 <__fixsfsi+0x56>
    270a:	66 23       	and	r22, r22
    270c:	11 f1       	breq	.+68     	; 0x2752 <__fixsfsi+0x90>
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e0       	ldi	r20, 0x00	; 0
    2714:	50 e8       	ldi	r21, 0x80	; 128
    2716:	21 c0       	rjmp	.+66     	; 0x275a <__fixsfsi+0x98>
    2718:	8e e1       	ldi	r24, 0x1E	; 30
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	82 1b       	sub	r24, r18
    271e:	93 0b       	sbc	r25, r19
    2720:	29 85       	ldd	r18, Y+9	; 0x09
    2722:	3a 85       	ldd	r19, Y+10	; 0x0a
    2724:	4b 85       	ldd	r20, Y+11	; 0x0b
    2726:	5c 85       	ldd	r21, Y+12	; 0x0c
    2728:	04 c0       	rjmp	.+8      	; 0x2732 <__fixsfsi+0x70>
    272a:	56 95       	lsr	r21
    272c:	47 95       	ror	r20
    272e:	37 95       	ror	r19
    2730:	27 95       	ror	r18
    2732:	8a 95       	dec	r24
    2734:	d2 f7       	brpl	.-12     	; 0x272a <__fixsfsi+0x68>
    2736:	66 23       	and	r22, r22
    2738:	81 f0       	breq	.+32     	; 0x275a <__fixsfsi+0x98>
    273a:	50 95       	com	r21
    273c:	40 95       	com	r20
    273e:	30 95       	com	r19
    2740:	21 95       	neg	r18
    2742:	3f 4f       	sbci	r19, 0xFF	; 255
    2744:	4f 4f       	sbci	r20, 0xFF	; 255
    2746:	5f 4f       	sbci	r21, 0xFF	; 255
    2748:	08 c0       	rjmp	.+16     	; 0x275a <__fixsfsi+0x98>
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	a9 01       	movw	r20, r18
    2750:	04 c0       	rjmp	.+8      	; 0x275a <__fixsfsi+0x98>
    2752:	2f ef       	ldi	r18, 0xFF	; 255
    2754:	3f ef       	ldi	r19, 0xFF	; 255
    2756:	4f ef       	ldi	r20, 0xFF	; 255
    2758:	5f e7       	ldi	r21, 0x7F	; 127
    275a:	b9 01       	movw	r22, r18
    275c:	ca 01       	movw	r24, r20
    275e:	2c 96       	adiw	r28, 0x0c	; 12
    2760:	e2 e0       	ldi	r30, 0x02	; 2
    2762:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <__epilogue_restores__+0x20>

00002766 <__pack_f>:
    2766:	ef 92       	push	r14
    2768:	ff 92       	push	r15
    276a:	0f 93       	push	r16
    276c:	1f 93       	push	r17
    276e:	cf 93       	push	r28
    2770:	df 93       	push	r29
    2772:	fc 01       	movw	r30, r24
    2774:	24 81       	ldd	r18, Z+4	; 0x04
    2776:	35 81       	ldd	r19, Z+5	; 0x05
    2778:	46 81       	ldd	r20, Z+6	; 0x06
    277a:	57 81       	ldd	r21, Z+7	; 0x07
    277c:	61 81       	ldd	r22, Z+1	; 0x01
    277e:	80 81       	ld	r24, Z
    2780:	82 30       	cpi	r24, 0x02	; 2
    2782:	20 f4       	brcc	.+8      	; 0x278c <__pack_f+0x26>
    2784:	40 61       	ori	r20, 0x10	; 16
    2786:	ef ef       	ldi	r30, 0xFF	; 255
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	a3 c0       	rjmp	.+326    	; 0x28d2 <__pack_f+0x16c>
    278c:	84 30       	cpi	r24, 0x04	; 4
    278e:	09 f4       	brne	.+2      	; 0x2792 <__pack_f+0x2c>
    2790:	9b c0       	rjmp	.+310    	; 0x28c8 <__pack_f+0x162>
    2792:	82 30       	cpi	r24, 0x02	; 2
    2794:	09 f4       	brne	.+2      	; 0x2798 <__pack_f+0x32>
    2796:	92 c0       	rjmp	.+292    	; 0x28bc <__pack_f+0x156>
    2798:	21 15       	cp	r18, r1
    279a:	31 05       	cpc	r19, r1
    279c:	41 05       	cpc	r20, r1
    279e:	51 05       	cpc	r21, r1
    27a0:	09 f4       	brne	.+2      	; 0x27a4 <__pack_f+0x3e>
    27a2:	8f c0       	rjmp	.+286    	; 0x28c2 <__pack_f+0x15c>
    27a4:	02 80       	ldd	r0, Z+2	; 0x02
    27a6:	f3 81       	ldd	r31, Z+3	; 0x03
    27a8:	e0 2d       	mov	r30, r0
    27aa:	8f ef       	ldi	r24, 0xFF	; 255
    27ac:	e2 38       	cpi	r30, 0x82	; 130
    27ae:	f8 07       	cpc	r31, r24
    27b0:	0c f0       	brlt	.+2      	; 0x27b4 <__pack_f+0x4e>
    27b2:	5a c0       	rjmp	.+180    	; 0x2868 <__pack_f+0x102>
    27b4:	c2 e8       	ldi	r28, 0x82	; 130
    27b6:	df ef       	ldi	r29, 0xFF	; 255
    27b8:	ce 1b       	sub	r28, r30
    27ba:	df 0b       	sbc	r29, r31
    27bc:	ca 31       	cpi	r28, 0x1A	; 26
    27be:	d1 05       	cpc	r29, r1
    27c0:	6c f5       	brge	.+90     	; 0x281c <__pack_f+0xb6>
    27c2:	79 01       	movw	r14, r18
    27c4:	8a 01       	movw	r16, r20
    27c6:	0c 2e       	mov	r0, r28
    27c8:	04 c0       	rjmp	.+8      	; 0x27d2 <__pack_f+0x6c>
    27ca:	16 95       	lsr	r17
    27cc:	07 95       	ror	r16
    27ce:	f7 94       	ror	r15
    27d0:	e7 94       	ror	r14
    27d2:	0a 94       	dec	r0
    27d4:	d2 f7       	brpl	.-12     	; 0x27ca <__pack_f+0x64>
    27d6:	81 e0       	ldi	r24, 0x01	; 1
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	a0 e0       	ldi	r26, 0x00	; 0
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	0c 2e       	mov	r0, r28
    27e0:	04 c0       	rjmp	.+8      	; 0x27ea <__pack_f+0x84>
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	aa 1f       	adc	r26, r26
    27e8:	bb 1f       	adc	r27, r27
    27ea:	0a 94       	dec	r0
    27ec:	d2 f7       	brpl	.-12     	; 0x27e2 <__pack_f+0x7c>
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	a1 09       	sbc	r26, r1
    27f2:	b1 09       	sbc	r27, r1
    27f4:	82 23       	and	r24, r18
    27f6:	93 23       	and	r25, r19
    27f8:	a4 23       	and	r26, r20
    27fa:	b5 23       	and	r27, r21
    27fc:	21 e0       	ldi	r18, 0x01	; 1
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e0       	ldi	r20, 0x00	; 0
    2802:	50 e0       	ldi	r21, 0x00	; 0
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	a1 05       	cpc	r26, r1
    2808:	b1 05       	cpc	r27, r1
    280a:	19 f4       	brne	.+6      	; 0x2812 <__pack_f+0xac>
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	a9 01       	movw	r20, r18
    2812:	2e 29       	or	r18, r14
    2814:	3f 29       	or	r19, r15
    2816:	40 2b       	or	r20, r16
    2818:	51 2b       	or	r21, r17
    281a:	03 c0       	rjmp	.+6      	; 0x2822 <__pack_f+0xbc>
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	a9 01       	movw	r20, r18
    2822:	da 01       	movw	r26, r20
    2824:	c9 01       	movw	r24, r18
    2826:	8f 77       	andi	r24, 0x7F	; 127
    2828:	90 70       	andi	r25, 0x00	; 0
    282a:	a0 70       	andi	r26, 0x00	; 0
    282c:	b0 70       	andi	r27, 0x00	; 0
    282e:	80 34       	cpi	r24, 0x40	; 64
    2830:	91 05       	cpc	r25, r1
    2832:	a1 05       	cpc	r26, r1
    2834:	b1 05       	cpc	r27, r1
    2836:	39 f4       	brne	.+14     	; 0x2846 <__pack_f+0xe0>
    2838:	27 ff       	sbrs	r18, 7
    283a:	09 c0       	rjmp	.+18     	; 0x284e <__pack_f+0xe8>
    283c:	20 5c       	subi	r18, 0xC0	; 192
    283e:	3f 4f       	sbci	r19, 0xFF	; 255
    2840:	4f 4f       	sbci	r20, 0xFF	; 255
    2842:	5f 4f       	sbci	r21, 0xFF	; 255
    2844:	04 c0       	rjmp	.+8      	; 0x284e <__pack_f+0xe8>
    2846:	21 5c       	subi	r18, 0xC1	; 193
    2848:	3f 4f       	sbci	r19, 0xFF	; 255
    284a:	4f 4f       	sbci	r20, 0xFF	; 255
    284c:	5f 4f       	sbci	r21, 0xFF	; 255
    284e:	e1 e0       	ldi	r30, 0x01	; 1
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	20 30       	cpi	r18, 0x00	; 0
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	38 07       	cpc	r19, r24
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	48 07       	cpc	r20, r24
    285c:	80 e4       	ldi	r24, 0x40	; 64
    285e:	58 07       	cpc	r21, r24
    2860:	28 f5       	brcc	.+74     	; 0x28ac <__pack_f+0x146>
    2862:	e0 e0       	ldi	r30, 0x00	; 0
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	22 c0       	rjmp	.+68     	; 0x28ac <__pack_f+0x146>
    2868:	e0 38       	cpi	r30, 0x80	; 128
    286a:	f1 05       	cpc	r31, r1
    286c:	6c f5       	brge	.+90     	; 0x28c8 <__pack_f+0x162>
    286e:	e1 58       	subi	r30, 0x81	; 129
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	da 01       	movw	r26, r20
    2874:	c9 01       	movw	r24, r18
    2876:	8f 77       	andi	r24, 0x7F	; 127
    2878:	90 70       	andi	r25, 0x00	; 0
    287a:	a0 70       	andi	r26, 0x00	; 0
    287c:	b0 70       	andi	r27, 0x00	; 0
    287e:	80 34       	cpi	r24, 0x40	; 64
    2880:	91 05       	cpc	r25, r1
    2882:	a1 05       	cpc	r26, r1
    2884:	b1 05       	cpc	r27, r1
    2886:	39 f4       	brne	.+14     	; 0x2896 <__pack_f+0x130>
    2888:	27 ff       	sbrs	r18, 7
    288a:	09 c0       	rjmp	.+18     	; 0x289e <__pack_f+0x138>
    288c:	20 5c       	subi	r18, 0xC0	; 192
    288e:	3f 4f       	sbci	r19, 0xFF	; 255
    2890:	4f 4f       	sbci	r20, 0xFF	; 255
    2892:	5f 4f       	sbci	r21, 0xFF	; 255
    2894:	04 c0       	rjmp	.+8      	; 0x289e <__pack_f+0x138>
    2896:	21 5c       	subi	r18, 0xC1	; 193
    2898:	3f 4f       	sbci	r19, 0xFF	; 255
    289a:	4f 4f       	sbci	r20, 0xFF	; 255
    289c:	5f 4f       	sbci	r21, 0xFF	; 255
    289e:	57 ff       	sbrs	r21, 7
    28a0:	05 c0       	rjmp	.+10     	; 0x28ac <__pack_f+0x146>
    28a2:	56 95       	lsr	r21
    28a4:	47 95       	ror	r20
    28a6:	37 95       	ror	r19
    28a8:	27 95       	ror	r18
    28aa:	31 96       	adiw	r30, 0x01	; 1
    28ac:	87 e0       	ldi	r24, 0x07	; 7
    28ae:	56 95       	lsr	r21
    28b0:	47 95       	ror	r20
    28b2:	37 95       	ror	r19
    28b4:	27 95       	ror	r18
    28b6:	8a 95       	dec	r24
    28b8:	d1 f7       	brne	.-12     	; 0x28ae <__pack_f+0x148>
    28ba:	0b c0       	rjmp	.+22     	; 0x28d2 <__pack_f+0x16c>
    28bc:	e0 e0       	ldi	r30, 0x00	; 0
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	05 c0       	rjmp	.+10     	; 0x28cc <__pack_f+0x166>
    28c2:	e0 e0       	ldi	r30, 0x00	; 0
    28c4:	f0 e0       	ldi	r31, 0x00	; 0
    28c6:	05 c0       	rjmp	.+10     	; 0x28d2 <__pack_f+0x16c>
    28c8:	ef ef       	ldi	r30, 0xFF	; 255
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	a9 01       	movw	r20, r18
    28d2:	8e 2f       	mov	r24, r30
    28d4:	87 95       	ror	r24
    28d6:	88 27       	eor	r24, r24
    28d8:	87 95       	ror	r24
    28da:	94 2f       	mov	r25, r20
    28dc:	9f 77       	andi	r25, 0x7F	; 127
    28de:	67 95       	ror	r22
    28e0:	66 27       	eor	r22, r22
    28e2:	67 95       	ror	r22
    28e4:	e6 95       	lsr	r30
    28e6:	e2 2e       	mov	r14, r18
    28e8:	a9 2f       	mov	r26, r25
    28ea:	a8 2b       	or	r26, r24
    28ec:	fe 2f       	mov	r31, r30
    28ee:	f6 2b       	or	r31, r22
    28f0:	62 2f       	mov	r22, r18
    28f2:	73 2f       	mov	r23, r19
    28f4:	8a 2f       	mov	r24, r26
    28f6:	9f 2f       	mov	r25, r31
    28f8:	cd b7       	in	r28, 0x3d	; 61
    28fa:	de b7       	in	r29, 0x3e	; 62
    28fc:	e6 e0       	ldi	r30, 0x06	; 6
    28fe:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__epilogue_restores__+0x18>

00002902 <__unpack_f>:
    2902:	dc 01       	movw	r26, r24
    2904:	fb 01       	movw	r30, r22
    2906:	2c 91       	ld	r18, X
    2908:	11 96       	adiw	r26, 0x01	; 1
    290a:	3c 91       	ld	r19, X
    290c:	11 97       	sbiw	r26, 0x01	; 1
    290e:	12 96       	adiw	r26, 0x02	; 2
    2910:	8c 91       	ld	r24, X
    2912:	12 97       	sbiw	r26, 0x02	; 2
    2914:	48 2f       	mov	r20, r24
    2916:	4f 77       	andi	r20, 0x7F	; 127
    2918:	50 e0       	ldi	r21, 0x00	; 0
    291a:	98 2f       	mov	r25, r24
    291c:	99 1f       	adc	r25, r25
    291e:	99 27       	eor	r25, r25
    2920:	99 1f       	adc	r25, r25
    2922:	13 96       	adiw	r26, 0x03	; 3
    2924:	6c 91       	ld	r22, X
    2926:	13 97       	sbiw	r26, 0x03	; 3
    2928:	86 2f       	mov	r24, r22
    292a:	88 0f       	add	r24, r24
    292c:	89 2b       	or	r24, r25
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	66 1f       	adc	r22, r22
    2932:	66 27       	eor	r22, r22
    2934:	66 1f       	adc	r22, r22
    2936:	61 83       	std	Z+1, r22	; 0x01
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	39 f5       	brne	.+78     	; 0x298a <__unpack_f+0x88>
    293c:	21 15       	cp	r18, r1
    293e:	31 05       	cpc	r19, r1
    2940:	41 05       	cpc	r20, r1
    2942:	51 05       	cpc	r21, r1
    2944:	11 f4       	brne	.+4      	; 0x294a <__unpack_f+0x48>
    2946:	82 e0       	ldi	r24, 0x02	; 2
    2948:	29 c0       	rjmp	.+82     	; 0x299c <__unpack_f+0x9a>
    294a:	82 e8       	ldi	r24, 0x82	; 130
    294c:	9f ef       	ldi	r25, 0xFF	; 255
    294e:	93 83       	std	Z+3, r25	; 0x03
    2950:	82 83       	std	Z+2, r24	; 0x02
    2952:	67 e0       	ldi	r22, 0x07	; 7
    2954:	22 0f       	add	r18, r18
    2956:	33 1f       	adc	r19, r19
    2958:	44 1f       	adc	r20, r20
    295a:	55 1f       	adc	r21, r21
    295c:	6a 95       	dec	r22
    295e:	d1 f7       	brne	.-12     	; 0x2954 <__unpack_f+0x52>
    2960:	83 e0       	ldi	r24, 0x03	; 3
    2962:	80 83       	st	Z, r24
    2964:	09 c0       	rjmp	.+18     	; 0x2978 <__unpack_f+0x76>
    2966:	22 0f       	add	r18, r18
    2968:	33 1f       	adc	r19, r19
    296a:	44 1f       	adc	r20, r20
    296c:	55 1f       	adc	r21, r21
    296e:	82 81       	ldd	r24, Z+2	; 0x02
    2970:	93 81       	ldd	r25, Z+3	; 0x03
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	93 83       	std	Z+3, r25	; 0x03
    2976:	82 83       	std	Z+2, r24	; 0x02
    2978:	20 30       	cpi	r18, 0x00	; 0
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	38 07       	cpc	r19, r24
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	48 07       	cpc	r20, r24
    2982:	80 e4       	ldi	r24, 0x40	; 64
    2984:	58 07       	cpc	r21, r24
    2986:	78 f3       	brcs	.-34     	; 0x2966 <__unpack_f+0x64>
    2988:	20 c0       	rjmp	.+64     	; 0x29ca <__unpack_f+0xc8>
    298a:	8f 3f       	cpi	r24, 0xFF	; 255
    298c:	91 05       	cpc	r25, r1
    298e:	79 f4       	brne	.+30     	; 0x29ae <__unpack_f+0xac>
    2990:	21 15       	cp	r18, r1
    2992:	31 05       	cpc	r19, r1
    2994:	41 05       	cpc	r20, r1
    2996:	51 05       	cpc	r21, r1
    2998:	19 f4       	brne	.+6      	; 0x29a0 <__unpack_f+0x9e>
    299a:	84 e0       	ldi	r24, 0x04	; 4
    299c:	80 83       	st	Z, r24
    299e:	08 95       	ret
    29a0:	44 ff       	sbrs	r20, 4
    29a2:	03 c0       	rjmp	.+6      	; 0x29aa <__unpack_f+0xa8>
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	80 83       	st	Z, r24
    29a8:	10 c0       	rjmp	.+32     	; 0x29ca <__unpack_f+0xc8>
    29aa:	10 82       	st	Z, r1
    29ac:	0e c0       	rjmp	.+28     	; 0x29ca <__unpack_f+0xc8>
    29ae:	8f 57       	subi	r24, 0x7F	; 127
    29b0:	90 40       	sbci	r25, 0x00	; 0
    29b2:	93 83       	std	Z+3, r25	; 0x03
    29b4:	82 83       	std	Z+2, r24	; 0x02
    29b6:	83 e0       	ldi	r24, 0x03	; 3
    29b8:	80 83       	st	Z, r24
    29ba:	87 e0       	ldi	r24, 0x07	; 7
    29bc:	22 0f       	add	r18, r18
    29be:	33 1f       	adc	r19, r19
    29c0:	44 1f       	adc	r20, r20
    29c2:	55 1f       	adc	r21, r21
    29c4:	8a 95       	dec	r24
    29c6:	d1 f7       	brne	.-12     	; 0x29bc <__unpack_f+0xba>
    29c8:	50 64       	ori	r21, 0x40	; 64
    29ca:	24 83       	std	Z+4, r18	; 0x04
    29cc:	35 83       	std	Z+5, r19	; 0x05
    29ce:	46 83       	std	Z+6, r20	; 0x06
    29d0:	57 83       	std	Z+7, r21	; 0x07
    29d2:	08 95       	ret

000029d4 <__fpcmp_parts_f>:
    29d4:	fc 01       	movw	r30, r24
    29d6:	db 01       	movw	r26, r22
    29d8:	90 81       	ld	r25, Z
    29da:	92 30       	cpi	r25, 0x02	; 2
    29dc:	08 f4       	brcc	.+2      	; 0x29e0 <__fpcmp_parts_f+0xc>
    29de:	49 c0       	rjmp	.+146    	; 0x2a72 <__fpcmp_parts_f+0x9e>
    29e0:	8c 91       	ld	r24, X
    29e2:	82 30       	cpi	r24, 0x02	; 2
    29e4:	08 f4       	brcc	.+2      	; 0x29e8 <__fpcmp_parts_f+0x14>
    29e6:	45 c0       	rjmp	.+138    	; 0x2a72 <__fpcmp_parts_f+0x9e>
    29e8:	94 30       	cpi	r25, 0x04	; 4
    29ea:	51 f4       	brne	.+20     	; 0x2a00 <__fpcmp_parts_f+0x2c>
    29ec:	61 81       	ldd	r22, Z+1	; 0x01
    29ee:	84 30       	cpi	r24, 0x04	; 4
    29f0:	b1 f5       	brne	.+108    	; 0x2a5e <__fpcmp_parts_f+0x8a>
    29f2:	11 96       	adiw	r26, 0x01	; 1
    29f4:	2c 91       	ld	r18, X
    29f6:	11 97       	sbiw	r26, 0x01	; 1
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	26 1b       	sub	r18, r22
    29fc:	31 09       	sbc	r19, r1
    29fe:	41 c0       	rjmp	.+130    	; 0x2a82 <__fpcmp_parts_f+0xae>
    2a00:	84 30       	cpi	r24, 0x04	; 4
    2a02:	21 f0       	breq	.+8      	; 0x2a0c <__fpcmp_parts_f+0x38>
    2a04:	92 30       	cpi	r25, 0x02	; 2
    2a06:	41 f4       	brne	.+16     	; 0x2a18 <__fpcmp_parts_f+0x44>
    2a08:	82 30       	cpi	r24, 0x02	; 2
    2a0a:	b1 f1       	breq	.+108    	; 0x2a78 <__fpcmp_parts_f+0xa4>
    2a0c:	11 96       	adiw	r26, 0x01	; 1
    2a0e:	8c 91       	ld	r24, X
    2a10:	11 97       	sbiw	r26, 0x01	; 1
    2a12:	88 23       	and	r24, r24
    2a14:	a1 f1       	breq	.+104    	; 0x2a7e <__fpcmp_parts_f+0xaa>
    2a16:	2d c0       	rjmp	.+90     	; 0x2a72 <__fpcmp_parts_f+0x9e>
    2a18:	61 81       	ldd	r22, Z+1	; 0x01
    2a1a:	82 30       	cpi	r24, 0x02	; 2
    2a1c:	01 f1       	breq	.+64     	; 0x2a5e <__fpcmp_parts_f+0x8a>
    2a1e:	11 96       	adiw	r26, 0x01	; 1
    2a20:	8c 91       	ld	r24, X
    2a22:	11 97       	sbiw	r26, 0x01	; 1
    2a24:	68 17       	cp	r22, r24
    2a26:	d9 f4       	brne	.+54     	; 0x2a5e <__fpcmp_parts_f+0x8a>
    2a28:	22 81       	ldd	r18, Z+2	; 0x02
    2a2a:	33 81       	ldd	r19, Z+3	; 0x03
    2a2c:	12 96       	adiw	r26, 0x02	; 2
    2a2e:	8d 91       	ld	r24, X+
    2a30:	9c 91       	ld	r25, X
    2a32:	13 97       	sbiw	r26, 0x03	; 3
    2a34:	82 17       	cp	r24, r18
    2a36:	93 07       	cpc	r25, r19
    2a38:	94 f0       	brlt	.+36     	; 0x2a5e <__fpcmp_parts_f+0x8a>
    2a3a:	28 17       	cp	r18, r24
    2a3c:	39 07       	cpc	r19, r25
    2a3e:	bc f0       	brlt	.+46     	; 0x2a6e <__fpcmp_parts_f+0x9a>
    2a40:	24 81       	ldd	r18, Z+4	; 0x04
    2a42:	35 81       	ldd	r19, Z+5	; 0x05
    2a44:	46 81       	ldd	r20, Z+6	; 0x06
    2a46:	57 81       	ldd	r21, Z+7	; 0x07
    2a48:	14 96       	adiw	r26, 0x04	; 4
    2a4a:	8d 91       	ld	r24, X+
    2a4c:	9d 91       	ld	r25, X+
    2a4e:	0d 90       	ld	r0, X+
    2a50:	bc 91       	ld	r27, X
    2a52:	a0 2d       	mov	r26, r0
    2a54:	82 17       	cp	r24, r18
    2a56:	93 07       	cpc	r25, r19
    2a58:	a4 07       	cpc	r26, r20
    2a5a:	b5 07       	cpc	r27, r21
    2a5c:	18 f4       	brcc	.+6      	; 0x2a64 <__fpcmp_parts_f+0x90>
    2a5e:	66 23       	and	r22, r22
    2a60:	41 f0       	breq	.+16     	; 0x2a72 <__fpcmp_parts_f+0x9e>
    2a62:	0d c0       	rjmp	.+26     	; 0x2a7e <__fpcmp_parts_f+0xaa>
    2a64:	28 17       	cp	r18, r24
    2a66:	39 07       	cpc	r19, r25
    2a68:	4a 07       	cpc	r20, r26
    2a6a:	5b 07       	cpc	r21, r27
    2a6c:	28 f4       	brcc	.+10     	; 0x2a78 <__fpcmp_parts_f+0xa4>
    2a6e:	66 23       	and	r22, r22
    2a70:	31 f0       	breq	.+12     	; 0x2a7e <__fpcmp_parts_f+0xaa>
    2a72:	21 e0       	ldi	r18, 0x01	; 1
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	05 c0       	rjmp	.+10     	; 0x2a82 <__fpcmp_parts_f+0xae>
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	02 c0       	rjmp	.+4      	; 0x2a82 <__fpcmp_parts_f+0xae>
    2a7e:	2f ef       	ldi	r18, 0xFF	; 255
    2a80:	3f ef       	ldi	r19, 0xFF	; 255
    2a82:	c9 01       	movw	r24, r18
    2a84:	08 95       	ret

00002a86 <__mulsi3>:
    2a86:	62 9f       	mul	r22, r18
    2a88:	d0 01       	movw	r26, r0
    2a8a:	73 9f       	mul	r23, r19
    2a8c:	f0 01       	movw	r30, r0
    2a8e:	82 9f       	mul	r24, r18
    2a90:	e0 0d       	add	r30, r0
    2a92:	f1 1d       	adc	r31, r1
    2a94:	64 9f       	mul	r22, r20
    2a96:	e0 0d       	add	r30, r0
    2a98:	f1 1d       	adc	r31, r1
    2a9a:	92 9f       	mul	r25, r18
    2a9c:	f0 0d       	add	r31, r0
    2a9e:	83 9f       	mul	r24, r19
    2aa0:	f0 0d       	add	r31, r0
    2aa2:	74 9f       	mul	r23, r20
    2aa4:	f0 0d       	add	r31, r0
    2aa6:	65 9f       	mul	r22, r21
    2aa8:	f0 0d       	add	r31, r0
    2aaa:	99 27       	eor	r25, r25
    2aac:	72 9f       	mul	r23, r18
    2aae:	b0 0d       	add	r27, r0
    2ab0:	e1 1d       	adc	r30, r1
    2ab2:	f9 1f       	adc	r31, r25
    2ab4:	63 9f       	mul	r22, r19
    2ab6:	b0 0d       	add	r27, r0
    2ab8:	e1 1d       	adc	r30, r1
    2aba:	f9 1f       	adc	r31, r25
    2abc:	bd 01       	movw	r22, r26
    2abe:	cf 01       	movw	r24, r30
    2ac0:	11 24       	eor	r1, r1
    2ac2:	08 95       	ret

00002ac4 <__udivmodqi4>:
    2ac4:	99 1b       	sub	r25, r25
    2ac6:	79 e0       	ldi	r23, 0x09	; 9
    2ac8:	04 c0       	rjmp	.+8      	; 0x2ad2 <__udivmodqi4_ep>

00002aca <__udivmodqi4_loop>:
    2aca:	99 1f       	adc	r25, r25
    2acc:	96 17       	cp	r25, r22
    2ace:	08 f0       	brcs	.+2      	; 0x2ad2 <__udivmodqi4_ep>
    2ad0:	96 1b       	sub	r25, r22

00002ad2 <__udivmodqi4_ep>:
    2ad2:	88 1f       	adc	r24, r24
    2ad4:	7a 95       	dec	r23
    2ad6:	c9 f7       	brne	.-14     	; 0x2aca <__udivmodqi4_loop>
    2ad8:	80 95       	com	r24
    2ada:	08 95       	ret

00002adc <__divmodsi4>:
    2adc:	97 fb       	bst	r25, 7
    2ade:	09 2e       	mov	r0, r25
    2ae0:	05 26       	eor	r0, r21
    2ae2:	0e d0       	rcall	.+28     	; 0x2b00 <__divmodsi4_neg1>
    2ae4:	57 fd       	sbrc	r21, 7
    2ae6:	04 d0       	rcall	.+8      	; 0x2af0 <__divmodsi4_neg2>
    2ae8:	14 d0       	rcall	.+40     	; 0x2b12 <__udivmodsi4>
    2aea:	0a d0       	rcall	.+20     	; 0x2b00 <__divmodsi4_neg1>
    2aec:	00 1c       	adc	r0, r0
    2aee:	38 f4       	brcc	.+14     	; 0x2afe <__divmodsi4_exit>

00002af0 <__divmodsi4_neg2>:
    2af0:	50 95       	com	r21
    2af2:	40 95       	com	r20
    2af4:	30 95       	com	r19
    2af6:	21 95       	neg	r18
    2af8:	3f 4f       	sbci	r19, 0xFF	; 255
    2afa:	4f 4f       	sbci	r20, 0xFF	; 255
    2afc:	5f 4f       	sbci	r21, 0xFF	; 255

00002afe <__divmodsi4_exit>:
    2afe:	08 95       	ret

00002b00 <__divmodsi4_neg1>:
    2b00:	f6 f7       	brtc	.-4      	; 0x2afe <__divmodsi4_exit>
    2b02:	90 95       	com	r25
    2b04:	80 95       	com	r24
    2b06:	70 95       	com	r23
    2b08:	61 95       	neg	r22
    2b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b0c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b10:	08 95       	ret

00002b12 <__udivmodsi4>:
    2b12:	a1 e2       	ldi	r26, 0x21	; 33
    2b14:	1a 2e       	mov	r1, r26
    2b16:	aa 1b       	sub	r26, r26
    2b18:	bb 1b       	sub	r27, r27
    2b1a:	fd 01       	movw	r30, r26
    2b1c:	0d c0       	rjmp	.+26     	; 0x2b38 <__udivmodsi4_ep>

00002b1e <__udivmodsi4_loop>:
    2b1e:	aa 1f       	adc	r26, r26
    2b20:	bb 1f       	adc	r27, r27
    2b22:	ee 1f       	adc	r30, r30
    2b24:	ff 1f       	adc	r31, r31
    2b26:	a2 17       	cp	r26, r18
    2b28:	b3 07       	cpc	r27, r19
    2b2a:	e4 07       	cpc	r30, r20
    2b2c:	f5 07       	cpc	r31, r21
    2b2e:	20 f0       	brcs	.+8      	; 0x2b38 <__udivmodsi4_ep>
    2b30:	a2 1b       	sub	r26, r18
    2b32:	b3 0b       	sbc	r27, r19
    2b34:	e4 0b       	sbc	r30, r20
    2b36:	f5 0b       	sbc	r31, r21

00002b38 <__udivmodsi4_ep>:
    2b38:	66 1f       	adc	r22, r22
    2b3a:	77 1f       	adc	r23, r23
    2b3c:	88 1f       	adc	r24, r24
    2b3e:	99 1f       	adc	r25, r25
    2b40:	1a 94       	dec	r1
    2b42:	69 f7       	brne	.-38     	; 0x2b1e <__udivmodsi4_loop>
    2b44:	60 95       	com	r22
    2b46:	70 95       	com	r23
    2b48:	80 95       	com	r24
    2b4a:	90 95       	com	r25
    2b4c:	9b 01       	movw	r18, r22
    2b4e:	ac 01       	movw	r20, r24
    2b50:	bd 01       	movw	r22, r26
    2b52:	cf 01       	movw	r24, r30
    2b54:	08 95       	ret

00002b56 <__prologue_saves__>:
    2b56:	2f 92       	push	r2
    2b58:	3f 92       	push	r3
    2b5a:	4f 92       	push	r4
    2b5c:	5f 92       	push	r5
    2b5e:	6f 92       	push	r6
    2b60:	7f 92       	push	r7
    2b62:	8f 92       	push	r8
    2b64:	9f 92       	push	r9
    2b66:	af 92       	push	r10
    2b68:	bf 92       	push	r11
    2b6a:	cf 92       	push	r12
    2b6c:	df 92       	push	r13
    2b6e:	ef 92       	push	r14
    2b70:	ff 92       	push	r15
    2b72:	0f 93       	push	r16
    2b74:	1f 93       	push	r17
    2b76:	cf 93       	push	r28
    2b78:	df 93       	push	r29
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
    2b7e:	ca 1b       	sub	r28, r26
    2b80:	db 0b       	sbc	r29, r27
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	f8 94       	cli
    2b86:	de bf       	out	0x3e, r29	; 62
    2b88:	0f be       	out	0x3f, r0	; 63
    2b8a:	cd bf       	out	0x3d, r28	; 61
    2b8c:	09 94       	ijmp

00002b8e <__epilogue_restores__>:
    2b8e:	2a 88       	ldd	r2, Y+18	; 0x12
    2b90:	39 88       	ldd	r3, Y+17	; 0x11
    2b92:	48 88       	ldd	r4, Y+16	; 0x10
    2b94:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b96:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b98:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ba0:	b9 84       	ldd	r11, Y+9	; 0x09
    2ba2:	c8 84       	ldd	r12, Y+8	; 0x08
    2ba4:	df 80       	ldd	r13, Y+7	; 0x07
    2ba6:	ee 80       	ldd	r14, Y+6	; 0x06
    2ba8:	fd 80       	ldd	r15, Y+5	; 0x05
    2baa:	0c 81       	ldd	r16, Y+4	; 0x04
    2bac:	1b 81       	ldd	r17, Y+3	; 0x03
    2bae:	aa 81       	ldd	r26, Y+2	; 0x02
    2bb0:	b9 81       	ldd	r27, Y+1	; 0x01
    2bb2:	ce 0f       	add	r28, r30
    2bb4:	d1 1d       	adc	r29, r1
    2bb6:	0f b6       	in	r0, 0x3f	; 63
    2bb8:	f8 94       	cli
    2bba:	de bf       	out	0x3e, r29	; 62
    2bbc:	0f be       	out	0x3f, r0	; 63
    2bbe:	cd bf       	out	0x3d, r28	; 61
    2bc0:	ed 01       	movw	r28, r26
    2bc2:	08 95       	ret

00002bc4 <_exit>:
    2bc4:	f8 94       	cli

00002bc6 <__stop_program>:
    2bc6:	ff cf       	rjmp	.-2      	; 0x2bc6 <__stop_program>
